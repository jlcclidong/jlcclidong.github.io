{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1498324771000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1498324771000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1498324771000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1498324771000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1498324771000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1498324771000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1498324771000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1498324771000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1498324771000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1498324771000},{"_id":"themes/next/_config.yml","hash":"3f15f574d1c845438ee40fd4cfd89acbe608d87f","modified":1498324771000},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1498324771000},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1498324771000},{"_id":"source/_posts/for与foreach在List中的使用.md","hash":"c5149b99b872076cc6f6645244f2d5d469de668c","modified":1498324771000},{"_id":"source/_posts/java反射笔记.md","hash":"32db77ea063b7891572a108312ca1736b52a4308","modified":1498324771000},{"_id":"source/_posts/struts2拦截器.md","hash":"90de4613070a9caabaa6fc387edf30b84930fd9d","modified":1498324771000},{"_id":"source/_posts/okhttp.md","hash":"1f091bee2e5e4fa0b1e4dcb9ff79ebf9f6c8d243","modified":1498324771000},{"_id":"source/_posts/sql笔记.md","hash":"5cdc56a445b31a189ae34826a871124d23a541f6","modified":1498324771000},{"_id":"source/_posts/struts2中返回json数据.md","hash":"062dd0662993191fd42a5e32f8b1f06c85c00f40","modified":1498324771000},{"_id":"source/_posts/struts获取正文.md","hash":"afe2f6d8b0261f8797f5877c8ebcaa052636e374","modified":1498324771000},{"_id":"source/_posts/webview中控制视频播放暂停.md","hash":"3feeb0d1178c275dcc97f04c51c04288800e121c","modified":1498324771000},{"_id":"source/_posts/struts2环境搭建.md","hash":"6bd97e55dadb953544fa3a67075e7793be304a7e","modified":1498324771000},{"_id":"source/_posts/仿美团外卖添加商品的抛物线动画.md","hash":"89da48e7d8baaab6bb76519d0ba5e5da1310a167","modified":1498324771000},{"_id":"source/_posts/停止-builiding.md","hash":"88ef2ab69a7a477debd0fa7ffa455814937a17c4","modified":1498324771000},{"_id":"source/categories/index.md","hash":"3b3ceadc6c4eb3e947b9864ed933a21658045a5c","modified":1498324771000},{"_id":"source/_posts/自定义控件.md","hash":"fe42f522cc5de6a840aef4d41b85216fb2617996","modified":1498324771000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1498324771000},{"_id":"source/tags/index.md","hash":"5883107cd44ef198d8cc65f55cef944ae46919a2","modified":1498324771000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1498324771000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1498324771000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1498324771000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1498324771000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1498324771000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1498324771000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1498324771000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1498324771000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1498324771000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1498324771000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1498324771000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1498324771000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1498324771000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1498324771000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1498324771000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1498324771000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1498324771000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1498324771000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1498324771000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1498324771000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1498324771000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1498324771000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1498324771000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1498324771000},{"_id":"themes/next/source/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1498324771000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1498324771000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1498324771000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1498324771000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498324771000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1498324771000},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1498324771000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1498324771000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1498324771000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1498324771000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1498324771000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1498324771000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1498324771000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1498324771000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1498324771000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1498324771000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1498324771000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1498324771000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1498324771000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1498324771000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1498324771000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1498324771000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1498324771000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1498324771000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1498324771000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1498324771000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1498324771000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1498324771000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1498324771000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1498324771000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1498324771000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1498324771000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1498324771000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1498324771000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1498324771000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1498324771000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1498324771000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1498324771000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498324771000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1498324771000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498324771000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1498324771000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1498324771000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1498324771000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1498324771000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498324771000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498324771000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498324771000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498324771000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498324771000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498324771000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498324771000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1498324771000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1498324771000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1498324771000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1498324771000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1498324771000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1498324771000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1498324771000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1498324771000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1498324771000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1498324771000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1498324771000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1498324771000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1498324771000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1498324771000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1498324771000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1498324771000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1498324771000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1498324771000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1498324771000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1498324771000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1498324771000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1498324771000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1498324771000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1498324771000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1498324771000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1498324771000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1498324771000},{"_id":"themes/next/source/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1498324771000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1498324771000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1498324771000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1498324771000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1498324771000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1498324771000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1498324771000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1498324771000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1498324771000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1498324771000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1498324771000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1498324771000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1498324771000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1498324771000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1498324771000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1498324771000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1498324771000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1498324771000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1498324771000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1498324771000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1498324771000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1498324771000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1498324771000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1498324771000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1498324771000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1498324771000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1498324771000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1498324771000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1498324771000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1498324771000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1498324771000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1498324771000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1498324771000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1498324771000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1498324771000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1498324771000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1498324771000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1498324771000},{"_id":"public/categories/index.html","hash":"f5af310b528731c37362a504239a6b6afcf5a6d3","modified":1498403047988},{"_id":"public/tags/index.html","hash":"8ac6fa4c08970a651df9ec05dfd6253cb46f1903","modified":1498403047988},{"_id":"public/2017/03/20/停止-builiding/index.html","hash":"efdf20b0945d3aacd7e9590fb9a91507bba112a6","modified":1498403047988},{"_id":"public/archives/page/2/index.html","hash":"783a8fc21de1759c978ccab0de9e5c5926a061d6","modified":1498403047988},{"_id":"public/archives/2017/page/2/index.html","hash":"6c2dc9a54e9e1f26191777e6d02cb32ba0b07d12","modified":1498403047988},{"_id":"public/archives/2017/03/index.html","hash":"231d0ad3a12aa16a76ea46a124fcbd4476771b62","modified":1498403047988},{"_id":"public/archives/2017/04/index.html","hash":"11002059e4f093d5ab0ae3219a40dd69daf888d5","modified":1498403047988},{"_id":"public/archives/2017/05/index.html","hash":"3cbe3d6727b91ae2dd68a70168a6936cc5b239fa","modified":1498403047988},{"_id":"public/archives/2017/06/index.html","hash":"c5937a0078aa17e8d02395b5e8751ec932b5fa52","modified":1498403047988},{"_id":"public/categories/笔记/index.html","hash":"a297d2a48d564bda4730a1128de2fb680f73186f","modified":1498403047988},{"_id":"public/categories/笔记/java/index.html","hash":"5bc6bd04053eac9435d5b1866f4bd669b940db47","modified":1498403047989},{"_id":"public/categories/javaee/index.html","hash":"06f9bee3c0e0eac0dc15af9264f5c80b60e05cd5","modified":1498403047989},{"_id":"public/categories/library/index.html","hash":"ff580d328dfc0eeaaf0b3a22b3aae1474814531b","modified":1498403047989},{"_id":"public/categories/笔记/android/index.html","hash":"0edbcd1d01d42bc1120528b69f468ec2a126d180","modified":1498403047989},{"_id":"public/categories/笔记/自定义view/index.html","hash":"a6106082a9e90eab1988f79c2d3760c159d1c02e","modified":1498403047989},{"_id":"public/categories/笔记/android-studio/index.html","hash":"a055be167f5b242933786fe06bb944e5669df08c","modified":1498403047989},{"_id":"public/tags/笔记/index.html","hash":"ad5899d84e9549437c2ba54388f0b04b472191d6","modified":1498403047989},{"_id":"public/tags/java/index.html","hash":"7a358032bddc830439a0199103561e9b4f32717d","modified":1498403047989},{"_id":"public/tags/struts2/index.html","hash":"c4f440b9abbab6fb771e8b02f07f5bb0eeb6ad3f","modified":1498403047989},{"_id":"public/tags/javaee/index.html","hash":"6b04ab0252087606d56aeb87ccb2e71deb7846e6","modified":1498403047989},{"_id":"public/tags/okhttp/index.html","hash":"9f0842a0c9e0f0ad3731eac6c61691c36ab26309","modified":1498403047989},{"_id":"public/tags/library/index.html","hash":"73930fff2d520a5ed7976801238b9838130cf88e","modified":1498403047989},{"_id":"public/tags/sql/index.html","hash":"44816a30a8208093c7237c7b112302d9d68164ba","modified":1498403047989},{"_id":"public/tags/animation/index.html","hash":"92e1f25e95d82c49b2f8eea7685e76d646566867","modified":1498403047989},{"_id":"public/tags/android-studio/index.html","hash":"13aa53d930dfb26b9505166ab75d96b71f8a7a40","modified":1498403047989},{"_id":"public/tags/view/index.html","hash":"8fae16b7efd0c948ddf0f062ca18cfbee43ca7ac","modified":1498403047989},{"_id":"public/2017/03/17/仿美团外卖添加商品的抛物线动画/index.html","hash":"d2ca9d0cb924f44a8b7f63e15973e975cd9b64c1","modified":1498403047990},{"_id":"public/2017/03/20/自定义控件/index.html","hash":"7fb68bd1c202759611d711e1e7f52c468f7ac0a5","modified":1498403047990},{"_id":"public/2017/03/21/okhttp/index.html","hash":"bdf8414f41c1769672a1d51e03fd388f138df63c","modified":1498403047990},{"_id":"public/2017/03/30/for与foreach在List中的使用/index.html","hash":"8e6df88fa4042020620c3757abca260b4a92ed18","modified":1498403047990},{"_id":"public/2017/04/13/webview中控制视频播放暂停/index.html","hash":"631330c447b1ee179145d6eeca5552e2e77d4432","modified":1498403047990},{"_id":"public/2017/04/19/java反射笔记/index.html","hash":"c27e5e40d393c7e35fb3e1b8a0be86ecb46d3697","modified":1498403047990},{"_id":"public/2017/04/21/struts2环境搭建/index.html","hash":"9e0c946368b7a5413a7a36d8b5bd762c81b67153","modified":1498403047990},{"_id":"public/2017/04/24/struts获取正文/index.html","hash":"084cfa87756c5d5432ac6bfb5de66c1b978afb99","modified":1498403047990},{"_id":"public/2017/05/10/struts2中返回json数据/index.html","hash":"ea02648a698bf411ca13659c2e812e127fece4d2","modified":1498403047990},{"_id":"public/2017/05/11/struts2拦截器/index.html","hash":"590eaa62e97e46eebf615f8f9ffec7009a6fc7b1","modified":1498403047990},{"_id":"public/2017/06/24/sql笔记/index.html","hash":"2ad694542e394fab526644215f30f287ca01debb","modified":1498403047990},{"_id":"public/archives/index.html","hash":"e2556fa36cc05458ba364e351207907029fa8109","modified":1498403047990},{"_id":"public/archives/2017/index.html","hash":"7c3955b8c1667da284fd11f4e7f13ae9dfbd5bff","modified":1498403047990},{"_id":"public/index.html","hash":"fe954466458e9bf7395ef9a67bdad1c4fc6dd8a6","modified":1498403047990},{"_id":"public/page/2/index.html","hash":"f660403a8920fef066f12a4381a6abf8b9a9ba7e","modified":1498403047990},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1498403048000},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1498403048000},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1498403048000},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1498403048000},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1498403048000},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1498403048000},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1498403048000},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498403048000},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1498403048000},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498403048000},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1498403048000},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1498403048000},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1498403048000},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1498403048000},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1498403048000},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1498403048000},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1498403048000},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1498403048000},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1498403048000},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1498403048000},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1498403048000},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1498403048000},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1498403048000},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1498403048000},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1498403048597},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1498403048599},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1498403048602},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1498403048602},{"_id":"public/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1498403048607},{"_id":"public/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1498403048607},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1498403048607},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1498403048607},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1498403048607},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1498403048607},{"_id":"public/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1498403048607},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1498403048607},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1498403048608},{"_id":"public/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1498403048608},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1498403048608},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1498403048608},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1498403048608},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1498403048608},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1498403048608},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1498403048608},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1498403048608},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1498403048608},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1498403048608},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1498403048608},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1498403048608},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1498403048608},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1498403048608},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1498403048608},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1498403048608},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1498403048608},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1498403048608},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1498403048608},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1498403048608},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1498403048608},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1498403048608},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1498403048608},{"_id":"public/css/main.css","hash":"5174dc970f5fb332ef8af477274ddf478fe4287b","modified":1498403048608},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1498403048608},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1498403048609},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1498403048609},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1498403048609},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1498403048609},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1498403048609},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1498403048609},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1498403048609},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1498403048609},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1498403048609},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1498403048609},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1498403048618}],"Category":[{"name":"笔记","_id":"cj4cuhhmv000262x2w4hxvdj6"},{"name":"java","parent":"cj4cuhhmv000262x2w4hxvdj6","_id":"cj4cuhhn2000662x21tvyjnx6"},{"name":"javaee","_id":"cj4cuhhsn000m62x2pxlz48y7"},{"name":"library","_id":"cj4cuhhst000r62x2ee9xy9j1"},{"name":"android","parent":"cj4cuhhmv000262x2w4hxvdj6","_id":"cj4cuhht0001462x2ty58uc6b"},{"name":"android studio","parent":"cj4cuhhmv000262x2w4hxvdj6","_id":"cj4cuhht3001b62x2az0vh4nb"},{"name":"自定义view","parent":"cj4cuhhmv000262x2w4hxvdj6","_id":"cj4cuhht8001j62x2zmawhf74"}],"Data":[],"Page":[{"title":"分类","date":"2017-03-20T01:33:31.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-20 09:33:31\ntype: \"categories\"\n---\n","updated":"2017-06-24T17:19:31.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj4cuhhsh000j62x2lpy8hn4f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-03-20T01:31:59.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-20 09:31:59\ntype: \"tags\"\n---\n","updated":"2017-06-24T17:19:31.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj4cuhhsl000l62x24f1oihls","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"java反射笔记","date":"2017-04-19T01:28:04.000Z","_content":"```\n仓廪实而知礼节，衣食足而知荣辱 --管仲\n```\n## Class\n### 获取Class 对象\n*  \n```java\n    Class clazz = A.class;\n  ```\n* String 要放全路径包名 可能会报ClassNotFoundException\n  ```java\ntry {\n    Class class1 = Class.forName(\"refletc.A\");\n  } catch (ClassNotFoundException e) {\n    e.printStackTrace();\n  }\n```\n<!-- more -->\n### Class 方法\n#### 获取名称\n```java\nString className = aClass.getName();  //全限定类名\nString simpleClassName = aClass.getSimpleName(); //类名（不包含包名）\nString packageName = aClass.getPackage().getName();// 包名\n```\n#### 获得类的修饰符 判断类的修饰符\n```java\nint modifiers = aClass.getModifiers();\nModifier.isAbstract(int modifiers);\nModifier.isFinal(int modifiers);\nModifier.isInterface(int modifiers);\nModifier.isNative(int modifiers);\nModifier.isPrivate(int modifiers);\nModifier.isProtected(int modifiers);\nModifier.isPublic(int modifiers);\nModifier.isStatic(int modifiers);\nModifier.isStrict(int modifiers);\nModifier.isSynchronized(int modifiers);\nModifier.isTransient(int modifiers);\nModifier.isVolatile(int modifiers);\n```\n#### 更多方法\n```java\nClass superclass = aClass.getSuperclass(); //获取父类\nClass[] interfaces = aClass.getInterfaces(); //获取实现的接口\n//下面的方法不能获取到私有的方法 变量 构造器\nConstructor[] constructors = aClass.getConstructors(); //获取构造器\nMethod[] method = aClass.getMethods(); //获取方法\nField[] method = aClass.getFields(); //获取变量\n```\n## Constructor\n通过已知构造参数 获取构造方法 new新对象\n```java\n      try {\n            Constructor constructor = clazz.getConstructor(String.class);\n            A r = (A) constructor.newInstance(\"test\");\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n```\n## Field变量 可以通过此方法动态改变成员变量中的静态变量\n```java\n      try {\n            //获取所有的变量 私有的不行\n            Field[] fields = clazz.getFields();\n            //获取指定的成员变量\n            Field field = clazz.getField(\"name\");\n            System.out.println(field.getName()); //name 变量名\n            System.out.println(field.getType());  //class java.lang.String\n            HelloWorld obj = new HelloWorld(\"123\");\n            s.set(obj,\"222\");                 //设置 成员变量值\n            System.out.println(obj.getField(obj)); //得到成员变量值\n\n            Field s1 = clazz.getField(\"password\"); //password为静态变量   \n            System.out.println(s1.get(null));   //静态变量获取时 变量只需要传null\n            s1.set(null,\"rrr\");               \n            System.out.println(s1.get(null));   //静态变量设置后 其他的实例中静态变量也都相应改变\n            System.out.println(obj.s1);\n        } catch (NoSuchFieldException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n```\n## Method方法\n```java\n  Method[] methods = clazz.getMethods();\n  try {\n    Method method = clazz.getMethod(\"test\", String.class);//参数1为方法名 参数2为参数类型，没有参数传null\n    method.invoke(clazz.newInstance(), \"test\");           //执行方法 参数1传实例 2为参数\n    Method method2 = clazz.getMethod(\"testStatic\", null); //获取静态方法\n    method2.invoke(null, null);                           //执行静态方法 1可以传null 没有参数传null\n  } catch (Exception e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n```\n## 访问私有方法 变量\n### Field\n```java\n  try {\n    Field privateField = clazz.getDeclaredField(\"privateString\");\n    privateField.setAccessible(true);   //设置可以访问 可以读写 不开启会报错\n    A a = clazz.newInstance();\n    String privateString = (String) privateField.get(a);\n    privateField.set(a, \"changeField\");\n  } catch (Exception e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n```\n### Method\n```java\n  try {\n\t\t\tMethod privateMethod = clazz.getDeclaredMethod(\"privateMehtod\", String.class, int.class);\n\t\t\tprivateMethod.setAccessible(true);\n\t\t\tprivateMethod.invoke(clazz.newInstance(), \"private\", 12);\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n```\n","source":"_posts/java反射笔记.md","raw":"---\ntitle: java反射笔记\ndate: 2017-04-19 09:28:04\ntags:\n- 笔记\n- java\ncategories:\n- 笔记\n- java\n---\n```\n仓廪实而知礼节，衣食足而知荣辱 --管仲\n```\n## Class\n### 获取Class 对象\n*  \n```java\n    Class clazz = A.class;\n  ```\n* String 要放全路径包名 可能会报ClassNotFoundException\n  ```java\ntry {\n    Class class1 = Class.forName(\"refletc.A\");\n  } catch (ClassNotFoundException e) {\n    e.printStackTrace();\n  }\n```\n<!-- more -->\n### Class 方法\n#### 获取名称\n```java\nString className = aClass.getName();  //全限定类名\nString simpleClassName = aClass.getSimpleName(); //类名（不包含包名）\nString packageName = aClass.getPackage().getName();// 包名\n```\n#### 获得类的修饰符 判断类的修饰符\n```java\nint modifiers = aClass.getModifiers();\nModifier.isAbstract(int modifiers);\nModifier.isFinal(int modifiers);\nModifier.isInterface(int modifiers);\nModifier.isNative(int modifiers);\nModifier.isPrivate(int modifiers);\nModifier.isProtected(int modifiers);\nModifier.isPublic(int modifiers);\nModifier.isStatic(int modifiers);\nModifier.isStrict(int modifiers);\nModifier.isSynchronized(int modifiers);\nModifier.isTransient(int modifiers);\nModifier.isVolatile(int modifiers);\n```\n#### 更多方法\n```java\nClass superclass = aClass.getSuperclass(); //获取父类\nClass[] interfaces = aClass.getInterfaces(); //获取实现的接口\n//下面的方法不能获取到私有的方法 变量 构造器\nConstructor[] constructors = aClass.getConstructors(); //获取构造器\nMethod[] method = aClass.getMethods(); //获取方法\nField[] method = aClass.getFields(); //获取变量\n```\n## Constructor\n通过已知构造参数 获取构造方法 new新对象\n```java\n      try {\n            Constructor constructor = clazz.getConstructor(String.class);\n            A r = (A) constructor.newInstance(\"test\");\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n```\n## Field变量 可以通过此方法动态改变成员变量中的静态变量\n```java\n      try {\n            //获取所有的变量 私有的不行\n            Field[] fields = clazz.getFields();\n            //获取指定的成员变量\n            Field field = clazz.getField(\"name\");\n            System.out.println(field.getName()); //name 变量名\n            System.out.println(field.getType());  //class java.lang.String\n            HelloWorld obj = new HelloWorld(\"123\");\n            s.set(obj,\"222\");                 //设置 成员变量值\n            System.out.println(obj.getField(obj)); //得到成员变量值\n\n            Field s1 = clazz.getField(\"password\"); //password为静态变量   \n            System.out.println(s1.get(null));   //静态变量获取时 变量只需要传null\n            s1.set(null,\"rrr\");               \n            System.out.println(s1.get(null));   //静态变量设置后 其他的实例中静态变量也都相应改变\n            System.out.println(obj.s1);\n        } catch (NoSuchFieldException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n```\n## Method方法\n```java\n  Method[] methods = clazz.getMethods();\n  try {\n    Method method = clazz.getMethod(\"test\", String.class);//参数1为方法名 参数2为参数类型，没有参数传null\n    method.invoke(clazz.newInstance(), \"test\");           //执行方法 参数1传实例 2为参数\n    Method method2 = clazz.getMethod(\"testStatic\", null); //获取静态方法\n    method2.invoke(null, null);                           //执行静态方法 1可以传null 没有参数传null\n  } catch (Exception e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n```\n## 访问私有方法 变量\n### Field\n```java\n  try {\n    Field privateField = clazz.getDeclaredField(\"privateString\");\n    privateField.setAccessible(true);   //设置可以访问 可以读写 不开启会报错\n    A a = clazz.newInstance();\n    String privateString = (String) privateField.get(a);\n    privateField.set(a, \"changeField\");\n  } catch (Exception e) {\n    // TODO Auto-generated catch block\n    e.printStackTrace();\n  }\n```\n### Method\n```java\n  try {\n\t\t\tMethod privateMethod = clazz.getDeclaredMethod(\"privateMehtod\", String.class, int.class);\n\t\t\tprivateMethod.setAccessible(true);\n\t\t\tprivateMethod.invoke(clazz.newInstance(), \"private\", 12);\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n```\n","slug":"java反射笔记","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhhmm000062x2435itj1j","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">仓廪实而知礼节，衣食足而知荣辱 --管仲</div></pre></td></tr></table></figure>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><h3 id=\"获取Class-对象\"><a href=\"#获取Class-对象\" class=\"headerlink\" title=\"获取Class 对象\"></a>获取Class 对象</h3><ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class clazz = A.class;</div></pre></td></tr></table></figure>\n</li>\n<li><p>String 要放全路径包名 可能会报ClassNotFoundException</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    Class class1 = Class.forName(<span class=\"string\">\"refletc.A\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"Class-方法\"><a href=\"#Class-方法\" class=\"headerlink\" title=\"Class 方法\"></a>Class 方法</h3><h4 id=\"获取名称\"><a href=\"#获取名称\" class=\"headerlink\" title=\"获取名称\"></a>获取名称</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String className = aClass.getName();  <span class=\"comment\">//全限定类名</span></div><div class=\"line\">String simpleClassName = aClass.getSimpleName(); <span class=\"comment\">//类名（不包含包名）</span></div><div class=\"line\">String packageName = aClass.getPackage().getName();<span class=\"comment\">// 包名</span></div></pre></td></tr></table></figure>\n<h4 id=\"获得类的修饰符-判断类的修饰符\"><a href=\"#获得类的修饰符-判断类的修饰符\" class=\"headerlink\" title=\"获得类的修饰符 判断类的修饰符\"></a>获得类的修饰符 判断类的修饰符</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> modifiers = aClass.getModifiers();</div><div class=\"line\">Modifier.isAbstract(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isFinal(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isInterface(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isNative(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isPrivate(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isProtected(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isPublic(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isStatic(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isStrict(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isSynchronized(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isTransient(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isVolatile(<span class=\"keyword\">int</span> modifiers);</div></pre></td></tr></table></figure>\n<h4 id=\"更多方法\"><a href=\"#更多方法\" class=\"headerlink\" title=\"更多方法\"></a>更多方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class superclass = aClass.getSuperclass(); <span class=\"comment\">//获取父类</span></div><div class=\"line\">Class[] interfaces = aClass.getInterfaces(); <span class=\"comment\">//获取实现的接口</span></div><div class=\"line\"><span class=\"comment\">//下面的方法不能获取到私有的方法 变量 构造器</span></div><div class=\"line\">Constructor[] constructors = aClass.getConstructors(); <span class=\"comment\">//获取构造器</span></div><div class=\"line\">Method[] method = aClass.getMethods(); <span class=\"comment\">//获取方法</span></div><div class=\"line\">Field[] method = aClass.getFields(); <span class=\"comment\">//获取变量</span></div></pre></td></tr></table></figure>\n<h2 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h2><p>通过已知构造参数 获取构造方法 new新对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Constructor constructor = clazz.getConstructor(String.class);</div><div class=\"line\">      A r = (A) constructor.newInstance(<span class=\"string\">\"test\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Field变量-可以通过此方法动态改变成员变量中的静态变量\"><a href=\"#Field变量-可以通过此方法动态改变成员变量中的静态变量\" class=\"headerlink\" title=\"Field变量 可以通过此方法动态改变成员变量中的静态变量\"></a>Field变量 可以通过此方法动态改变成员变量中的静态变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//获取所有的变量 私有的不行</span></div><div class=\"line\">      Field[] fields = clazz.getFields();</div><div class=\"line\">      <span class=\"comment\">//获取指定的成员变量</span></div><div class=\"line\">      Field field = clazz.getField(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">      System.out.println(field.getName()); <span class=\"comment\">//name 变量名</span></div><div class=\"line\">      System.out.println(field.getType());  <span class=\"comment\">//class java.lang.String</span></div><div class=\"line\">      HelloWorld obj = <span class=\"keyword\">new</span> HelloWorld(<span class=\"string\">\"123\"</span>);</div><div class=\"line\">      s.set(obj,<span class=\"string\">\"222\"</span>);                 <span class=\"comment\">//设置 成员变量值</span></div><div class=\"line\">      System.out.println(obj.getField(obj)); <span class=\"comment\">//得到成员变量值</span></div><div class=\"line\"></div><div class=\"line\">      Field s1 = clazz.getField(<span class=\"string\">\"password\"</span>); <span class=\"comment\">//password为静态变量   </span></div><div class=\"line\">      System.out.println(s1.get(<span class=\"keyword\">null</span>));   <span class=\"comment\">//静态变量获取时 变量只需要传null</span></div><div class=\"line\">      s1.set(<span class=\"keyword\">null</span>,<span class=\"string\">\"rrr\"</span>);               </div><div class=\"line\">      System.out.println(s1.get(<span class=\"keyword\">null</span>));   <span class=\"comment\">//静态变量设置后 其他的实例中静态变量也都相应改变</span></div><div class=\"line\">      System.out.println(obj.s1);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Method方法\"><a href=\"#Method方法\" class=\"headerlink\" title=\"Method方法\"></a>Method方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method[] methods = clazz.getMethods();</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  Method method = clazz.getMethod(<span class=\"string\">\"test\"</span>, String.class);<span class=\"comment\">//参数1为方法名 参数2为参数类型，没有参数传null</span></div><div class=\"line\">  method.invoke(clazz.newInstance(), <span class=\"string\">\"test\"</span>);           <span class=\"comment\">//执行方法 参数1传实例 2为参数</span></div><div class=\"line\">  Method method2 = clazz.getMethod(<span class=\"string\">\"testStatic\"</span>, <span class=\"keyword\">null</span>); <span class=\"comment\">//获取静态方法</span></div><div class=\"line\">  method2.invoke(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);                           <span class=\"comment\">//执行静态方法 1可以传null 没有参数传null</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">  <span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"访问私有方法-变量\"><a href=\"#访问私有方法-变量\" class=\"headerlink\" title=\"访问私有方法 变量\"></a>访问私有方法 变量</h2><h3 id=\"Field\"><a href=\"#Field\" class=\"headerlink\" title=\"Field\"></a>Field</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  Field privateField = clazz.getDeclaredField(<span class=\"string\">\"privateString\"</span>);</div><div class=\"line\">  privateField.setAccessible(<span class=\"keyword\">true</span>);   <span class=\"comment\">//设置可以访问 可以读写 不开启会报错</span></div><div class=\"line\">  A a = clazz.newInstance();</div><div class=\"line\">  String privateString = (String) privateField.get(a);</div><div class=\"line\">  privateField.set(a, <span class=\"string\">\"changeField\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">  <span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tMethod privateMethod = clazz.getDeclaredMethod(<span class=\"string\">\"privateMehtod\"</span>, String.class, <span class=\"keyword\">int</span>.class);</div><div class=\"line\">\tprivateMethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">\tprivateMethod.invoke(clazz.newInstance(), <span class=\"string\">\"private\"</span>, <span class=\"number\">12</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">仓廪实而知礼节，衣食足而知荣辱 --管仲</div></pre></td></tr></table></figure>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><h3 id=\"获取Class-对象\"><a href=\"#获取Class-对象\" class=\"headerlink\" title=\"获取Class 对象\"></a>获取Class 对象</h3><ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class clazz = A.class;</div></pre></td></tr></table></figure>\n</li>\n<li><p>String 要放全路径包名 可能会报ClassNotFoundException</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    Class class1 = Class.forName(<span class=\"string\">\"refletc.A\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<h3 id=\"Class-方法\"><a href=\"#Class-方法\" class=\"headerlink\" title=\"Class 方法\"></a>Class 方法</h3><h4 id=\"获取名称\"><a href=\"#获取名称\" class=\"headerlink\" title=\"获取名称\"></a>获取名称</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String className = aClass.getName();  <span class=\"comment\">//全限定类名</span></div><div class=\"line\">String simpleClassName = aClass.getSimpleName(); <span class=\"comment\">//类名（不包含包名）</span></div><div class=\"line\">String packageName = aClass.getPackage().getName();<span class=\"comment\">// 包名</span></div></pre></td></tr></table></figure>\n<h4 id=\"获得类的修饰符-判断类的修饰符\"><a href=\"#获得类的修饰符-判断类的修饰符\" class=\"headerlink\" title=\"获得类的修饰符 判断类的修饰符\"></a>获得类的修饰符 判断类的修饰符</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> modifiers = aClass.getModifiers();</div><div class=\"line\">Modifier.isAbstract(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isFinal(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isInterface(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isNative(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isPrivate(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isProtected(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isPublic(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isStatic(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isStrict(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isSynchronized(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isTransient(<span class=\"keyword\">int</span> modifiers);</div><div class=\"line\">Modifier.isVolatile(<span class=\"keyword\">int</span> modifiers);</div></pre></td></tr></table></figure>\n<h4 id=\"更多方法\"><a href=\"#更多方法\" class=\"headerlink\" title=\"更多方法\"></a>更多方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class superclass = aClass.getSuperclass(); <span class=\"comment\">//获取父类</span></div><div class=\"line\">Class[] interfaces = aClass.getInterfaces(); <span class=\"comment\">//获取实现的接口</span></div><div class=\"line\"><span class=\"comment\">//下面的方法不能获取到私有的方法 变量 构造器</span></div><div class=\"line\">Constructor[] constructors = aClass.getConstructors(); <span class=\"comment\">//获取构造器</span></div><div class=\"line\">Method[] method = aClass.getMethods(); <span class=\"comment\">//获取方法</span></div><div class=\"line\">Field[] method = aClass.getFields(); <span class=\"comment\">//获取变量</span></div></pre></td></tr></table></figure>\n<h2 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h2><p>通过已知构造参数 获取构造方法 new新对象<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Constructor constructor = clazz.getConstructor(String.class);</div><div class=\"line\">      A r = (A) constructor.newInstance(<span class=\"string\">\"test\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Field变量-可以通过此方法动态改变成员变量中的静态变量\"><a href=\"#Field变量-可以通过此方法动态改变成员变量中的静态变量\" class=\"headerlink\" title=\"Field变量 可以通过此方法动态改变成员变量中的静态变量\"></a>Field变量 可以通过此方法动态改变成员变量中的静态变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//获取所有的变量 私有的不行</span></div><div class=\"line\">      Field[] fields = clazz.getFields();</div><div class=\"line\">      <span class=\"comment\">//获取指定的成员变量</span></div><div class=\"line\">      Field field = clazz.getField(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">      System.out.println(field.getName()); <span class=\"comment\">//name 变量名</span></div><div class=\"line\">      System.out.println(field.getType());  <span class=\"comment\">//class java.lang.String</span></div><div class=\"line\">      HelloWorld obj = <span class=\"keyword\">new</span> HelloWorld(<span class=\"string\">\"123\"</span>);</div><div class=\"line\">      s.set(obj,<span class=\"string\">\"222\"</span>);                 <span class=\"comment\">//设置 成员变量值</span></div><div class=\"line\">      System.out.println(obj.getField(obj)); <span class=\"comment\">//得到成员变量值</span></div><div class=\"line\"></div><div class=\"line\">      Field s1 = clazz.getField(<span class=\"string\">\"password\"</span>); <span class=\"comment\">//password为静态变量   </span></div><div class=\"line\">      System.out.println(s1.get(<span class=\"keyword\">null</span>));   <span class=\"comment\">//静态变量获取时 变量只需要传null</span></div><div class=\"line\">      s1.set(<span class=\"keyword\">null</span>,<span class=\"string\">\"rrr\"</span>);               </div><div class=\"line\">      System.out.println(s1.get(<span class=\"keyword\">null</span>));   <span class=\"comment\">//静态变量设置后 其他的实例中静态变量也都相应改变</span></div><div class=\"line\">      System.out.println(obj.s1);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">      e.printStackTrace();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Method方法\"><a href=\"#Method方法\" class=\"headerlink\" title=\"Method方法\"></a>Method方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method[] methods = clazz.getMethods();</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  Method method = clazz.getMethod(<span class=\"string\">\"test\"</span>, String.class);<span class=\"comment\">//参数1为方法名 参数2为参数类型，没有参数传null</span></div><div class=\"line\">  method.invoke(clazz.newInstance(), <span class=\"string\">\"test\"</span>);           <span class=\"comment\">//执行方法 参数1传实例 2为参数</span></div><div class=\"line\">  Method method2 = clazz.getMethod(<span class=\"string\">\"testStatic\"</span>, <span class=\"keyword\">null</span>); <span class=\"comment\">//获取静态方法</span></div><div class=\"line\">  method2.invoke(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);                           <span class=\"comment\">//执行静态方法 1可以传null 没有参数传null</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">  <span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"访问私有方法-变量\"><a href=\"#访问私有方法-变量\" class=\"headerlink\" title=\"访问私有方法 变量\"></a>访问私有方法 变量</h2><h3 id=\"Field\"><a href=\"#Field\" class=\"headerlink\" title=\"Field\"></a>Field</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  Field privateField = clazz.getDeclaredField(<span class=\"string\">\"privateString\"</span>);</div><div class=\"line\">  privateField.setAccessible(<span class=\"keyword\">true</span>);   <span class=\"comment\">//设置可以访问 可以读写 不开启会报错</span></div><div class=\"line\">  A a = clazz.newInstance();</div><div class=\"line\">  String privateString = (String) privateField.get(a);</div><div class=\"line\">  privateField.set(a, <span class=\"string\">\"changeField\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">  <span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tMethod privateMethod = clazz.getDeclaredMethod(<span class=\"string\">\"privateMehtod\"</span>, String.class, <span class=\"keyword\">int</span>.class);</div><div class=\"line\">\tprivateMethod.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">\tprivateMethod.invoke(clazz.newInstance(), <span class=\"string\">\"private\"</span>, <span class=\"number\">12</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"for与foreach在List中的使用","date":"2017-03-30T02:24:15.000Z","_content":"\n## 数组\n对于数组中两种循环都是相同的 foreach转换成不同for循环\n\n## List\n\n对于List中foreach相当于使用了Iterator遍历\n\n而List中有的实现了RandomAccess()的方法 而在RandomAccess()中明确说明\n```java\n\n*     for (int i=0, n=list.size(); i &lt; n; i++)\n*         list.get(i);\n\n* runs faster than this loop:\n\n*     for (Iterator i=list.iterator(); i.hasNext(); )\n*         i.next();\n\n```\nList中ArrayList和Vector中实现了RandomAccess接口 LinkedList并没有\n\n所里在ArrayList中使用普通For循环速度会比增强for快\n","source":"_posts/for与foreach在List中的使用.md","raw":"---\ntitle: for与foreach在List中的使用\ndate: 2017-03-30 10:24:15\ntags:\n- 笔记\n- java\ncategories:\n- 笔记\n- java\n---\n\n## 数组\n对于数组中两种循环都是相同的 foreach转换成不同for循环\n\n## List\n\n对于List中foreach相当于使用了Iterator遍历\n\n而List中有的实现了RandomAccess()的方法 而在RandomAccess()中明确说明\n```java\n\n*     for (int i=0, n=list.size(); i &lt; n; i++)\n*         list.get(i);\n\n* runs faster than this loop:\n\n*     for (Iterator i=list.iterator(); i.hasNext(); )\n*         i.next();\n\n```\nList中ArrayList和Vector中实现了RandomAccess接口 LinkedList并没有\n\n所里在ArrayList中使用普通For循环速度会比增强for快\n","slug":"for与foreach在List中的使用","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhhmr000162x20rdckoek","content":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>对于数组中两种循环都是相同的 foreach转换成不同for循环</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>对于List中foreach相当于使用了Iterator遍历</p>\n<p>而List中有的实现了RandomAccess()的方法 而在RandomAccess()中明确说明<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">*     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>, n=list.size(); i &amp;lt; n; i++)</div><div class=\"line\">*         list.get(i);</div><div class=\"line\"></div><div class=\"line\">* runs faster than <span class=\"keyword\">this</span> loop:</div><div class=\"line\"></div><div class=\"line\">*     <span class=\"keyword\">for</span> (Iterator i=list.iterator(); i.hasNext(); )</div><div class=\"line\">*         i.next();</div></pre></td></tr></table></figure></p>\n<p>List中ArrayList和Vector中实现了RandomAccess接口 LinkedList并没有</p>\n<p>所里在ArrayList中使用普通For循环速度会比增强for快</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>对于数组中两种循环都是相同的 foreach转换成不同for循环</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>对于List中foreach相当于使用了Iterator遍历</p>\n<p>而List中有的实现了RandomAccess()的方法 而在RandomAccess()中明确说明<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">*     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>, n=list.size(); i &amp;lt; n; i++)</div><div class=\"line\">*         list.get(i);</div><div class=\"line\"></div><div class=\"line\">* runs faster than <span class=\"keyword\">this</span> loop:</div><div class=\"line\"></div><div class=\"line\">*     <span class=\"keyword\">for</span> (Iterator i=list.iterator(); i.hasNext(); )</div><div class=\"line\">*         i.next();</div></pre></td></tr></table></figure></p>\n<p>List中ArrayList和Vector中实现了RandomAccess接口 LinkedList并没有</p>\n<p>所里在ArrayList中使用普通For循环速度会比增强for快</p>\n"},{"title":"struts2拦截器","date":"2017-05-11T11:33:14.000Z","_content":"## struts2的工作流程\n\n![struts2的工作方式](http://omy391n59.bkt.clouddn.com/image/struts2/Struts2-Architecture_%E6%96%B0%E7%89%88%E6%9C%AC.png)\n<!-- more -->\n### 在自定义拦截器流程\n如果配置了自定义拦截器会导致struts2本身的拦截器失效 需要加配置\n```xml\n<interceptor-ref name=\"defaultStack\"></interceptor-ref>\n```\n1-2-3-action-result-3-2-1\n#### 自定义拦截器使用方式\n* 新建一个类继承自AbstractInterceptor\n\n```java\n\npublic class MyFirstInterceptor extends AbstractInterceptor {\n\n\tprivate static final long serialVersionUID = 4027957068302300754L;\n\n\t@Override\n\tpublic String intercept(ActionInvocation invocation) throws Exception {\n\t\tSystem.out.println(\"拦截器1\");//进入action之前执行\n\t\tinvocation.invoke(); //代表进行下一步，这里不再拦截\n\t\tSystem.out.println(\"拦截器1返回\");//返回之后执行\n    //可以再此拦截\n    //return “inter”\n\t\treturn null;\n\t}\n\n}\n```\n\n* 配置struts.xml\n\n```xml\n<package name=\"default\" extends=\"json-default\">\n\t\t<interceptors>\n\t\t\t<interceptor name=\"first\" class=\"eason.test.maven.MyFirstInterceptor\"></interceptor>\n\t\t</interceptors>\n\t\t<action name=\"login\" class=\"eason.test.maven.Login\">\n\t\t\t<interceptor-ref name=\"first\"></interceptor-ref>\n\t\t\t<interceptor-ref name=\"second\"></interceptor-ref>\n\t\t\t<result type=\"json\">\n\t\t\t\t<param name=\"root\">data</param>\n\t\t\t</result>\n\t\t\t<result name=\"inter\">/index.jsp</result>\n\t\t</action>\n\t</package>\n```\n#### 为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法\n\nMethodFilterInterceptor中需要重写doIntercept（）\n\n其中两个属性配置\n* excludeMethods 不要被拦截的方法 注意方法名不是action的命名而是在类中实际的名称（execute..）\n* includeMethods 需要被拦截的方法\n\n#### example配置一个简单登录效果的demo\n* 编写登录的Action\t 给每个登录过的人分配session\n\n```java\npublic class LoginAction extends ActionSupport {\n\n\tprivate static final long serialVersionUID = 5890861426406772110L;\n\tprivate String username;\n\tprivate String password;\n\n\t//getter and setter\n\n\t@Override\n\tpublic String execute() throws Exception {\n\t\tHttpSession session = ServletActionContext.getRequest().getSession();\n\t\tsession.setAttribute(\"username\", username);\n\t\treturn SUCCESS;\n\t}\n}\n```\n* 编写进入登录页的Action 直接结果进入主页\n\n```java\npublic class IndexAction extends ActionSupport{\n\tprivate static final long serialVersionUID = -5982176418945798657L;\n\t@Override\n\tpublic String execute() throws Exception {\n\t\treturn SUCCESS;\n\t}\n}\n```\n* 编写Interceptor在没有登录之前访问其他页面返回登录页面 在没有session之前都返回login\n\n```java\npublic class LoginInterceptor extends MethodFilterInterceptor {\n\n\n\tprivate static final long serialVersionUID = -9195077688930132383L;\n\n\t@Override\n\tprotected String doIntercept(ActionInvocation invocation) throws Exception {\n\n\t\tHttpSession session = ServletActionContext.getRequest().getSession();\n\t\tObject username = session.getAttribute(\"username\");\n\t\tif (username==null) {\n\t\t\treturn \"login\";\n\t\t}\n\t\tString invoke = invocation.invoke();\n\t\treturn invoke;\n\t}\n\n}\n```\n* 编写login.jsp\n\n```html\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Login Page</title>\n</head>\n<body>\n\t<form action=\"${pageContext.request.contextPath}/login.action\">\n\t\t用户名<input type=\"text\" name=\"username\"/><br/>\n\t\t密码<input type=\"password\" name=\"password\"/><br/>\n\t\t<input type=\"submit\" value=\"登录\">\n\t</form>\n</body>\n</html>\n```\n* 配置struts.xml\n\n```xml\n<package name=\"s\" extends=\"struts-default\" namespace=\"/\">\n\t<interceptors>\n\t\t\t<interceptor name=\"check\" class=\"com.eason.interceptor.LoginInterceptor\" /> //注册自定义的interceptor\n\t\t\t<interceptor-stack name=\"myInter\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//将struts2默认的defaultStack填入\n\t\t\t\t<interceptor-ref name=\"defaultStack\"></interceptor-ref>\n\t\t\t\t<interceptor-ref name=\"check\"></interceptor-ref>\n\t\t\t</interceptor-stack>\n\t\t</interceptors>\n\t\t<default-interceptor-ref name=\"myInter\"></default-interceptor-ref>  //配置myInter为全局的拦截器\n\t\t<global-results>\n\t\t\t<result name=\"login\" type=\"redirect\">/login.jsp</result>     //统一处理结果 返回这个结果的都重定向为login.jsp\n\t\t</global-results>\n\t\t<action name=\"login\" class=\"com.eason.action.LoginAction\">\n\t\t\t<interceptor-ref name=\"myInter\">\n\t\t\t\t<param name=\"check.excludeMethods\">execute</param>     //排除不需要拦截的方法 注意此方法为类中的方法名\n\t\t\t</interceptor-ref>\n\t\t\t<result type=\"redirectAction\">index</result>\n\t\t</action>\n\t\t<action name=\"index\" class=\"com.eason.action.IndexAction\">\n\t\t\t<result type=\"redirect\">/index.jsp</result>\n\t\t</action>\n\t</package>\n```\n### demo\n[demo.zip](http://omy391n59.bkt.clouddn.com/zip/struts2/demologin.rar)\n","source":"_posts/struts2拦截器.md","raw":"---\ntitle: struts2拦截器\ndate: 2017-05-11 19:33:14\ncategories:\n- javaee\ntags:\n- struts2\n- javaee\n---\n## struts2的工作流程\n\n![struts2的工作方式](http://omy391n59.bkt.clouddn.com/image/struts2/Struts2-Architecture_%E6%96%B0%E7%89%88%E6%9C%AC.png)\n<!-- more -->\n### 在自定义拦截器流程\n如果配置了自定义拦截器会导致struts2本身的拦截器失效 需要加配置\n```xml\n<interceptor-ref name=\"defaultStack\"></interceptor-ref>\n```\n1-2-3-action-result-3-2-1\n#### 自定义拦截器使用方式\n* 新建一个类继承自AbstractInterceptor\n\n```java\n\npublic class MyFirstInterceptor extends AbstractInterceptor {\n\n\tprivate static final long serialVersionUID = 4027957068302300754L;\n\n\t@Override\n\tpublic String intercept(ActionInvocation invocation) throws Exception {\n\t\tSystem.out.println(\"拦截器1\");//进入action之前执行\n\t\tinvocation.invoke(); //代表进行下一步，这里不再拦截\n\t\tSystem.out.println(\"拦截器1返回\");//返回之后执行\n    //可以再此拦截\n    //return “inter”\n\t\treturn null;\n\t}\n\n}\n```\n\n* 配置struts.xml\n\n```xml\n<package name=\"default\" extends=\"json-default\">\n\t\t<interceptors>\n\t\t\t<interceptor name=\"first\" class=\"eason.test.maven.MyFirstInterceptor\"></interceptor>\n\t\t</interceptors>\n\t\t<action name=\"login\" class=\"eason.test.maven.Login\">\n\t\t\t<interceptor-ref name=\"first\"></interceptor-ref>\n\t\t\t<interceptor-ref name=\"second\"></interceptor-ref>\n\t\t\t<result type=\"json\">\n\t\t\t\t<param name=\"root\">data</param>\n\t\t\t</result>\n\t\t\t<result name=\"inter\">/index.jsp</result>\n\t\t</action>\n\t</package>\n```\n#### 为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法\n\nMethodFilterInterceptor中需要重写doIntercept（）\n\n其中两个属性配置\n* excludeMethods 不要被拦截的方法 注意方法名不是action的命名而是在类中实际的名称（execute..）\n* includeMethods 需要被拦截的方法\n\n#### example配置一个简单登录效果的demo\n* 编写登录的Action\t 给每个登录过的人分配session\n\n```java\npublic class LoginAction extends ActionSupport {\n\n\tprivate static final long serialVersionUID = 5890861426406772110L;\n\tprivate String username;\n\tprivate String password;\n\n\t//getter and setter\n\n\t@Override\n\tpublic String execute() throws Exception {\n\t\tHttpSession session = ServletActionContext.getRequest().getSession();\n\t\tsession.setAttribute(\"username\", username);\n\t\treturn SUCCESS;\n\t}\n}\n```\n* 编写进入登录页的Action 直接结果进入主页\n\n```java\npublic class IndexAction extends ActionSupport{\n\tprivate static final long serialVersionUID = -5982176418945798657L;\n\t@Override\n\tpublic String execute() throws Exception {\n\t\treturn SUCCESS;\n\t}\n}\n```\n* 编写Interceptor在没有登录之前访问其他页面返回登录页面 在没有session之前都返回login\n\n```java\npublic class LoginInterceptor extends MethodFilterInterceptor {\n\n\n\tprivate static final long serialVersionUID = -9195077688930132383L;\n\n\t@Override\n\tprotected String doIntercept(ActionInvocation invocation) throws Exception {\n\n\t\tHttpSession session = ServletActionContext.getRequest().getSession();\n\t\tObject username = session.getAttribute(\"username\");\n\t\tif (username==null) {\n\t\t\treturn \"login\";\n\t\t}\n\t\tString invoke = invocation.invoke();\n\t\treturn invoke;\n\t}\n\n}\n```\n* 编写login.jsp\n\n```html\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Login Page</title>\n</head>\n<body>\n\t<form action=\"${pageContext.request.contextPath}/login.action\">\n\t\t用户名<input type=\"text\" name=\"username\"/><br/>\n\t\t密码<input type=\"password\" name=\"password\"/><br/>\n\t\t<input type=\"submit\" value=\"登录\">\n\t</form>\n</body>\n</html>\n```\n* 配置struts.xml\n\n```xml\n<package name=\"s\" extends=\"struts-default\" namespace=\"/\">\n\t<interceptors>\n\t\t\t<interceptor name=\"check\" class=\"com.eason.interceptor.LoginInterceptor\" /> //注册自定义的interceptor\n\t\t\t<interceptor-stack name=\"myInter\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//将struts2默认的defaultStack填入\n\t\t\t\t<interceptor-ref name=\"defaultStack\"></interceptor-ref>\n\t\t\t\t<interceptor-ref name=\"check\"></interceptor-ref>\n\t\t\t</interceptor-stack>\n\t\t</interceptors>\n\t\t<default-interceptor-ref name=\"myInter\"></default-interceptor-ref>  //配置myInter为全局的拦截器\n\t\t<global-results>\n\t\t\t<result name=\"login\" type=\"redirect\">/login.jsp</result>     //统一处理结果 返回这个结果的都重定向为login.jsp\n\t\t</global-results>\n\t\t<action name=\"login\" class=\"com.eason.action.LoginAction\">\n\t\t\t<interceptor-ref name=\"myInter\">\n\t\t\t\t<param name=\"check.excludeMethods\">execute</param>     //排除不需要拦截的方法 注意此方法为类中的方法名\n\t\t\t</interceptor-ref>\n\t\t\t<result type=\"redirectAction\">index</result>\n\t\t</action>\n\t\t<action name=\"index\" class=\"com.eason.action.IndexAction\">\n\t\t\t<result type=\"redirect\">/index.jsp</result>\n\t\t</action>\n\t</package>\n```\n### demo\n[demo.zip](http://omy391n59.bkt.clouddn.com/zip/struts2/demologin.rar)\n","slug":"struts2拦截器","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhhse000i62x204a2wvij","content":"<h2 id=\"struts2的工作流程\"><a href=\"#struts2的工作流程\" class=\"headerlink\" title=\"struts2的工作流程\"></a>struts2的工作流程</h2><p><img src=\"http://omy391n59.bkt.clouddn.com/image/struts2/Struts2-Architecture_%E6%96%B0%E7%89%88%E6%9C%AC.png\" alt=\"struts2的工作方式\"><br><a id=\"more\"></a></p>\n<h3 id=\"在自定义拦截器流程\"><a href=\"#在自定义拦截器流程\" class=\"headerlink\" title=\"在自定义拦截器流程\"></a>在自定义拦截器流程</h3><p>如果配置了自定义拦截器会导致struts2本身的拦截器失效 需要加配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>1-2-3-action-result-3-2-1</p>\n<h4 id=\"自定义拦截器使用方式\"><a href=\"#自定义拦截器使用方式\" class=\"headerlink\" title=\"自定义拦截器使用方式\"></a>自定义拦截器使用方式</h4><ul>\n<li>新建一个类继承自AbstractInterceptor</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFirstInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractInterceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">4027957068302300754L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">intercept</span><span class=\"params\">(ActionInvocation invocation)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"拦截器1\"</span>);<span class=\"comment\">//进入action之前执行</span></div><div class=\"line\">\t\tinvocation.invoke(); <span class=\"comment\">//代表进行下一步，这里不再拦截</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"拦截器1返回\"</span>);<span class=\"comment\">//返回之后执行</span></div><div class=\"line\">    <span class=\"comment\">//可以再此拦截</span></div><div class=\"line\">    <span class=\"comment\">//return “inter”</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>配置struts.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"json-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.MyFirstInterceptor\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.Login\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"second\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>data<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"inter\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"为了对拦截进行统一处理-使用MethodFilterInterceptor排除不需要的方法\"><a href=\"#为了对拦截进行统一处理-使用MethodFilterInterceptor排除不需要的方法\" class=\"headerlink\" title=\"为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法\"></a>为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法</h4><p>MethodFilterInterceptor中需要重写doIntercept（）</p>\n<p>其中两个属性配置</p>\n<ul>\n<li>excludeMethods 不要被拦截的方法 注意方法名不是action的命名而是在类中实际的名称（execute..）</li>\n<li>includeMethods 需要被拦截的方法</li>\n</ul>\n<h4 id=\"example配置一个简单登录效果的demo\"><a href=\"#example配置一个简单登录效果的demo\" class=\"headerlink\" title=\"example配置一个简单登录效果的demo\"></a>example配置一个简单登录效果的demo</h4><ul>\n<li>编写登录的Action     给每个登录过的人分配session</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5890861426406772110L</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String username;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String password;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//getter and setter</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tHttpSession session = ServletActionContext.getRequest().getSession();</div><div class=\"line\">\t\tsession.setAttribute(<span class=\"string\">\"username\"</span>, username);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写进入登录页的Action 直接结果进入主页</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">5982176418945798657L</span>;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写Interceptor在没有登录之前访问其他页面返回登录页面 在没有session之前都返回login</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">MethodFilterInterceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">9195077688930132383L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">doIntercept</span><span class=\"params\">(ActionInvocation invocation)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tHttpSession session = ServletActionContext.getRequest().getSession();</div><div class=\"line\">\t\tObject username = session.getAttribute(<span class=\"string\">\"username\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (username==<span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"login\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tString invoke = invocation.invoke();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> invoke;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写login.jsp</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span></div><div class=\"line\">    <span class=\"attr\">pageEncoding</span>=<span class=\"string\">\"UTF-8\"</span>%&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Login Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/login.action\"</span>&gt;</span></div><div class=\"line\">\t\t用户名<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">\t\t密码<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"登录\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>配置struts.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.interceptor.LoginInterceptor\"</span> /&gt;</span> //注册自定义的interceptor</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-stack</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//将struts2默认的defaultStack填入</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptor-stack</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">default-interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">default-interceptor-ref</span>&gt;</span>  //配置myInter为全局的拦截器</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">global-results</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/login.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>     //统一处理结果 返回这个结果的都重定向为login.jsp</div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">global-results</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.action.LoginAction\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check.excludeMethods\"</span>&gt;</span>execute<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>     //排除不需要拦截的方法 注意此方法为类中的方法名</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.action.IndexAction\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p><a href=\"http://omy391n59.bkt.clouddn.com/zip/struts2/demologin.rar\" target=\"_blank\" rel=\"external\">demo.zip</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"struts2的工作流程\"><a href=\"#struts2的工作流程\" class=\"headerlink\" title=\"struts2的工作流程\"></a>struts2的工作流程</h2><p><img src=\"http://omy391n59.bkt.clouddn.com/image/struts2/Struts2-Architecture_%E6%96%B0%E7%89%88%E6%9C%AC.png\" alt=\"struts2的工作方式\"><br>","more":"</p>\n<h3 id=\"在自定义拦截器流程\"><a href=\"#在自定义拦截器流程\" class=\"headerlink\" title=\"在自定义拦截器流程\"></a>在自定义拦截器流程</h3><p>如果配置了自定义拦截器会导致struts2本身的拦截器失效 需要加配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>1-2-3-action-result-3-2-1</p>\n<h4 id=\"自定义拦截器使用方式\"><a href=\"#自定义拦截器使用方式\" class=\"headerlink\" title=\"自定义拦截器使用方式\"></a>自定义拦截器使用方式</h4><ul>\n<li>新建一个类继承自AbstractInterceptor</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFirstInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractInterceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">4027957068302300754L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">intercept</span><span class=\"params\">(ActionInvocation invocation)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"拦截器1\"</span>);<span class=\"comment\">//进入action之前执行</span></div><div class=\"line\">\t\tinvocation.invoke(); <span class=\"comment\">//代表进行下一步，这里不再拦截</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"拦截器1返回\"</span>);<span class=\"comment\">//返回之后执行</span></div><div class=\"line\">    <span class=\"comment\">//可以再此拦截</span></div><div class=\"line\">    <span class=\"comment\">//return “inter”</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>配置struts.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"json-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.MyFirstInterceptor\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.Login\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"first\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"second\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>data<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"inter\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"为了对拦截进行统一处理-使用MethodFilterInterceptor排除不需要的方法\"><a href=\"#为了对拦截进行统一处理-使用MethodFilterInterceptor排除不需要的方法\" class=\"headerlink\" title=\"为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法\"></a>为了对拦截进行统一处理 使用MethodFilterInterceptor排除不需要的方法</h4><p>MethodFilterInterceptor中需要重写doIntercept（）</p>\n<p>其中两个属性配置</p>\n<ul>\n<li>excludeMethods 不要被拦截的方法 注意方法名不是action的命名而是在类中实际的名称（execute..）</li>\n<li>includeMethods 需要被拦截的方法</li>\n</ul>\n<h4 id=\"example配置一个简单登录效果的demo\"><a href=\"#example配置一个简单登录效果的demo\" class=\"headerlink\" title=\"example配置一个简单登录效果的demo\"></a>example配置一个简单登录效果的demo</h4><ul>\n<li>编写登录的Action     给每个登录过的人分配session</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5890861426406772110L</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String username;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String password;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//getter and setter</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tHttpSession session = ServletActionContext.getRequest().getSession();</div><div class=\"line\">\t\tsession.setAttribute(<span class=\"string\">\"username\"</span>, username);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写进入登录页的Action 直接结果进入主页</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">5982176418945798657L</span>;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写Interceptor在没有登录之前访问其他页面返回登录页面 在没有session之前都返回login</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">MethodFilterInterceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">9195077688930132383L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">doIntercept</span><span class=\"params\">(ActionInvocation invocation)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tHttpSession session = ServletActionContext.getRequest().getSession();</div><div class=\"line\">\t\tObject username = session.getAttribute(<span class=\"string\">\"username\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (username==<span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"login\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tString invoke = invocation.invoke();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> invoke;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>编写login.jsp</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span></div><div class=\"line\">    <span class=\"attr\">pageEncoding</span>=<span class=\"string\">\"UTF-8\"</span>%&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Login Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/login.action\"</span>&gt;</span></div><div class=\"line\">\t\t用户名<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">\t\t密码<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"登录\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>配置struts.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.interceptor.LoginInterceptor\"</span> /&gt;</span> //注册自定义的interceptor</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-stack</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//将struts2默认的defaultStack填入</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptor-stack</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">default-interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">default-interceptor-ref</span>&gt;</span>  //配置myInter为全局的拦截器</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">global-results</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/login.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>     //统一处理结果 返回这个结果的都重定向为login.jsp</div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">global-results</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.action.LoginAction\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">interceptor-ref</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myInter\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"check.excludeMethods\"</span>&gt;</span>execute<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>     //排除不需要拦截的方法 注意此方法为类中的方法名</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">interceptor-ref</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.action.IndexAction\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><p><a href=\"http://omy391n59.bkt.clouddn.com/zip/struts2/demologin.rar\">demo.zip</a></p>"},{"title":"OkHttp3-从零开始的详细使用到简单封装","date":"2017-03-21T02:24:15.000Z","_content":"# [Github地址---MyOkhttpUtils](https://github.com/jlcclidong/MyOkhttpUtils)\n## 初衷\n对于okhttp3出来以后，使用的都是网上封装好的库，为了更好地理解封装的内容，对okhttp本身的熟悉，肯定学一下子了，网上okhttp的方法很多，但是网上okhttp3方面的东西并不多，很多都过时的方法，总结了一下，讲了一下okhttp3的基本使用方法，在下边要耐心才会 。\n封装了一下基本大家使用得到的功能，想用的话可以直接拿去用，想扩展的话也可以直接下载扩展，代码比较少，不了解okhttp的可以下载学习一下，大神门口右走吧。\n封装逻辑和使用的好多方法找不到，借鉴了两位大神的逻辑，相当于简化版本吧，封装的比较全面的可以参照\n[hongyangAndroid / okhttputils](https://github.com/hongyangAndroid/okhttputils)\n[jeasonlzy/okhttp-OkGo](https://github.com/jeasonlzy/okhttp-OkGo)\n## 本文中库的简单使用介绍\n* 在project中添加依赖\n````java\n  allprojects {\n\t\trepositories {\n\t\t\t...\n\t\t\tmaven { url 'https://jitpack.io' }\n\t\t}\n\t}\n     ````\n* 在app中添加依赖\n````java\n        dependencies {\n  \t        compile 'com.github.jlcclidong:MyOkhttpUtils:0.10'\n\t    }\n      ````\n<!-- more -->\n* 在本项目中使用okhttp的方法步骤\n在application中初始化，此步骤必须，别忘记在清单文件中注册application否则不能使用\n````java\n       Ok.init(this)\n                .connectTimeout(3000l, TimeUnit.MILLISECONDS)\n                .readTimeout(3000l, TimeUnit.MILLISECONDS)\n                .commonParams(\"haha\",\"1\") //添加公共参数\n                .commonHeader(\"nihao\",\"1\")  //添加公共头\n                //這兩個攔截器衹能選用一個\n                //.AppInterceptor(\"eason\", new LogInterceptor())   //应用拦截器\n                .NetWorkInterceptor(\"eason\",new LogInterceptor()) //网络拦截器 将重定向等的request response页拦截打印  \n                .CookieJar(new PersistentCookieJar(new SetCookieCache(), new SharedPrefsCookiePersistor(App.this)))\n                .build();\n````\n* 请求  其中callback有三种类型 fail都会返回Exception，不管是本身网络问题还是404等问题都会返回此回调，可以通过Exception类型进行自行处理\n  * callback有三种类型\n    * JsonCallback<T> 传入类自动转换成bean，但是并未处理超大Json文件OOM 可自行通过流的方式来处理解析\n    * CallBack 返回String\n    * FileCallBack(String dir, String filename) 其中传入文件夹和文件名来保存 返回进度(0-100)\n * get\n ````java\n        Ok.get().url(\"http://lab.zuimeia.com/wallpaper/category/1/\")\n                .param(\"page_size\", 1)\n                .build()\n                .call(new JsonCallBack<Bean>() {  //傳入實體類\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n\n                    @Override\n                    public void success(Bean bean) {\n                        mTv.setText(bean.getData().getBase_url());\n                    }\n                });\n                ````\n * post  支持键值对和文件表单上传\n ````java\n        Ok.post().url(\"https://www.baidu.com\")\n                .param(\"test\", 1)\n                .file(\"test\", new File(\"\"))\n                .build()\n                .call(new CallBack() {\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n\n                    @Override\n                    public void success(String response) {\n                        mTv.setText(response);\n                    }\n                });\n                ````\n  * postjson  支持postJSON\n```java\n      Ok.postJson().url(\"\")\n          .json(\"\")\n          .build()\n          .call(new CallBack() {\n                @Override\n                  public void fail(Exception e) {\n\n                }\n\n                @Override\n                public void success(String response) {\n\n                }\n            });\n   ```\n  * download 文件下载只做到最基本的下载,断点续传和暂停下载暂未做，后续会追加\n  ```java\n         Ok.download().url(\"http://static.oschina.net/uploads/space/2015/0629/170157_rxDh_1767531.png\")\n                .build()\n                .tag(MainActivity.this)\n                .call(new FileCallBack(getCacheDir().getAbsolutePath(), \"github.png\") {\n                    @Override\n                    public void progress(int progress) {\n                        mTv.setText(progress + \"\");\n                    }\n\n                    @Override\n                    public void success(File file) {\n                        mIV.setImageBitmap(BitmapFactory.decodeFile(file.getAbsolutePath()));\n                    }\n\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n                });\n  ```\n  * 取消\n````java\n         Ok.cancle(MainActivity.this);\n         ````\n * 同时支持PostJson() 和 PostFile()两种方法\n* 其中日志打印时使用了格式化JsonFormat工具类\n* 请求时自动添加了 Accept-Language 和 User-Agent\n* 简单封装没有太多的代码，可以自行下载扩展\n## okhttp本身的基本使用\n* 初始化一个全局的okhttpclient\n````java\n         OkHttpClient okHttpClient = new OkHttpClient.Builder()\n                .connectTimeout(3000l, TimeUnit.MILLISECONDS)\n                .readTimeout(3000l, TimeUnit.MILLISECONDS)\n                .addInterceptor( new LogInterceptor())\n                .cookieJar(...)\n                .build();\n                ````\n当然初始化的方法有很多这里只是列出常用的方法，okhttp建议全局使用同一个\n* 为了更好的理解get，post方法，我们可以写一个interceptor来监听request和response，实现这个类不可以出现问题否则是无法进行正常请求的\n可以在此处修改request和response的参数添加缓存设置等，可自行添加\n主要方法有这样几个，必须重写的方法\n````java\n       @Override\n        public Response intercept(Chain chain) throws IOException {\n          Request request = chain.request();\n          logForRequest(request);\n          return logForResponse(response, time);\n        }\n        ````\n打印request没有什么特别注意的地方\n````java\n      private void logForRequest(Request request) {\n        try {\n            Log.e(\"============request start===============\");\n            Log.e(\"url:\" + request.url());\n            Log.e(\"method:\" + request.method());\n            if (request.headers() != null && request.headers().size() > 0){\n                Headers headers = request.headers();\n                for (int i = 0; i < headers.size(); i++) {\n                    Log.e(\"headers\"+headers.name(i)+\"---\"+headers.value(i));\n                }\n            }\n            Log.e(\"============request end=================\");\n        } catch (Exception e) {\n            Log.e(\"log request has something worng!!\");\n        }\n        }\n        ````\n打印response时注意，如果添加了interceptor则不能直接调用response.body().string()方法，调用此方法会直接close掉这个response，在callback中得不到正确的结果会报异常，只能使用response.newbuilder() 方法来使用新创建的response调用，eg\n````java\n        private Response logForResponse(Response response, long time) {\n        try {\n            Log.e(\"============response start==============\");\n            //response.body().string()只能调用一次 body()就会关掉\n            //每次使用前都clone一份使用保证原来的body没有被关掉\n            Response copy = response.newBuilder().build();\n            Log.e(\"responseurl:\" + copy.request().url());\n            Log.e(\"response code:\" + copy.code());\n            Log.e(\"total time:\" + time);\n            if (!TextUtils.isEmpty(copy.message()))\n                Log.e(\"message:\" + copy.message());\n                if (copy.headers() != null && copy.headers().size() > 0) {\n                    Headers headers = copy.headers();\n                    for (int i = 0; i < headers.size(); i++) {\n                        Log.e(\"\\t\" + headers.name(i) + \": \" + headers.value(i));\n                    }\n                }\n            Log.e(\"============response end================\");\n            ResponseBody body = copy.body();\n            if (body != null) {\n                MediaType mediaType = body.contentType();\n                if (mediaType != null) {\n                    Log.e(\"============response body===============\");\n                    Log.e(\"Content-type:\" + mediaType.toString());\n                    if (isText(mediaType)) {\n                        String content = body.string();\n                        Log.e(JsonFormat.formatJson(content));\n                        Log.e(\"============response body===============\");\n                        return response.newBuilder().body(ResponseBody.create(mediaType, content)).build();\n                    } else {\n                        Log.e(\" maybe response content too large too print , ignored!\");\n                    }\n                }\n            } else {\n                Log.e(\" body is null , ignored!\");\n            }\n        } catch (Exception e) {\n            Log.e(\"log response has something worng!!\");\n        }\n        return response;\n      }\n      ````\n这样每次调用http请求是就可以详细监听其中的内容了\n全部具体内容详见github代码\n* okhttp请求就是构建一个request加入到okhttpclicent中就可以了\n  这里实例只讲okhttp的异步请求，当然同步只是将enqueue()方法替换成execute()\n注意这个回调的onFailure只是回调了本身请求的一些失败回调，例如超时IOException....当成功返回之后需要在onResponse中判断response.code()来判断是否是200，404，500之类的统一处理\n  * get\n  ```java\n        Request request = new Request.Builder().get()\n                .url(\"https://www.baidu.com\")\n                .header(\"test\",\"fds\")\n                .build();\n        okHttpClient.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n\n            }\n        });\n        ```\n * post\n只需要替换request post中需要传一个requestBody，不同的post请求，需要不同的请求体，当然只是方便我们不同的需求。\n基本的键值对上传在下面贴出，使用FormBody即可创建\n键值对加上文件上传则需要MultipartBody来创建\n而普通的上传json，上传文件可以直接调用RequestBody的静态方法来创建\n````java\n        Request request = new Request.Builder().post(new FormBody.Builder().add(\"sdf\",\"Sdfa\").build())\n                .url(\"https://www.baidu.com\")\n                .header(\"test\",\"fds\")\n                .build();\n                ````\n其他方法详见本库中request中做的封装，都包含入内了\n* https的影响，okhttps本身不添加任何代码就可以支持okhttps中公认的证书，类似于百度之类的，当时像12306这种只能手动添加了，当然也可以默认信任所有证书，具体由于本人公司并不需要就没写,推荐[ [Android Https相关完全解析 当OkHttp遇到Https](http://blog.csdn.net/lmj623565791/article/details/48129405)]\n* cookie持久化网上有很多方法，本库采用的是[franmontiel / PersistentCookieJar](https://github.com/franmontiel/PersistentCookieJar)\n* okhttp3取消请求\n这个是比较坑的网上传统的okhttpclicent.cancle(tag)方法发现没有了，只可以通过call.cancle来取消请求，后来发现是这样子根据tag来取消请求的，当然如果请求已经开始回调无法结束，正在上传或者下载时会产生IOException\n````java\n        //隊列中的call\n        for (Call call : getInstance().dispatcher().queuedCalls()) {\n            if (object.equals(call.request().tag())) {\n                call.cancel();\n            }\n        }\n        //運行中的call\n        for (Call call : getInstance().dispatcher().runningCalls()) {\n            if (object.equals(call.request().tag())) {\n                call.cancel();\n            }\n        }\n````\n最后\n好像没什么了 ，感觉有帮助的帮忙点个star，辣眼睛了的我也没办法\n\n![啦啦啦啦.gif](http://upload-images.jianshu.io/upload_images/1905930-18b22cdf6f936fe5.gif?imageMogr2/auto-orient/strip)\n","source":"_posts/okhttp.md","raw":"---\ntitle: OkHttp3-从零开始的详细使用到简单封装\ndate: 2017-03-21 10:24:15\ncategories:\n- library\ntags:\n- okhttp\n- library\n---\n# [Github地址---MyOkhttpUtils](https://github.com/jlcclidong/MyOkhttpUtils)\n## 初衷\n对于okhttp3出来以后，使用的都是网上封装好的库，为了更好地理解封装的内容，对okhttp本身的熟悉，肯定学一下子了，网上okhttp的方法很多，但是网上okhttp3方面的东西并不多，很多都过时的方法，总结了一下，讲了一下okhttp3的基本使用方法，在下边要耐心才会 。\n封装了一下基本大家使用得到的功能，想用的话可以直接拿去用，想扩展的话也可以直接下载扩展，代码比较少，不了解okhttp的可以下载学习一下，大神门口右走吧。\n封装逻辑和使用的好多方法找不到，借鉴了两位大神的逻辑，相当于简化版本吧，封装的比较全面的可以参照\n[hongyangAndroid / okhttputils](https://github.com/hongyangAndroid/okhttputils)\n[jeasonlzy/okhttp-OkGo](https://github.com/jeasonlzy/okhttp-OkGo)\n## 本文中库的简单使用介绍\n* 在project中添加依赖\n````java\n  allprojects {\n\t\trepositories {\n\t\t\t...\n\t\t\tmaven { url 'https://jitpack.io' }\n\t\t}\n\t}\n     ````\n* 在app中添加依赖\n````java\n        dependencies {\n  \t        compile 'com.github.jlcclidong:MyOkhttpUtils:0.10'\n\t    }\n      ````\n<!-- more -->\n* 在本项目中使用okhttp的方法步骤\n在application中初始化，此步骤必须，别忘记在清单文件中注册application否则不能使用\n````java\n       Ok.init(this)\n                .connectTimeout(3000l, TimeUnit.MILLISECONDS)\n                .readTimeout(3000l, TimeUnit.MILLISECONDS)\n                .commonParams(\"haha\",\"1\") //添加公共参数\n                .commonHeader(\"nihao\",\"1\")  //添加公共头\n                //這兩個攔截器衹能選用一個\n                //.AppInterceptor(\"eason\", new LogInterceptor())   //应用拦截器\n                .NetWorkInterceptor(\"eason\",new LogInterceptor()) //网络拦截器 将重定向等的request response页拦截打印  \n                .CookieJar(new PersistentCookieJar(new SetCookieCache(), new SharedPrefsCookiePersistor(App.this)))\n                .build();\n````\n* 请求  其中callback有三种类型 fail都会返回Exception，不管是本身网络问题还是404等问题都会返回此回调，可以通过Exception类型进行自行处理\n  * callback有三种类型\n    * JsonCallback<T> 传入类自动转换成bean，但是并未处理超大Json文件OOM 可自行通过流的方式来处理解析\n    * CallBack 返回String\n    * FileCallBack(String dir, String filename) 其中传入文件夹和文件名来保存 返回进度(0-100)\n * get\n ````java\n        Ok.get().url(\"http://lab.zuimeia.com/wallpaper/category/1/\")\n                .param(\"page_size\", 1)\n                .build()\n                .call(new JsonCallBack<Bean>() {  //傳入實體類\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n\n                    @Override\n                    public void success(Bean bean) {\n                        mTv.setText(bean.getData().getBase_url());\n                    }\n                });\n                ````\n * post  支持键值对和文件表单上传\n ````java\n        Ok.post().url(\"https://www.baidu.com\")\n                .param(\"test\", 1)\n                .file(\"test\", new File(\"\"))\n                .build()\n                .call(new CallBack() {\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n\n                    @Override\n                    public void success(String response) {\n                        mTv.setText(response);\n                    }\n                });\n                ````\n  * postjson  支持postJSON\n```java\n      Ok.postJson().url(\"\")\n          .json(\"\")\n          .build()\n          .call(new CallBack() {\n                @Override\n                  public void fail(Exception e) {\n\n                }\n\n                @Override\n                public void success(String response) {\n\n                }\n            });\n   ```\n  * download 文件下载只做到最基本的下载,断点续传和暂停下载暂未做，后续会追加\n  ```java\n         Ok.download().url(\"http://static.oschina.net/uploads/space/2015/0629/170157_rxDh_1767531.png\")\n                .build()\n                .tag(MainActivity.this)\n                .call(new FileCallBack(getCacheDir().getAbsolutePath(), \"github.png\") {\n                    @Override\n                    public void progress(int progress) {\n                        mTv.setText(progress + \"\");\n                    }\n\n                    @Override\n                    public void success(File file) {\n                        mIV.setImageBitmap(BitmapFactory.decodeFile(file.getAbsolutePath()));\n                    }\n\n                    @Override\n                    public void fail(Exception e) {\n\n                    }\n                });\n  ```\n  * 取消\n````java\n         Ok.cancle(MainActivity.this);\n         ````\n * 同时支持PostJson() 和 PostFile()两种方法\n* 其中日志打印时使用了格式化JsonFormat工具类\n* 请求时自动添加了 Accept-Language 和 User-Agent\n* 简单封装没有太多的代码，可以自行下载扩展\n## okhttp本身的基本使用\n* 初始化一个全局的okhttpclient\n````java\n         OkHttpClient okHttpClient = new OkHttpClient.Builder()\n                .connectTimeout(3000l, TimeUnit.MILLISECONDS)\n                .readTimeout(3000l, TimeUnit.MILLISECONDS)\n                .addInterceptor( new LogInterceptor())\n                .cookieJar(...)\n                .build();\n                ````\n当然初始化的方法有很多这里只是列出常用的方法，okhttp建议全局使用同一个\n* 为了更好的理解get，post方法，我们可以写一个interceptor来监听request和response，实现这个类不可以出现问题否则是无法进行正常请求的\n可以在此处修改request和response的参数添加缓存设置等，可自行添加\n主要方法有这样几个，必须重写的方法\n````java\n       @Override\n        public Response intercept(Chain chain) throws IOException {\n          Request request = chain.request();\n          logForRequest(request);\n          return logForResponse(response, time);\n        }\n        ````\n打印request没有什么特别注意的地方\n````java\n      private void logForRequest(Request request) {\n        try {\n            Log.e(\"============request start===============\");\n            Log.e(\"url:\" + request.url());\n            Log.e(\"method:\" + request.method());\n            if (request.headers() != null && request.headers().size() > 0){\n                Headers headers = request.headers();\n                for (int i = 0; i < headers.size(); i++) {\n                    Log.e(\"headers\"+headers.name(i)+\"---\"+headers.value(i));\n                }\n            }\n            Log.e(\"============request end=================\");\n        } catch (Exception e) {\n            Log.e(\"log request has something worng!!\");\n        }\n        }\n        ````\n打印response时注意，如果添加了interceptor则不能直接调用response.body().string()方法，调用此方法会直接close掉这个response，在callback中得不到正确的结果会报异常，只能使用response.newbuilder() 方法来使用新创建的response调用，eg\n````java\n        private Response logForResponse(Response response, long time) {\n        try {\n            Log.e(\"============response start==============\");\n            //response.body().string()只能调用一次 body()就会关掉\n            //每次使用前都clone一份使用保证原来的body没有被关掉\n            Response copy = response.newBuilder().build();\n            Log.e(\"responseurl:\" + copy.request().url());\n            Log.e(\"response code:\" + copy.code());\n            Log.e(\"total time:\" + time);\n            if (!TextUtils.isEmpty(copy.message()))\n                Log.e(\"message:\" + copy.message());\n                if (copy.headers() != null && copy.headers().size() > 0) {\n                    Headers headers = copy.headers();\n                    for (int i = 0; i < headers.size(); i++) {\n                        Log.e(\"\\t\" + headers.name(i) + \": \" + headers.value(i));\n                    }\n                }\n            Log.e(\"============response end================\");\n            ResponseBody body = copy.body();\n            if (body != null) {\n                MediaType mediaType = body.contentType();\n                if (mediaType != null) {\n                    Log.e(\"============response body===============\");\n                    Log.e(\"Content-type:\" + mediaType.toString());\n                    if (isText(mediaType)) {\n                        String content = body.string();\n                        Log.e(JsonFormat.formatJson(content));\n                        Log.e(\"============response body===============\");\n                        return response.newBuilder().body(ResponseBody.create(mediaType, content)).build();\n                    } else {\n                        Log.e(\" maybe response content too large too print , ignored!\");\n                    }\n                }\n            } else {\n                Log.e(\" body is null , ignored!\");\n            }\n        } catch (Exception e) {\n            Log.e(\"log response has something worng!!\");\n        }\n        return response;\n      }\n      ````\n这样每次调用http请求是就可以详细监听其中的内容了\n全部具体内容详见github代码\n* okhttp请求就是构建一个request加入到okhttpclicent中就可以了\n  这里实例只讲okhttp的异步请求，当然同步只是将enqueue()方法替换成execute()\n注意这个回调的onFailure只是回调了本身请求的一些失败回调，例如超时IOException....当成功返回之后需要在onResponse中判断response.code()来判断是否是200，404，500之类的统一处理\n  * get\n  ```java\n        Request request = new Request.Builder().get()\n                .url(\"https://www.baidu.com\")\n                .header(\"test\",\"fds\")\n                .build();\n        okHttpClient.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n\n            }\n        });\n        ```\n * post\n只需要替换request post中需要传一个requestBody，不同的post请求，需要不同的请求体，当然只是方便我们不同的需求。\n基本的键值对上传在下面贴出，使用FormBody即可创建\n键值对加上文件上传则需要MultipartBody来创建\n而普通的上传json，上传文件可以直接调用RequestBody的静态方法来创建\n````java\n        Request request = new Request.Builder().post(new FormBody.Builder().add(\"sdf\",\"Sdfa\").build())\n                .url(\"https://www.baidu.com\")\n                .header(\"test\",\"fds\")\n                .build();\n                ````\n其他方法详见本库中request中做的封装，都包含入内了\n* https的影响，okhttps本身不添加任何代码就可以支持okhttps中公认的证书，类似于百度之类的，当时像12306这种只能手动添加了，当然也可以默认信任所有证书，具体由于本人公司并不需要就没写,推荐[ [Android Https相关完全解析 当OkHttp遇到Https](http://blog.csdn.net/lmj623565791/article/details/48129405)]\n* cookie持久化网上有很多方法，本库采用的是[franmontiel / PersistentCookieJar](https://github.com/franmontiel/PersistentCookieJar)\n* okhttp3取消请求\n这个是比较坑的网上传统的okhttpclicent.cancle(tag)方法发现没有了，只可以通过call.cancle来取消请求，后来发现是这样子根据tag来取消请求的，当然如果请求已经开始回调无法结束，正在上传或者下载时会产生IOException\n````java\n        //隊列中的call\n        for (Call call : getInstance().dispatcher().queuedCalls()) {\n            if (object.equals(call.request().tag())) {\n                call.cancel();\n            }\n        }\n        //運行中的call\n        for (Call call : getInstance().dispatcher().runningCalls()) {\n            if (object.equals(call.request().tag())) {\n                call.cancel();\n            }\n        }\n````\n最后\n好像没什么了 ，感觉有帮助的帮忙点个star，辣眼睛了的我也没办法\n\n![啦啦啦啦.gif](http://upload-images.jianshu.io/upload_images/1905930-18b22cdf6f936fe5.gif?imageMogr2/auto-orient/strip)\n","slug":"okhttp","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhhsj000k62x2dam73wgp","content":"<h1 id=\"Github地址—MyOkhttpUtils\"><a href=\"#Github地址—MyOkhttpUtils\" class=\"headerlink\" title=\"Github地址—MyOkhttpUtils\"></a><a href=\"https://github.com/jlcclidong/MyOkhttpUtils\" target=\"_blank\" rel=\"external\">Github地址—MyOkhttpUtils</a></h1><h2 id=\"初衷\"><a href=\"#初衷\" class=\"headerlink\" title=\"初衷\"></a>初衷</h2><p>对于okhttp3出来以后，使用的都是网上封装好的库，为了更好地理解封装的内容，对okhttp本身的熟悉，肯定学一下子了，网上okhttp的方法很多，但是网上okhttp3方面的东西并不多，很多都过时的方法，总结了一下，讲了一下okhttp3的基本使用方法，在下边要耐心才会 。<br>封装了一下基本大家使用得到的功能，想用的话可以直接拿去用，想扩展的话也可以直接下载扩展，代码比较少，不了解okhttp的可以下载学习一下，大神门口右走吧。<br>封装逻辑和使用的好多方法找不到，借鉴了两位大神的逻辑，相当于简化版本吧，封装的比较全面的可以参照<br><a href=\"https://github.com/hongyangAndroid/okhttputils\" target=\"_blank\" rel=\"external\">hongyangAndroid / okhttputils</a><br><a href=\"https://github.com/jeasonlzy/okhttp-OkGo\" target=\"_blank\" rel=\"external\">jeasonlzy/okhttp-OkGo</a></p>\n<h2 id=\"本文中库的简单使用介绍\"><a href=\"#本文中库的简单使用介绍\" class=\"headerlink\" title=\"本文中库的简单使用介绍\"></a>本文中库的简单使用介绍</h2><ul>\n<li><p>在project中添加依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> allprojects &#123;</div><div class=\"line\">\trepositories &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t\tmaven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在app中添加依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">   dependencies &#123;</div><div class=\"line\">      compile <span class=\"string\">'com.github.jlcclidong:MyOkhttpUtils:0.10'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>在本项目中使用okhttp的方法步骤<br>在application中初始化，此步骤必须，别忘记在清单文件中注册application否则不能使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.init(<span class=\"keyword\">this</span>)</div><div class=\"line\">         .connectTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">         .readTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">         .commonParams(<span class=\"string\">\"haha\"</span>,<span class=\"string\">\"1\"</span>) <span class=\"comment\">//添加公共参数</span></div><div class=\"line\">         .commonHeader(<span class=\"string\">\"nihao\"</span>,<span class=\"string\">\"1\"</span>)  <span class=\"comment\">//添加公共头</span></div><div class=\"line\">         <span class=\"comment\">//這兩個攔截器衹能選用一個</span></div><div class=\"line\">         <span class=\"comment\">//.AppInterceptor(\"eason\", new LogInterceptor())   //应用拦截器</span></div><div class=\"line\">         .NetWorkInterceptor(<span class=\"string\">\"eason\"</span>,<span class=\"keyword\">new</span> LogInterceptor()) <span class=\"comment\">//网络拦截器 将重定向等的request response页拦截打印  </span></div><div class=\"line\">         .CookieJar(<span class=\"keyword\">new</span> PersistentCookieJar(<span class=\"keyword\">new</span> SetCookieCache(), <span class=\"keyword\">new</span> SharedPrefsCookiePersistor(App.<span class=\"keyword\">this</span>)))</div><div class=\"line\">         .build();</div></pre></td></tr></table></figure>\n</li>\n<li><p>请求  其中callback有三种类型 fail都会返回Exception，不管是本身网络问题还是404等问题都会返回此回调，可以通过Exception类型进行自行处理</p>\n<ul>\n<li>callback有三种类型<ul>\n<li>JsonCallback<t> 传入类自动转换成bean，但是并未处理超大Json文件OOM 可自行通过流的方式来处理解析</t></li>\n<li>CallBack 返回String</li>\n<li>FileCallBack(String dir, String filename) 其中传入文件夹和文件名来保存 返回进度(0-100)</li>\n</ul>\n</li>\n<li><p>get</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.get().url(<span class=\"string\">\"http://lab.zuimeia.com/wallpaper/category/1/\"</span>)</div><div class=\"line\">        .param(<span class=\"string\">\"page_size\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        .build()</div><div class=\"line\">        .call(<span class=\"keyword\">new</span> JsonCallBack&lt;Bean&gt;() &#123;  <span class=\"comment\">//傳入實體類</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(Bean bean)</span> </span>&#123;</div><div class=\"line\">                mTv.setText(bean.getData().getBase_url());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>post  支持键值对和文件表单上传</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.post().url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .param(<span class=\"string\">\"test\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        .file(<span class=\"string\">\"test\"</span>, <span class=\"keyword\">new</span> File(<span class=\"string\">\"\"</span>))</div><div class=\"line\">        .build()</div><div class=\"line\">        .call(<span class=\"keyword\">new</span> CallBack() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(String response)</span> </span>&#123;</div><div class=\"line\">                mTv.setText(response);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>postjson  支持postJSON</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.postJson().url(<span class=\"string\">\"\"</span>)</div><div class=\"line\">    .json(<span class=\"string\">\"\"</span>)</div><div class=\"line\">    .build()</div><div class=\"line\">    .call(<span class=\"keyword\">new</span> CallBack() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(String response)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>download 文件下载只做到最基本的下载,断点续传和暂停下载暂未做，后续会追加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.download().url(<span class=\"string\">\"http://static.oschina.net/uploads/space/2015/0629/170157_rxDh_1767531.png\"</span>)</div><div class=\"line\">       .build()</div><div class=\"line\">       .tag(MainActivity.<span class=\"keyword\">this</span>)</div><div class=\"line\">       .call(<span class=\"keyword\">new</span> FileCallBack(getCacheDir().getAbsolutePath(), <span class=\"string\">\"github.png\"</span>) &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">progress</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span> </span>&#123;</div><div class=\"line\">               mTv.setText(progress + <span class=\"string\">\"\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(File file)</span> </span>&#123;</div><div class=\"line\">               mIV.setImageBitmap(BitmapFactory.decodeFile(file.getAbsolutePath()));</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>取消</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.cancle(MainActivity.<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>同时支持PostJson() 和 PostFile()两种方法</p>\n</li>\n</ul>\n</li>\n<li>其中日志打印时使用了格式化JsonFormat工具类</li>\n<li>请求时自动添加了 Accept-Language 和 User-Agent</li>\n<li>简单封装没有太多的代码，可以自行下载扩展<h2 id=\"okhttp本身的基本使用\"><a href=\"#okhttp本身的基本使用\" class=\"headerlink\" title=\"okhttp本身的基本使用\"></a>okhttp本身的基本使用</h2></li>\n<li>初始化一个全局的okhttpclient<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">OkHttpClient okHttpClient = <span class=\"keyword\">new</span> OkHttpClient.Builder()</div><div class=\"line\">       .connectTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">       .readTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">       .addInterceptor( <span class=\"keyword\">new</span> LogInterceptor())</div><div class=\"line\">       .cookieJar(...)</div><div class=\"line\">       .build();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然初始化的方法有很多这里只是列出常用的方法，okhttp建议全局使用同一个</p>\n<ul>\n<li>为了更好的理解get，post方法，我们可以写一个interceptor来监听request和response，实现这个类不可以出现问题否则是无法进行正常请求的<br>可以在此处修改request和response的参数添加缓存设置等，可自行添加<br>主要方法有这样几个，必须重写的方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">   Request request = chain.request();</div><div class=\"line\">   logForRequest(request);</div><div class=\"line\">   <span class=\"keyword\">return</span> logForResponse(response, time);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>打印request没有什么特别注意的地方<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logForRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============request start===============\"</span>);</div><div class=\"line\">      Log.e(<span class=\"string\">\"url:\"</span> + request.url());</div><div class=\"line\">      Log.e(<span class=\"string\">\"method:\"</span> + request.method());</div><div class=\"line\">      <span class=\"keyword\">if</span> (request.headers() != <span class=\"keyword\">null</span> &amp;&amp; request.headers().size() &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">          Headers headers = request.headers();</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; headers.size(); i++) &#123;</div><div class=\"line\">              Log.e(<span class=\"string\">\"headers\"</span>+headers.name(i)+<span class=\"string\">\"---\"</span>+headers.value(i));</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============request end=================\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"log request has something worng!!\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>打印response时注意，如果添加了interceptor则不能直接调用response.body().string()方法，调用此方法会直接close掉这个response，在callback中得不到正确的结果会报异常，只能使用response.newbuilder() 方法来使用新创建的response调用，eg<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Response <span class=\"title\">logForResponse</span><span class=\"params\">(Response response, <span class=\"keyword\">long</span> time)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============response start==============\"</span>);</div><div class=\"line\">      <span class=\"comment\">//response.body().string()只能调用一次 body()就会关掉</span></div><div class=\"line\">      <span class=\"comment\">//每次使用前都clone一份使用保证原来的body没有被关掉</span></div><div class=\"line\">      Response copy = response.newBuilder().build();</div><div class=\"line\">      Log.e(<span class=\"string\">\"responseurl:\"</span> + copy.request().url());</div><div class=\"line\">      Log.e(<span class=\"string\">\"response code:\"</span> + copy.code());</div><div class=\"line\">      Log.e(<span class=\"string\">\"total time:\"</span> + time);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!TextUtils.isEmpty(copy.message()))</div><div class=\"line\">          Log.e(<span class=\"string\">\"message:\"</span> + copy.message());</div><div class=\"line\">          <span class=\"keyword\">if</span> (copy.headers() != <span class=\"keyword\">null</span> &amp;&amp; copy.headers().size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              Headers headers = copy.headers();</div><div class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; headers.size(); i++) &#123;</div><div class=\"line\">                  Log.e(<span class=\"string\">\"\\t\"</span> + headers.name(i) + <span class=\"string\">\": \"</span> + headers.value(i));</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============response end================\"</span>);</div><div class=\"line\">      ResponseBody body = copy.body();</div><div class=\"line\">      <span class=\"keyword\">if</span> (body != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          MediaType mediaType = body.contentType();</div><div class=\"line\">          <span class=\"keyword\">if</span> (mediaType != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              Log.e(<span class=\"string\">\"============response body===============\"</span>);</div><div class=\"line\">              Log.e(<span class=\"string\">\"Content-type:\"</span> + mediaType.toString());</div><div class=\"line\">              <span class=\"keyword\">if</span> (isText(mediaType)) &#123;</div><div class=\"line\">                  String content = body.string();</div><div class=\"line\">                  Log.e(JsonFormat.formatJson(content));</div><div class=\"line\">                  Log.e(<span class=\"string\">\"============response body===============\"</span>);</div><div class=\"line\">                  <span class=\"keyword\">return</span> response.newBuilder().body(ResponseBody.create(mediaType, content)).build();</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  Log.e(<span class=\"string\">\" maybe response content too large too print , ignored!\"</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          Log.e(<span class=\"string\">\" body is null , ignored!\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"log response has something worng!!\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> response;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样每次调用http请求是就可以详细监听其中的内容了<br>全部具体内容详见github代码</p>\n<ul>\n<li><p>okhttp请求就是构建一个request加入到okhttpclicent中就可以了<br>这里实例只讲okhttp的异步请求，当然同步只是将enqueue()方法替换成execute()<br>注意这个回调的onFailure只是回调了本身请求的一些失败回调，例如超时IOException….当成功返回之后需要在onResponse中判断response.code()来判断是否是200，404，500之类的统一处理</p>\n<ul>\n<li><p>get</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().get()</div><div class=\"line\">        .url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .header(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"fds\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">okHttpClient.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>post<br>只需要替换request post中需要传一个requestBody，不同的post请求，需要不同的请求体，当然只是方便我们不同的需求。<br>基本的键值对上传在下面贴出，使用FormBody即可创建<br>键值对加上文件上传则需要MultipartBody来创建<br>而普通的上传json，上传文件可以直接调用RequestBody的静态方法来创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().post(<span class=\"keyword\">new</span> FormBody.Builder().add(<span class=\"string\">\"sdf\"</span>,<span class=\"string\">\"Sdfa\"</span>).build())</div><div class=\"line\">        .url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .header(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"fds\"</span>)</div><div class=\"line\">        .build();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>其他方法详见本库中request中做的封装，都包含入内了</p>\n<ul>\n<li>https的影响，okhttps本身不添加任何代码就可以支持okhttps中公认的证书，类似于百度之类的，当时像12306这种只能手动添加了，当然也可以默认信任所有证书，具体由于本人公司并不需要就没写,推荐[ <a href=\"http://blog.csdn.net/lmj623565791/article/details/48129405\" target=\"_blank\" rel=\"external\">Android Https相关完全解析 当OkHttp遇到Https</a>]</li>\n<li>cookie持久化网上有很多方法，本库采用的是<a href=\"https://github.com/franmontiel/PersistentCookieJar\" target=\"_blank\" rel=\"external\">franmontiel / PersistentCookieJar</a></li>\n<li>okhttp3取消请求<br>这个是比较坑的网上传统的okhttpclicent.cancle(tag)方法发现没有了，只可以通过call.cancle来取消请求，后来发现是这样子根据tag来取消请求的，当然如果请求已经开始回调无法结束，正在上传或者下载时会产生IOException<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//隊列中的call</span></div><div class=\"line\"><span class=\"keyword\">for</span> (Call call : getInstance().dispatcher().queuedCalls()) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object.equals(call.request().tag())) &#123;</div><div class=\"line\">        call.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//運行中的call</span></div><div class=\"line\"><span class=\"keyword\">for</span> (Call call : getInstance().dispatcher().runningCalls()) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object.equals(call.request().tag())) &#123;</div><div class=\"line\">        call.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最后<br>好像没什么了 ，感觉有帮助的帮忙点个star，辣眼睛了的我也没办法</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1905930-18b22cdf6f936fe5.gif?imageMogr2/auto-orient/strip\" alt=\"啦啦啦啦.gif\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Github地址—MyOkhttpUtils\"><a href=\"#Github地址—MyOkhttpUtils\" class=\"headerlink\" title=\"Github地址—MyOkhttpUtils\"></a><a href=\"https://github.com/jlcclidong/MyOkhttpUtils\">Github地址—MyOkhttpUtils</a></h1><h2 id=\"初衷\"><a href=\"#初衷\" class=\"headerlink\" title=\"初衷\"></a>初衷</h2><p>对于okhttp3出来以后，使用的都是网上封装好的库，为了更好地理解封装的内容，对okhttp本身的熟悉，肯定学一下子了，网上okhttp的方法很多，但是网上okhttp3方面的东西并不多，很多都过时的方法，总结了一下，讲了一下okhttp3的基本使用方法，在下边要耐心才会 。<br>封装了一下基本大家使用得到的功能，想用的话可以直接拿去用，想扩展的话也可以直接下载扩展，代码比较少，不了解okhttp的可以下载学习一下，大神门口右走吧。<br>封装逻辑和使用的好多方法找不到，借鉴了两位大神的逻辑，相当于简化版本吧，封装的比较全面的可以参照<br><a href=\"https://github.com/hongyangAndroid/okhttputils\">hongyangAndroid / okhttputils</a><br><a href=\"https://github.com/jeasonlzy/okhttp-OkGo\">jeasonlzy/okhttp-OkGo</a></p>\n<h2 id=\"本文中库的简单使用介绍\"><a href=\"#本文中库的简单使用介绍\" class=\"headerlink\" title=\"本文中库的简单使用介绍\"></a>本文中库的简单使用介绍</h2><ul>\n<li><p>在project中添加依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> allprojects &#123;</div><div class=\"line\">\trepositories &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t\tmaven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在app中添加依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">   dependencies &#123;</div><div class=\"line\">      compile <span class=\"string\">'com.github.jlcclidong:MyOkhttpUtils:0.10'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>在本项目中使用okhttp的方法步骤<br>在application中初始化，此步骤必须，别忘记在清单文件中注册application否则不能使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.init(<span class=\"keyword\">this</span>)</div><div class=\"line\">         .connectTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">         .readTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">         .commonParams(<span class=\"string\">\"haha\"</span>,<span class=\"string\">\"1\"</span>) <span class=\"comment\">//添加公共参数</span></div><div class=\"line\">         .commonHeader(<span class=\"string\">\"nihao\"</span>,<span class=\"string\">\"1\"</span>)  <span class=\"comment\">//添加公共头</span></div><div class=\"line\">         <span class=\"comment\">//這兩個攔截器衹能選用一個</span></div><div class=\"line\">         <span class=\"comment\">//.AppInterceptor(\"eason\", new LogInterceptor())   //应用拦截器</span></div><div class=\"line\">         .NetWorkInterceptor(<span class=\"string\">\"eason\"</span>,<span class=\"keyword\">new</span> LogInterceptor()) <span class=\"comment\">//网络拦截器 将重定向等的request response页拦截打印  </span></div><div class=\"line\">         .CookieJar(<span class=\"keyword\">new</span> PersistentCookieJar(<span class=\"keyword\">new</span> SetCookieCache(), <span class=\"keyword\">new</span> SharedPrefsCookiePersistor(App.<span class=\"keyword\">this</span>)))</div><div class=\"line\">         .build();</div></pre></td></tr></table></figure>\n</li>\n<li><p>请求  其中callback有三种类型 fail都会返回Exception，不管是本身网络问题还是404等问题都会返回此回调，可以通过Exception类型进行自行处理</p>\n<ul>\n<li>callback有三种类型<ul>\n<li>JsonCallback<T> 传入类自动转换成bean，但是并未处理超大Json文件OOM 可自行通过流的方式来处理解析</li>\n<li>CallBack 返回String</li>\n<li>FileCallBack(String dir, String filename) 其中传入文件夹和文件名来保存 返回进度(0-100)</li>\n</ul>\n</li>\n<li><p>get</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.get().url(<span class=\"string\">\"http://lab.zuimeia.com/wallpaper/category/1/\"</span>)</div><div class=\"line\">        .param(<span class=\"string\">\"page_size\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        .build()</div><div class=\"line\">        .call(<span class=\"keyword\">new</span> JsonCallBack&lt;Bean&gt;() &#123;  <span class=\"comment\">//傳入實體類</span></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(Bean bean)</span> </span>&#123;</div><div class=\"line\">                mTv.setText(bean.getData().getBase_url());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>post  支持键值对和文件表单上传</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.post().url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .param(<span class=\"string\">\"test\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        .file(<span class=\"string\">\"test\"</span>, <span class=\"keyword\">new</span> File(<span class=\"string\">\"\"</span>))</div><div class=\"line\">        .build()</div><div class=\"line\">        .call(<span class=\"keyword\">new</span> CallBack() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(String response)</span> </span>&#123;</div><div class=\"line\">                mTv.setText(response);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>postjson  支持postJSON</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.postJson().url(<span class=\"string\">\"\"</span>)</div><div class=\"line\">    .json(<span class=\"string\">\"\"</span>)</div><div class=\"line\">    .build()</div><div class=\"line\">    .call(<span class=\"keyword\">new</span> CallBack() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(String response)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>download 文件下载只做到最基本的下载,断点续传和暂停下载暂未做，后续会追加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.download().url(<span class=\"string\">\"http://static.oschina.net/uploads/space/2015/0629/170157_rxDh_1767531.png\"</span>)</div><div class=\"line\">       .build()</div><div class=\"line\">       .tag(MainActivity.<span class=\"keyword\">this</span>)</div><div class=\"line\">       .call(<span class=\"keyword\">new</span> FileCallBack(getCacheDir().getAbsolutePath(), <span class=\"string\">\"github.png\"</span>) &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">progress</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span> </span>&#123;</div><div class=\"line\">               mTv.setText(progress + <span class=\"string\">\"\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(File file)</span> </span>&#123;</div><div class=\"line\">               mIV.setImageBitmap(BitmapFactory.decodeFile(file.getAbsolutePath()));</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fail</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>取消</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ok.cancle(MainActivity.<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>同时支持PostJson() 和 PostFile()两种方法</p>\n</li>\n</ul>\n</li>\n<li>其中日志打印时使用了格式化JsonFormat工具类</li>\n<li>请求时自动添加了 Accept-Language 和 User-Agent</li>\n<li>简单封装没有太多的代码，可以自行下载扩展<h2 id=\"okhttp本身的基本使用\"><a href=\"#okhttp本身的基本使用\" class=\"headerlink\" title=\"okhttp本身的基本使用\"></a>okhttp本身的基本使用</h2></li>\n<li>初始化一个全局的okhttpclient<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">OkHttpClient okHttpClient = <span class=\"keyword\">new</span> OkHttpClient.Builder()</div><div class=\"line\">       .connectTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">       .readTimeout(<span class=\"number\">3000l</span>, TimeUnit.MILLISECONDS)</div><div class=\"line\">       .addInterceptor( <span class=\"keyword\">new</span> LogInterceptor())</div><div class=\"line\">       .cookieJar(...)</div><div class=\"line\">       .build();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然初始化的方法有很多这里只是列出常用的方法，okhttp建议全局使用同一个</p>\n<ul>\n<li>为了更好的理解get，post方法，我们可以写一个interceptor来监听request和response，实现这个类不可以出现问题否则是无法进行正常请求的<br>可以在此处修改request和response的参数添加缓存设置等，可自行添加<br>主要方法有这样几个，必须重写的方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">   Request request = chain.request();</div><div class=\"line\">   logForRequest(request);</div><div class=\"line\">   <span class=\"keyword\">return</span> logForResponse(response, time);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>打印request没有什么特别注意的地方<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logForRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============request start===============\"</span>);</div><div class=\"line\">      Log.e(<span class=\"string\">\"url:\"</span> + request.url());</div><div class=\"line\">      Log.e(<span class=\"string\">\"method:\"</span> + request.method());</div><div class=\"line\">      <span class=\"keyword\">if</span> (request.headers() != <span class=\"keyword\">null</span> &amp;&amp; request.headers().size() &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">          Headers headers = request.headers();</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; headers.size(); i++) &#123;</div><div class=\"line\">              Log.e(<span class=\"string\">\"headers\"</span>+headers.name(i)+<span class=\"string\">\"---\"</span>+headers.value(i));</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============request end=================\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"log request has something worng!!\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>打印response时注意，如果添加了interceptor则不能直接调用response.body().string()方法，调用此方法会直接close掉这个response，在callback中得不到正确的结果会报异常，只能使用response.newbuilder() 方法来使用新创建的response调用，eg<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Response <span class=\"title\">logForResponse</span><span class=\"params\">(Response response, <span class=\"keyword\">long</span> time)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============response start==============\"</span>);</div><div class=\"line\">      <span class=\"comment\">//response.body().string()只能调用一次 body()就会关掉</span></div><div class=\"line\">      <span class=\"comment\">//每次使用前都clone一份使用保证原来的body没有被关掉</span></div><div class=\"line\">      Response copy = response.newBuilder().build();</div><div class=\"line\">      Log.e(<span class=\"string\">\"responseurl:\"</span> + copy.request().url());</div><div class=\"line\">      Log.e(<span class=\"string\">\"response code:\"</span> + copy.code());</div><div class=\"line\">      Log.e(<span class=\"string\">\"total time:\"</span> + time);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!TextUtils.isEmpty(copy.message()))</div><div class=\"line\">          Log.e(<span class=\"string\">\"message:\"</span> + copy.message());</div><div class=\"line\">          <span class=\"keyword\">if</span> (copy.headers() != <span class=\"keyword\">null</span> &amp;&amp; copy.headers().size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              Headers headers = copy.headers();</div><div class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; headers.size(); i++) &#123;</div><div class=\"line\">                  Log.e(<span class=\"string\">\"\\t\"</span> + headers.name(i) + <span class=\"string\">\": \"</span> + headers.value(i));</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      Log.e(<span class=\"string\">\"============response end================\"</span>);</div><div class=\"line\">      ResponseBody body = copy.body();</div><div class=\"line\">      <span class=\"keyword\">if</span> (body != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          MediaType mediaType = body.contentType();</div><div class=\"line\">          <span class=\"keyword\">if</span> (mediaType != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              Log.e(<span class=\"string\">\"============response body===============\"</span>);</div><div class=\"line\">              Log.e(<span class=\"string\">\"Content-type:\"</span> + mediaType.toString());</div><div class=\"line\">              <span class=\"keyword\">if</span> (isText(mediaType)) &#123;</div><div class=\"line\">                  String content = body.string();</div><div class=\"line\">                  Log.e(JsonFormat.formatJson(content));</div><div class=\"line\">                  Log.e(<span class=\"string\">\"============response body===============\"</span>);</div><div class=\"line\">                  <span class=\"keyword\">return</span> response.newBuilder().body(ResponseBody.create(mediaType, content)).build();</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  Log.e(<span class=\"string\">\" maybe response content too large too print , ignored!\"</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          Log.e(<span class=\"string\">\" body is null , ignored!\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"log response has something worng!!\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> response;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样每次调用http请求是就可以详细监听其中的内容了<br>全部具体内容详见github代码</p>\n<ul>\n<li><p>okhttp请求就是构建一个request加入到okhttpclicent中就可以了<br>这里实例只讲okhttp的异步请求，当然同步只是将enqueue()方法替换成execute()<br>注意这个回调的onFailure只是回调了本身请求的一些失败回调，例如超时IOException….当成功返回之后需要在onResponse中判断response.code()来判断是否是200，404，500之类的统一处理</p>\n<ul>\n<li><p>get</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().get()</div><div class=\"line\">        .url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .header(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"fds\"</span>)</div><div class=\"line\">        .build();</div><div class=\"line\">okHttpClient.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>post<br>只需要替换request post中需要传一个requestBody，不同的post请求，需要不同的请求体，当然只是方便我们不同的需求。<br>基本的键值对上传在下面贴出，使用FormBody即可创建<br>键值对加上文件上传则需要MultipartBody来创建<br>而普通的上传json，上传文件可以直接调用RequestBody的静态方法来创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().post(<span class=\"keyword\">new</span> FormBody.Builder().add(<span class=\"string\">\"sdf\"</span>,<span class=\"string\">\"Sdfa\"</span>).build())</div><div class=\"line\">        .url(<span class=\"string\">\"https://www.baidu.com\"</span>)</div><div class=\"line\">        .header(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"fds\"</span>)</div><div class=\"line\">        .build();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>其他方法详见本库中request中做的封装，都包含入内了</p>\n<ul>\n<li>https的影响，okhttps本身不添加任何代码就可以支持okhttps中公认的证书，类似于百度之类的，当时像12306这种只能手动添加了，当然也可以默认信任所有证书，具体由于本人公司并不需要就没写,推荐[ <a href=\"http://blog.csdn.net/lmj623565791/article/details/48129405\">Android Https相关完全解析 当OkHttp遇到Https</a>]</li>\n<li>cookie持久化网上有很多方法，本库采用的是<a href=\"https://github.com/franmontiel/PersistentCookieJar\">franmontiel / PersistentCookieJar</a></li>\n<li>okhttp3取消请求<br>这个是比较坑的网上传统的okhttpclicent.cancle(tag)方法发现没有了，只可以通过call.cancle来取消请求，后来发现是这样子根据tag来取消请求的，当然如果请求已经开始回调无法结束，正在上传或者下载时会产生IOException<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//隊列中的call</span></div><div class=\"line\"><span class=\"keyword\">for</span> (Call call : getInstance().dispatcher().queuedCalls()) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object.equals(call.request().tag())) &#123;</div><div class=\"line\">        call.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//運行中的call</span></div><div class=\"line\"><span class=\"keyword\">for</span> (Call call : getInstance().dispatcher().runningCalls()) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object.equals(call.request().tag())) &#123;</div><div class=\"line\">        call.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最后<br>好像没什么了 ，感觉有帮助的帮忙点个star，辣眼睛了的我也没办法</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1905930-18b22cdf6f936fe5.gif?imageMogr2/auto-orient/strip\" alt=\"啦啦啦啦.gif\"></p>"},{"title":"sql笔记","date":"2017-06-24T07:55:11.000Z","_content":"## sql笔记\n\n### Select---想选择什么，以及从什么地方选\n#### 简单例子\n* 检索单个列\n  ``` SELECT RealName FROM t_user\n  ```\n\n* 检索多个列\n  ``` SELECT RealName,Gender FROM t_user\n  //在选择多个列时，一定要在列名之间加上逗号，但最后一个列名后不加。如果在最后一个列名后加了逗号，将出现错误。\n  ```\n* 检索所有列\n  ``` SELECT * FROM t_user\n  ```\n\n* 检索返回不同的值\n  ``` SELECT DISTINCT Ctype,Gender FROM t_user  //DISTINCT会将这个字段不重复的值返回,DISTINCT关键字作用于所有的列，不仅仅是跟在其后的那一列。例如，你指定SELECT DISTINCT Ctype, Gender，除非指定的两列完全相同，否则所有的行都会被检索出来\n  ```\n\n* 检索限制结果\n  ``` SELECT Gender FROM t_user LIMIT 5  OFFSET 5; //各个数据库方式不同mysql中使用方法 限制从第五个开始 长度为5 SELECT Gender FROM t_user LIMIT 5,5;\n  ```\n\n#### 排序---关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\n\n* 单列排序\n  ``` SELECT * FROM t_user ORDER BY RealName\n  //在指定一条ORDER BY子句时，应该保证它是SELECT语句中最后一条子句。如果它不是最后的子句，将会出现错误消息。\n  ```\n* 多列排序\n  ``` SELECT * FROM t_user ORDER BY RealName,Gender //只有在realname有相同值之后才会比较Gender\n  ```\n* 升降序\n  ``` SELECT * FROM t_user ORDER BY RealName DESC,Gender ASC//升降序默认只针对前面的列成立 DESC降序 ASC默认升序可不写\n  ```\n\n#### where\n\n* is Null ---在创建表时，表设计人员可以指定其中的列能否不包含值。在一个列不包含值时，称其包含空值NULL。\n\n  ```SELECT * FROM t_user WHERE t_user.Tel IS NULL //通过过滤选择不包含指定值的所有行时，你可能希望返回含NULL值的行。但是这做不到。因为未知（unknown）有特殊的含义，数据库不知道它们是否匹配，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。\n  ```\n\n* And\n  ```SELECT * FROM t_user WHERE Tel > 15504409406 AND ID < 91000 AND Gender= '男' //并列条件可以使用And连接\n  ```\n\n* or or并列时一般满足第一个条件就会返回不需在做其他操作\n  ```SELECT prod_name, prod_price FROM Products WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01') AND prod_price >= 10;//用圆括号括起来不会产生歧义 否则 And 会比 or优先导致结果出错\n  ```\n* IN 与or具有相同功能 更好的观察性 更好的速度 可以包含select语句\n```SELECT prod_name, prod_price FROM Products WHERE vend_id IN('DLL01','BRS01') AND prod_price >= 10\n```\n","source":"_posts/sql笔记.md","raw":"---\ntitle: sql笔记\ndate: 2017-06-24 15:55:11\ncategories:\n- javaee\ntags:\n- sql\n- javaee\n---\n## sql笔记\n\n### Select---想选择什么，以及从什么地方选\n#### 简单例子\n* 检索单个列\n  ``` SELECT RealName FROM t_user\n  ```\n\n* 检索多个列\n  ``` SELECT RealName,Gender FROM t_user\n  //在选择多个列时，一定要在列名之间加上逗号，但最后一个列名后不加。如果在最后一个列名后加了逗号，将出现错误。\n  ```\n* 检索所有列\n  ``` SELECT * FROM t_user\n  ```\n\n* 检索返回不同的值\n  ``` SELECT DISTINCT Ctype,Gender FROM t_user  //DISTINCT会将这个字段不重复的值返回,DISTINCT关键字作用于所有的列，不仅仅是跟在其后的那一列。例如，你指定SELECT DISTINCT Ctype, Gender，除非指定的两列完全相同，否则所有的行都会被检索出来\n  ```\n\n* 检索限制结果\n  ``` SELECT Gender FROM t_user LIMIT 5  OFFSET 5; //各个数据库方式不同mysql中使用方法 限制从第五个开始 长度为5 SELECT Gender FROM t_user LIMIT 5,5;\n  ```\n\n#### 排序---关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\n\n* 单列排序\n  ``` SELECT * FROM t_user ORDER BY RealName\n  //在指定一条ORDER BY子句时，应该保证它是SELECT语句中最后一条子句。如果它不是最后的子句，将会出现错误消息。\n  ```\n* 多列排序\n  ``` SELECT * FROM t_user ORDER BY RealName,Gender //只有在realname有相同值之后才会比较Gender\n  ```\n* 升降序\n  ``` SELECT * FROM t_user ORDER BY RealName DESC,Gender ASC//升降序默认只针对前面的列成立 DESC降序 ASC默认升序可不写\n  ```\n\n#### where\n\n* is Null ---在创建表时，表设计人员可以指定其中的列能否不包含值。在一个列不包含值时，称其包含空值NULL。\n\n  ```SELECT * FROM t_user WHERE t_user.Tel IS NULL //通过过滤选择不包含指定值的所有行时，你可能希望返回含NULL值的行。但是这做不到。因为未知（unknown）有特殊的含义，数据库不知道它们是否匹配，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。\n  ```\n\n* And\n  ```SELECT * FROM t_user WHERE Tel > 15504409406 AND ID < 91000 AND Gender= '男' //并列条件可以使用And连接\n  ```\n\n* or or并列时一般满足第一个条件就会返回不需在做其他操作\n  ```SELECT prod_name, prod_price FROM Products WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01') AND prod_price >= 10;//用圆括号括起来不会产生歧义 否则 And 会比 or优先导致结果出错\n  ```\n* IN 与or具有相同功能 更好的观察性 更好的速度 可以包含select语句\n```SELECT prod_name, prod_price FROM Products WHERE vend_id IN('DLL01','BRS01') AND prod_price >= 10\n```\n","slug":"sql笔记","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhhsp000o62x2vki0vhn8","content":"<h2 id=\"sql笔记\"><a href=\"#sql笔记\" class=\"headerlink\" title=\"sql笔记\"></a>sql笔记</h2><h3 id=\"Select—想选择什么，以及从什么地方选\"><a href=\"#Select—想选择什么，以及从什么地方选\" class=\"headerlink\" title=\"Select—想选择什么，以及从什么地方选\"></a>Select—想选择什么，以及从什么地方选</h3><h4 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h4><ul>\n<li><p>检索单个列</p>\n<figure class=\"highlight plain\"><figcaption><span>RealName FROM t_user</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>检索多个列</p>\n<figure class=\"highlight plain\"><figcaption><span>RealName,Gender FROM t_user</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在选择多个列时，一定要在列名之间加上逗号，但最后一个列名后不加。如果在最后一个列名后加了逗号，将出现错误。</div></pre></td></tr></table></figure>\n</li>\n<li><p>检索所有列</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>检索返回不同的值</p>\n<figure class=\"highlight plain\"><figcaption><span>DISTINCT Ctype,Gender FROM t_user</span><a href=\"//DISTINCT会将这个字段不重复的值返回,DISTINCT关键字作用于所有的列，不仅仅是跟在其后的那一列。例如，你指定SELECT\">DISTINCT Ctype, Gender，除非指定的两列完全相同，否则所有的行都会被检索出来</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>检索限制结果</p>\n<figure class=\"highlight plain\"><figcaption><span>Gender FROM t_user LIMIT 5  OFFSET 5;</span><a href=\"//各个数据库方式不同mysql中使用方法\">限制从第五个开始 长度为5 SELECT Gender FROM t_user LIMIT 5,5;</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\"><a href=\"#排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\" class=\"headerlink\" title=\"排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\"></a>排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。</h4><ul>\n<li><p>单列排序</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user ORDER BY RealName</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在指定一条ORDER BY子句时，应该保证它是SELECT语句中最后一条子句。如果它不是最后的子句，将会出现错误消息。</div></pre></td></tr></table></figure>\n</li>\n<li><p>多列排序</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user ORDER BY RealName,Gender</span><a href=\"//只有在realname有相同值之后才会比较Gender\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>升降序</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user ORDER BY RealName DESC,Gender ASC//升降序默认只针对前面的列成立 DESC降序 ASC默认升序可不写</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"where\"></a>where</h4><ul>\n<li><p>is Null —在创建表时，表设计人员可以指定其中的列能否不包含值。在一个列不包含值时，称其包含空值NULL。</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user WHERE t_user.Tel IS NULL</span><a href=\"//通过过滤选择不包含指定值的所有行时，你可能希望返回含NULL值的行。但是这做不到。因为未知（unknown）有特殊的含义，数据库不知道它们是否匹配，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>And</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user WHERE Tel > 15504409406 AND ID < 91000 AND Gender= '男'</span><a href=\"//并列条件可以使用And连接\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>or or并列时一般满足第一个条件就会返回不需在做其他操作</p>\n<figure class=\"highlight plain\"><figcaption><span>prod_name, prod_price FROM Products WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01') AND prod_price >= 10;//用圆括号括起来不会产生歧义 否则 And 会比 or优先导致结果出错</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>IN 与or具有相同功能 更好的观察性 更好的速度 可以包含select语句<br><code>SELECT prod_name, prod_price FROM Products WHERE vend_id IN(&#39;DLL01&#39;,&#39;BRS01&#39;) AND prod_price &gt;= 10</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"sql笔记\"><a href=\"#sql笔记\" class=\"headerlink\" title=\"sql笔记\"></a>sql笔记</h2><h3 id=\"Select—想选择什么，以及从什么地方选\"><a href=\"#Select—想选择什么，以及从什么地方选\" class=\"headerlink\" title=\"Select—想选择什么，以及从什么地方选\"></a>Select—想选择什么，以及从什么地方选</h3><h4 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h4><ul>\n<li><p>检索单个列</p>\n<figure class=\"highlight plain\"><figcaption><span>RealName FROM t_user</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>检索多个列</p>\n<figure class=\"highlight plain\"><figcaption><span>RealName,Gender FROM t_user</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在选择多个列时，一定要在列名之间加上逗号，但最后一个列名后不加。如果在最后一个列名后加了逗号，将出现错误。</div></pre></td></tr></table></figure>\n</li>\n<li><p>检索所有列</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>检索返回不同的值</p>\n<figure class=\"highlight plain\"><figcaption><span>DISTINCT Ctype,Gender FROM t_user</span><a href=\"//DISTINCT会将这个字段不重复的值返回,DISTINCT关键字作用于所有的列，不仅仅是跟在其后的那一列。例如，你指定SELECT\">DISTINCT Ctype, Gender，除非指定的两列完全相同，否则所有的行都会被检索出来</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>检索限制结果</p>\n<figure class=\"highlight plain\"><figcaption><span>Gender FROM t_user LIMIT 5  OFFSET 5;</span><a href=\"//各个数据库方式不同mysql中使用方法\">限制从第五个开始 长度为5 SELECT Gender FROM t_user LIMIT 5,5;</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\"><a href=\"#排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\" class=\"headerlink\" title=\"排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。\"></a>排序—关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。</h4><ul>\n<li><p>单列排序</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user ORDER BY RealName</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在指定一条ORDER BY子句时，应该保证它是SELECT语句中最后一条子句。如果它不是最后的子句，将会出现错误消息。</div></pre></td></tr></table></figure>\n</li>\n<li><p>多列排序</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user ORDER BY RealName,Gender</span><a href=\"//只有在realname有相同值之后才会比较Gender\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>升降序</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user ORDER BY RealName DESC,Gender ASC//升降序默认只针对前面的列成立 DESC降序 ASC默认升序可不写</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"where\"></a>where</h4><ul>\n<li><p>is Null —在创建表时，表设计人员可以指定其中的列能否不包含值。在一个列不包含值时，称其包含空值NULL。</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user WHERE t_user.Tel IS NULL</span><a href=\"//通过过滤选择不包含指定值的所有行时，你可能希望返回含NULL值的行。但是这做不到。因为未知（unknown）有特殊的含义，数据库不知道它们是否匹配，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>And</p>\n<figure class=\"highlight plain\"><figcaption><span>* FROM t_user WHERE Tel > 15504409406 AND ID < 91000 AND Gender= '男'</span><a href=\"//并列条件可以使用And连接\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>or or并列时一般满足第一个条件就会返回不需在做其他操作</p>\n<figure class=\"highlight plain\"><figcaption><span>prod_name, prod_price FROM Products WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01') AND prod_price >= 10;//用圆括号括起来不会产生歧义 否则 And 会比 or优先导致结果出错</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n</li>\n<li><p>IN 与or具有相同功能 更好的观察性 更好的速度 可以包含select语句<br><code>SELECT prod_name, prod_price FROM Products WHERE vend_id IN(&#39;DLL01&#39;,&#39;BRS01&#39;) AND prod_price &gt;= 10</code></p>\n</li>\n</ul>\n"},{"title":"struts2中返回json数据","date":"2017-05-10T14:01:46.000Z","_content":"## 导入struts2-json-pligin\n```xml\n<dependency>\n\t\t\t<groupId>org.apache.struts</groupId>\n\t\t\t<artifactId>struts2-json-plugin</artifactId>\n\t\t\t<version>2.3.14</version>\n</dependency>\n```\n<!-- more -->\n## 在Action中\n```java\npublic class Login extends ActionSupport{\n\n\tprivate static final long serialVersionUID = 6792184906021258229L;\n\tprivate Map<String, Object> data;\n\n\t@Override\n\tpublic String execute() throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put(\"li\", \"liu\");\n\t\tmap.put(\"dong\", \"yue\");\n\t\tthis.setData(map);\n\t\treturn SUCCESS;\n\t}\n\n\tpublic Map<String, Object> getData() {\n\t\treturn data;\n\t}\n\n\tpublic void setData(Map<String, Object> data) {\n\t\tthis.data = data;\n\t}\n\n}\n```\n## 在struts.xml中 继承自json-default\n```xml\n<package name=\"default\" extends=\"json-default\">\n\t\t<action name=\"login\" class=\"eason.test.maven.Login\">\n\t\t\t<result type=\"json\"> 返回值json\n\t\t\t\t<param name=\"root\">data</param> 不写这个有问题 data为json最外围map的名称\n\t\t\t</result>\n\t\t</action>\n</package>\n```\n","source":"_posts/struts2中返回json数据.md","raw":"---\ntitle: struts2中返回json数据\ndate: 2017-05-10 22:01:46\ncategories:\n- javaee\ntags:\n- struts2\n- javaee\n---\n## 导入struts2-json-pligin\n```xml\n<dependency>\n\t\t\t<groupId>org.apache.struts</groupId>\n\t\t\t<artifactId>struts2-json-plugin</artifactId>\n\t\t\t<version>2.3.14</version>\n</dependency>\n```\n<!-- more -->\n## 在Action中\n```java\npublic class Login extends ActionSupport{\n\n\tprivate static final long serialVersionUID = 6792184906021258229L;\n\tprivate Map<String, Object> data;\n\n\t@Override\n\tpublic String execute() throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put(\"li\", \"liu\");\n\t\tmap.put(\"dong\", \"yue\");\n\t\tthis.setData(map);\n\t\treturn SUCCESS;\n\t}\n\n\tpublic Map<String, Object> getData() {\n\t\treturn data;\n\t}\n\n\tpublic void setData(Map<String, Object> data) {\n\t\tthis.data = data;\n\t}\n\n}\n```\n## 在struts.xml中 继承自json-default\n```xml\n<package name=\"default\" extends=\"json-default\">\n\t\t<action name=\"login\" class=\"eason.test.maven.Login\">\n\t\t\t<result type=\"json\"> 返回值json\n\t\t\t\t<param name=\"root\">data</param> 不写这个有问题 data为json最外围map的名称\n\t\t\t</result>\n\t\t</action>\n</package>\n```\n","slug":"struts2中返回json数据","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhhsq000p62x23ip2s25j","content":"<h2 id=\"导入struts2-json-pligin\"><a href=\"#导入struts2-json-pligin\" class=\"headerlink\" title=\"导入struts2-json-pligin\"></a>导入struts2-json-pligin</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-json-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"在Action中\"><a href=\"#在Action中\" class=\"headerlink\" title=\"在Action中\"></a>在Action中</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6792184906021258229L</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, Object&gt; data;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\tMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</div><div class=\"line\">\t\tmap.put(<span class=\"string\">\"li\"</span>, <span class=\"string\">\"liu\"</span>);</div><div class=\"line\">\t\tmap.put(<span class=\"string\">\"dong\"</span>, <span class=\"string\">\"yue\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.setData(map);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(Map&lt;String, Object&gt; data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"在struts-xml中-继承自json-default\"><a href=\"#在struts-xml中-继承自json-default\" class=\"headerlink\" title=\"在struts.xml中 继承自json-default\"></a>在struts.xml中 继承自json-default</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"json-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.Login\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span>&gt;</span> 返回值json</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>data<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 不写这个有问题 data为json最外围map的名称</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"导入struts2-json-pligin\"><a href=\"#导入struts2-json-pligin\" class=\"headerlink\" title=\"导入struts2-json-pligin\"></a>导入struts2-json-pligin</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-json-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>","more":"<h2 id=\"在Action中\"><a href=\"#在Action中\" class=\"headerlink\" title=\"在Action中\"></a>在Action中</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6792184906021258229L</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, Object&gt; data;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\tMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</div><div class=\"line\">\t\tmap.put(<span class=\"string\">\"li\"</span>, <span class=\"string\">\"liu\"</span>);</div><div class=\"line\">\t\tmap.put(<span class=\"string\">\"dong\"</span>, <span class=\"string\">\"yue\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.setData(map);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(Map&lt;String, Object&gt; data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"在struts-xml中-继承自json-default\"><a href=\"#在struts-xml中-继承自json-default\" class=\"headerlink\" title=\"在struts.xml中 继承自json-default\"></a>在struts.xml中 继承自json-default</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"json-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eason.test.maven.Login\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span>&gt;</span> 返回值json</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>data<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 不写这个有问题 data为json最外围map的名称</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"struts获取正文","date":"2017-04-24T02:28:18.000Z","_content":"## 静态获取正文(写死)\n```java\n  private String name;\n\tprivate int age;\n\n\tpublic String addUser() {\n\t\tSystem.out.println(name + \"---\" + age);\n\t\treturn SUCCESS;\n\t}\n  //get and set..\n```\n<!-- more -->\n在配置action中添加\n```xml\n<action name=\"adduser\" class=\"com.eason.DynamicTest\" method=\"addUser\">\n\t\t\t<param name=\"name\">张三</param> 名称必须相同\n\t\t\t<param name=\"age\">13</param>\n\t\t\t<result>/success.jsp</result>\n</action>\n```\n## 动态获取正文\n* java类同上时 属性为成员变量时 直接访问即可,属性名称要相同http://localhost:8080/0424/adduser1?name=li&age=1\n* javabean 分出时 生成单独的domain包 访问\n  ```java\n  public class User {\n  \tprivate String name;\n  \tprivate int age;\n    //set and get\n  }\n  ```\n\n  ```java\n  private User user;\n\n\tpublic User getUser() {\n\t\treturn user;\n\t}\n\n\tpublic void setUser(User user) {\n\t\tthis.user = user;\n\t}\n  ```\n访问时需要这样http://localhost:8080/0424/adduser2?user.name=li&user.age=1\n* javabean 分出时 实现ModelDriven 接口 此时javabean必须初始化\n```java\n  private User user=new User();\n  @Override\n\tpublic User getModel() {\n\t\t// TODO Auto-generated method stub\n\t\treturn user;\n\t}\n```\n访问时http://localhost:8080/0424/adduser3?name=13&age=1即可\n","source":"_posts/struts获取正文.md","raw":"---\ntitle: struts获取正文\ndate: 2017-04-24 10:28:18\ncategories:\n- javaee\ntags:\n- struts2\n- javaee\n---\n## 静态获取正文(写死)\n```java\n  private String name;\n\tprivate int age;\n\n\tpublic String addUser() {\n\t\tSystem.out.println(name + \"---\" + age);\n\t\treturn SUCCESS;\n\t}\n  //get and set..\n```\n<!-- more -->\n在配置action中添加\n```xml\n<action name=\"adduser\" class=\"com.eason.DynamicTest\" method=\"addUser\">\n\t\t\t<param name=\"name\">张三</param> 名称必须相同\n\t\t\t<param name=\"age\">13</param>\n\t\t\t<result>/success.jsp</result>\n</action>\n```\n## 动态获取正文\n* java类同上时 属性为成员变量时 直接访问即可,属性名称要相同http://localhost:8080/0424/adduser1?name=li&age=1\n* javabean 分出时 生成单独的domain包 访问\n  ```java\n  public class User {\n  \tprivate String name;\n  \tprivate int age;\n    //set and get\n  }\n  ```\n\n  ```java\n  private User user;\n\n\tpublic User getUser() {\n\t\treturn user;\n\t}\n\n\tpublic void setUser(User user) {\n\t\tthis.user = user;\n\t}\n  ```\n访问时需要这样http://localhost:8080/0424/adduser2?user.name=li&user.age=1\n* javabean 分出时 实现ModelDriven 接口 此时javabean必须初始化\n```java\n  private User user=new User();\n  @Override\n\tpublic User getModel() {\n\t\t// TODO Auto-generated method stub\n\t\treturn user;\n\t}\n```\n访问时http://localhost:8080/0424/adduser3?name=13&age=1即可\n","slug":"struts获取正文","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhhss000q62x23svuk6wl","content":"<h2 id=\"静态获取正文-写死\"><a href=\"#静态获取正文-写死\" class=\"headerlink\" title=\"静态获取正文(写死)\"></a>静态获取正文(写死)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> String name;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tSystem.out.println(name + <span class=\"string\">\"---\"</span> + age);</div><div class=\"line\">\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"comment\">//get and set..</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>在配置action中添加<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"adduser\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.DynamicTest\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"addUser\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 名称必须相同</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"动态获取正文\"><a href=\"#动态获取正文\" class=\"headerlink\" title=\"动态获取正文\"></a>动态获取正文</h2><ul>\n<li>java类同上时 属性为成员变量时 直接访问即可,属性名称要相同<a href=\"http://localhost:8080/0424/adduser1?name=li&amp;age=1\" target=\"_blank\" rel=\"external\">http://localhost:8080/0424/adduser1?name=li&amp;age=1</a></li>\n<li><p>javabean 分出时 生成单独的domain包 访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">  <span class=\"comment\">//set and get</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> User user;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.user = user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问时需要这样<a href=\"http://localhost:8080/0424/adduser2?user.name=li&amp;user.age=1\" target=\"_blank\" rel=\"external\">http://localhost:8080/0424/adduser2?user.name=li&amp;user.age=1</a></p>\n<ul>\n<li>javabean 分出时 实现ModelDriven 接口 此时javabean必须初始化<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> User user=<span class=\"keyword\">new</span> User();</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getModel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问时<a href=\"http://localhost:8080/0424/adduser3?name=13&amp;age=1即可\" target=\"_blank\" rel=\"external\">http://localhost:8080/0424/adduser3?name=13&amp;age=1即可</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"静态获取正文-写死\"><a href=\"#静态获取正文-写死\" class=\"headerlink\" title=\"静态获取正文(写死)\"></a>静态获取正文(写死)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> String name;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tSystem.out.println(name + <span class=\"string\">\"---\"</span> + age);</div><div class=\"line\">\t<span class=\"keyword\">return</span> SUCCESS;</div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"comment\">//get and set..</span></div></pre></td></tr></table></figure>","more":"<p>在配置action中添加<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"adduser\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.DynamicTest\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"addUser\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 名称必须相同</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"动态获取正文\"><a href=\"#动态获取正文\" class=\"headerlink\" title=\"动态获取正文\"></a>动态获取正文</h2><ul>\n<li>java类同上时 属性为成员变量时 直接访问即可,属性名称要相同<a href=\"http://localhost:8080/0424/adduser1?name=li&amp;age=1\">http://localhost:8080/0424/adduser1?name=li&amp;age=1</a></li>\n<li><p>javabean 分出时 生成单独的domain包 访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">  <span class=\"comment\">//set and get</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> User user;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.user = user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问时需要这样<a href=\"http://localhost:8080/0424/adduser2?user.name=li&amp;user.age=1\">http://localhost:8080/0424/adduser2?user.name=li&amp;user.age=1</a></p>\n<ul>\n<li>javabean 分出时 实现ModelDriven 接口 此时javabean必须初始化<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> User user=<span class=\"keyword\">new</span> User();</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getModel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问时<a href=\"http://localhost:8080/0424/adduser3?name=13&amp;age=1即可\">http://localhost:8080/0424/adduser3?name=13&amp;age=1即可</a></p>"},{"title":"webview中控制视频播放暂停","date":"2017-04-13T13:50:04.000Z","_content":"## 视频播放失败情况\n\nwebview中https和http混合使用访问导致访问失败\n在低版本中是可以混合使用的，高版本中默认取消了这个模式需要手动开启\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n          webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);\n  }\n```\n\n## 播放视频退出声音还在\n\nwebview中播放视频需要手动控制停止还是播放可以通过反射方法来控制\n### 播放暂停\n```java\nwebView.getClass().getMethod(\"onPause\").invoke(webView,(Object[])null);\n```\n### 播放开始\n```java\nwebView.getClass().getMethod(\"onResume\").invoke(webView,(Object[])null);\n```\n","source":"_posts/webview中控制视频播放暂停.md","raw":"---\ntitle: webview中控制视频播放暂停\ndate: 2017-04-13 21:50:04\ntags:\n- 笔记\ncategories:\n- 笔记\n- android\n---\n## 视频播放失败情况\n\nwebview中https和http混合使用访问导致访问失败\n在低版本中是可以混合使用的，高版本中默认取消了这个模式需要手动开启\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n          webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);\n  }\n```\n\n## 播放视频退出声音还在\n\nwebview中播放视频需要手动控制停止还是播放可以通过反射方法来控制\n### 播放暂停\n```java\nwebView.getClass().getMethod(\"onPause\").invoke(webView,(Object[])null);\n```\n### 播放开始\n```java\nwebView.getClass().getMethod(\"onResume\").invoke(webView,(Object[])null);\n```\n","slug":"webview中控制视频播放暂停","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhhsu000t62x2282t77gi","content":"<h2 id=\"视频播放失败情况\"><a href=\"#视频播放失败情况\" class=\"headerlink\" title=\"视频播放失败情况\"></a>视频播放失败情况</h2><p>webview中https和http混合使用访问导致访问失败<br>在低版本中是可以混合使用的，高版本中默认取消了这个模式需要手动开启<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">          webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"播放视频退出声音还在\"><a href=\"#播放视频退出声音还在\" class=\"headerlink\" title=\"播放视频退出声音还在\"></a>播放视频退出声音还在</h2><p>webview中播放视频需要手动控制停止还是播放可以通过反射方法来控制</p>\n<h3 id=\"播放暂停\"><a href=\"#播放暂停\" class=\"headerlink\" title=\"播放暂停\"></a>播放暂停</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getClass().getMethod(<span class=\"string\">\"onPause\"</span>).invoke(webView,(Object[])<span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"播放开始\"><a href=\"#播放开始\" class=\"headerlink\" title=\"播放开始\"></a>播放开始</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getClass().getMethod(<span class=\"string\">\"onResume\"</span>).invoke(webView,(Object[])<span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"视频播放失败情况\"><a href=\"#视频播放失败情况\" class=\"headerlink\" title=\"视频播放失败情况\"></a>视频播放失败情况</h2><p>webview中https和http混合使用访问导致访问失败<br>在低版本中是可以混合使用的，高版本中默认取消了这个模式需要手动开启<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">          webView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"播放视频退出声音还在\"><a href=\"#播放视频退出声音还在\" class=\"headerlink\" title=\"播放视频退出声音还在\"></a>播放视频退出声音还在</h2><p>webview中播放视频需要手动控制停止还是播放可以通过反射方法来控制</p>\n<h3 id=\"播放暂停\"><a href=\"#播放暂停\" class=\"headerlink\" title=\"播放暂停\"></a>播放暂停</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getClass().getMethod(<span class=\"string\">\"onPause\"</span>).invoke(webView,(Object[])<span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"播放开始\"><a href=\"#播放开始\" class=\"headerlink\" title=\"播放开始\"></a>播放开始</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getClass().getMethod(<span class=\"string\">\"onResume\"</span>).invoke(webView,(Object[])<span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n"},{"title":"struts2环境搭建","date":"2017-04-21T07:55:11.000Z","_content":"## Struts2 环境搭建\n### 下包方法\n#### maven方式\n直接在eclipse中新建一个mavneproject--->选择webapp那项建立工程\n在pom.xml中添加struts2的核心依赖\n```xml\n<dependency>\n\t\t\t<groupId>org.apache.struts</groupId>\n\t\t\t<artifactId>struts2-core</artifactId>\n\t\t\t<version>2.5.10</version>\n</dependency>\n```\n#### 传统方式下载jar包\n[Struts2官网](https://struts.apache.org/)中下载最新jar包 当前版本2.5.10\n其中关键性jar包为\n* asm-5.1.jar 操作字节码 基于子类的动态代理\n* asm-commons-5.1.jar\n* asm-tree-5.1.jar\n* commons-fileupload-1.3.2.jar  io操作的jar\n* commons-io-2.4.jar\n* commons-lang3-3.4.jar   对java.lang的扩展\n* commons-logging-1.1.3.jar 对日志的扩展\n* freemaker-2.3.23.jar 对页面模板的扩展\n* javassist-3.20.0-GA.jar  对字节码的支持\n* log4j-api-2.7.jar 对日志的扩展\n* ognl-3.1.12.jar OGNL表达式\n* struts2-core-2.5.10.1.jar 核心库（新版包含xwork无需添加xwork）\n<!-- more -->\n\n### 创建工程\n* 将上文中的jar包拷入WEB-INFO中的lib，加到builPath\n* 在WEB-INFO中创建web.xml 添加 注意StrutsPrepareAndExecuteFilter类的位置在2.5中全限定名为这个\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns=\"http://java.sun.com/xml/ns/javaee\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n\tid=\"WebApp_ID\" version=\"3.0\">\n\t <filter>\n        <filter-name>struts2</filter-name>\n        <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>struts2</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n</web-app>\n```\n* 在src中创建struts.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>    \n<!DOCTYPE struts PUBLIC    \n            \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"    \n    \"http://struts.apache.org/dtds/struts-2.5.dtd\">\n<struts>\n\t<package name=\"s\" extends=\"struts-default\">\n\t\t<action name=\"hell\" class=\"com.eason.hello.HelloWorld\">\n\t\t\t<result>/hello.jsp</result>\n\t\t</action>\n\t</package>\n</struts>\n```\n* 创建类 创建方法 运行...\n\n### 配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性\n```xml\n\t<constant name=\"struts.action.extension\" value=\"li,,\" /> //配置后缀\n\t<constant name=\"struts.devMode\" value=\"true\" />\t\t\t\t\t//开启dev模式 修改配置文件不用重启  更多的错误信息\n\t<constant name=\"struts.i18n.encoding\" value=\"UTF-8\" />\t//编码\n\t<constant name=\"struts.enable.DynamicMethodInvocation\" value=\"true\" /> //是否开启动态方法调用 动作名称！动作方法名  尽量不启用 方法名称放在url中不安全\n```\n```xml\n<package name=\"s\" extends=\"struts-default\">\n\tname 属性唯一\n\textends 继承struts-default 可以struts的核心功能\n\tnamespace 命名空间 添加之后路径名同事改变\n\t<action name=\"hello\" class=\"com.eason.hello.HelloWorld\" method=\"hello\">\n\t\tname 自定义名称 用于url调用 不可以添加.action\n\t\tclass 类全限定名称\n\t\tmethod 方法名\n\t\t<result name=\"add\">/add.jsp</result>\n\t\t\tname 与动作方法的返回值相同\n\t\t\ttype dispatcher 请求转发 默认值\n\t\t\t\t\t redirect  重定向 重定向后地址栏会发生改变-显著特征\n\t\t\t\t\t <result name=\"success\" type=\"redirect\">/redirect.jsp</result>\n\t\t\t\t\t chain 转发到另一个动作\n\t\t\t\t\t 同package下转发到另一个动作\n\t\t\t\t\t <action name=\"hello\" class=\"com.eason.l.HelloWorld\">\n\t \t\t\t\t \t\t<result name=\"success\" type=\"chain\">action</result>\n \t\t\t\t\t </action>\n \t\t\t\t \t <action name=\"action\" class=\"com.eason.l.HelloWorld\" method=\"action\">\n\t \t\t\t\t\t\t<result name=\"action\">/success.jsp</result>\n \t\t\t\t\t </action>\n\t\t\t\t\t 不同package下\n\t\t\t\t\t <action name=\"hello\" class=\"com.eason.l.HelloWorld\">\n\t\t\t\t\t\t \t<result name=\"success\" type=\"chain\">\n\t\t\t\t\t\t\t\t<param name=\"namespace\">/p2</param> 填写package的name\n\t\t\t\t\t\t\t\t<param name=\"actionName\">hello</param> 填写方法名称\n\t\t\t\t\t\t\t</result>\n\t\t\t\t\t\t</action>\n\t\t\t\t\t redirectAction 重定向到另一个动作 同上除了type不相同\n\t\t\t\t\t <action name=\"hello_*\" class=\"com.eason.l.HelloWorld\" method=\"{1}\">\n\t\t\t\t\t\t <result type=\"redirect\">/direct.jsp</result>\n\t\t\t\t\t\t <result name=\"add\" type=\"redirectAction\">hello</result>\n\t\t\t\t\t\t 在2.5之后通配符方法需要添加\n\t\t\t\t\t\t <allowed-methods>add,delete</allowed-methods>\n\t\t\t\t\t </action>\n\t</action>\n</package>\n```\n### struts.xml分包管理\n* 新建xml文件\n* 正常写配置信息\n* 在struts.xml 引入\n```xml\n<include file=\"struts_action.xml\"></include>\n```\n\n### servletApi获取\n* 推荐直接获取\n```java\n\tprivate HttpServletResponse response;\n\tprivate ServletContext application;\n\tprivate HttpSession session;\n\tprivate HttpServletRequest request;\n\trequest = ServletActionContext.getRequest();\n\tresponse = ServletActionContext.getResponse();\n\tapplication = ServletActionContext.getServletContext();\n\tsession = request.getSession();\n```\n* 实现接口方法\n```java\npublic class ServletAPI extends ActionSupport\n\t\timplements ServletContextAware, ServletResponseAware, ServletRequestAware {\n\t\t\t@Override\n\t\t\tpublic void setServletRequest(HttpServletRequest request){\n\t\t\t\tthis.request = request;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void setServletResponse(HttpServletResponse arg0) {\n\t\t\t\tthis.response = arg0;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void setServletContext(ServletContext arg0) {\n\t\t\t\tthis.application = arg0;\n\t\t\t}\n\t\t}\n```\n","source":"_posts/struts2环境搭建.md","raw":"---\ntitle: struts2环境搭建\ndate: 2017-04-21 15:55:11\ncategories:\n- javaee\ntags:\n- struts2\n- javaee\n---\n## Struts2 环境搭建\n### 下包方法\n#### maven方式\n直接在eclipse中新建一个mavneproject--->选择webapp那项建立工程\n在pom.xml中添加struts2的核心依赖\n```xml\n<dependency>\n\t\t\t<groupId>org.apache.struts</groupId>\n\t\t\t<artifactId>struts2-core</artifactId>\n\t\t\t<version>2.5.10</version>\n</dependency>\n```\n#### 传统方式下载jar包\n[Struts2官网](https://struts.apache.org/)中下载最新jar包 当前版本2.5.10\n其中关键性jar包为\n* asm-5.1.jar 操作字节码 基于子类的动态代理\n* asm-commons-5.1.jar\n* asm-tree-5.1.jar\n* commons-fileupload-1.3.2.jar  io操作的jar\n* commons-io-2.4.jar\n* commons-lang3-3.4.jar   对java.lang的扩展\n* commons-logging-1.1.3.jar 对日志的扩展\n* freemaker-2.3.23.jar 对页面模板的扩展\n* javassist-3.20.0-GA.jar  对字节码的支持\n* log4j-api-2.7.jar 对日志的扩展\n* ognl-3.1.12.jar OGNL表达式\n* struts2-core-2.5.10.1.jar 核心库（新版包含xwork无需添加xwork）\n<!-- more -->\n\n### 创建工程\n* 将上文中的jar包拷入WEB-INFO中的lib，加到builPath\n* 在WEB-INFO中创建web.xml 添加 注意StrutsPrepareAndExecuteFilter类的位置在2.5中全限定名为这个\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns=\"http://java.sun.com/xml/ns/javaee\"\n\txsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n\tid=\"WebApp_ID\" version=\"3.0\">\n\t <filter>\n        <filter-name>struts2</filter-name>\n        <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>struts2</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n</web-app>\n```\n* 在src中创建struts.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>    \n<!DOCTYPE struts PUBLIC    \n            \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"    \n    \"http://struts.apache.org/dtds/struts-2.5.dtd\">\n<struts>\n\t<package name=\"s\" extends=\"struts-default\">\n\t\t<action name=\"hell\" class=\"com.eason.hello.HelloWorld\">\n\t\t\t<result>/hello.jsp</result>\n\t\t</action>\n\t</package>\n</struts>\n```\n* 创建类 创建方法 运行...\n\n### 配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性\n```xml\n\t<constant name=\"struts.action.extension\" value=\"li,,\" /> //配置后缀\n\t<constant name=\"struts.devMode\" value=\"true\" />\t\t\t\t\t//开启dev模式 修改配置文件不用重启  更多的错误信息\n\t<constant name=\"struts.i18n.encoding\" value=\"UTF-8\" />\t//编码\n\t<constant name=\"struts.enable.DynamicMethodInvocation\" value=\"true\" /> //是否开启动态方法调用 动作名称！动作方法名  尽量不启用 方法名称放在url中不安全\n```\n```xml\n<package name=\"s\" extends=\"struts-default\">\n\tname 属性唯一\n\textends 继承struts-default 可以struts的核心功能\n\tnamespace 命名空间 添加之后路径名同事改变\n\t<action name=\"hello\" class=\"com.eason.hello.HelloWorld\" method=\"hello\">\n\t\tname 自定义名称 用于url调用 不可以添加.action\n\t\tclass 类全限定名称\n\t\tmethod 方法名\n\t\t<result name=\"add\">/add.jsp</result>\n\t\t\tname 与动作方法的返回值相同\n\t\t\ttype dispatcher 请求转发 默认值\n\t\t\t\t\t redirect  重定向 重定向后地址栏会发生改变-显著特征\n\t\t\t\t\t <result name=\"success\" type=\"redirect\">/redirect.jsp</result>\n\t\t\t\t\t chain 转发到另一个动作\n\t\t\t\t\t 同package下转发到另一个动作\n\t\t\t\t\t <action name=\"hello\" class=\"com.eason.l.HelloWorld\">\n\t \t\t\t\t \t\t<result name=\"success\" type=\"chain\">action</result>\n \t\t\t\t\t </action>\n \t\t\t\t \t <action name=\"action\" class=\"com.eason.l.HelloWorld\" method=\"action\">\n\t \t\t\t\t\t\t<result name=\"action\">/success.jsp</result>\n \t\t\t\t\t </action>\n\t\t\t\t\t 不同package下\n\t\t\t\t\t <action name=\"hello\" class=\"com.eason.l.HelloWorld\">\n\t\t\t\t\t\t \t<result name=\"success\" type=\"chain\">\n\t\t\t\t\t\t\t\t<param name=\"namespace\">/p2</param> 填写package的name\n\t\t\t\t\t\t\t\t<param name=\"actionName\">hello</param> 填写方法名称\n\t\t\t\t\t\t\t</result>\n\t\t\t\t\t\t</action>\n\t\t\t\t\t redirectAction 重定向到另一个动作 同上除了type不相同\n\t\t\t\t\t <action name=\"hello_*\" class=\"com.eason.l.HelloWorld\" method=\"{1}\">\n\t\t\t\t\t\t <result type=\"redirect\">/direct.jsp</result>\n\t\t\t\t\t\t <result name=\"add\" type=\"redirectAction\">hello</result>\n\t\t\t\t\t\t 在2.5之后通配符方法需要添加\n\t\t\t\t\t\t <allowed-methods>add,delete</allowed-methods>\n\t\t\t\t\t </action>\n\t</action>\n</package>\n```\n### struts.xml分包管理\n* 新建xml文件\n* 正常写配置信息\n* 在struts.xml 引入\n```xml\n<include file=\"struts_action.xml\"></include>\n```\n\n### servletApi获取\n* 推荐直接获取\n```java\n\tprivate HttpServletResponse response;\n\tprivate ServletContext application;\n\tprivate HttpSession session;\n\tprivate HttpServletRequest request;\n\trequest = ServletActionContext.getRequest();\n\tresponse = ServletActionContext.getResponse();\n\tapplication = ServletActionContext.getServletContext();\n\tsession = request.getSession();\n```\n* 实现接口方法\n```java\npublic class ServletAPI extends ActionSupport\n\t\timplements ServletContextAware, ServletResponseAware, ServletRequestAware {\n\t\t\t@Override\n\t\t\tpublic void setServletRequest(HttpServletRequest request){\n\t\t\t\tthis.request = request;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void setServletResponse(HttpServletResponse arg0) {\n\t\t\t\tthis.response = arg0;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void setServletContext(ServletContext arg0) {\n\t\t\t\tthis.application = arg0;\n\t\t\t}\n\t\t}\n```\n","slug":"struts2环境搭建","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhhsv000v62x2noek0q48","content":"<h2 id=\"Struts2-环境搭建\"><a href=\"#Struts2-环境搭建\" class=\"headerlink\" title=\"Struts2 环境搭建\"></a>Struts2 环境搭建</h2><h3 id=\"下包方法\"><a href=\"#下包方法\" class=\"headerlink\" title=\"下包方法\"></a>下包方法</h3><h4 id=\"maven方式\"><a href=\"#maven方式\" class=\"headerlink\" title=\"maven方式\"></a>maven方式</h4><p>直接在eclipse中新建一个mavneproject—&gt;选择webapp那项建立工程<br>在pom.xml中添加struts2的核心依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"传统方式下载jar包\"><a href=\"#传统方式下载jar包\" class=\"headerlink\" title=\"传统方式下载jar包\"></a>传统方式下载jar包</h4><p><a href=\"https://struts.apache.org/\" target=\"_blank\" rel=\"external\">Struts2官网</a>中下载最新jar包 当前版本2.5.10<br>其中关键性jar包为</p>\n<ul>\n<li>asm-5.1.jar 操作字节码 基于子类的动态代理</li>\n<li>asm-commons-5.1.jar</li>\n<li>asm-tree-5.1.jar</li>\n<li>commons-fileupload-1.3.2.jar  io操作的jar</li>\n<li>commons-io-2.4.jar</li>\n<li>commons-lang3-3.4.jar   对java.lang的扩展</li>\n<li>commons-logging-1.1.3.jar 对日志的扩展</li>\n<li>freemaker-2.3.23.jar 对页面模板的扩展</li>\n<li>javassist-3.20.0-GA.jar  对字节码的支持</li>\n<li>log4j-api-2.7.jar 对日志的扩展</li>\n<li>ognl-3.1.12.jar OGNL表达式</li>\n<li>struts2-core-2.5.10.1.jar 核心库（新版包含xwork无需添加xwork）<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h3><ul>\n<li>将上文中的jar包拷入WEB-INFO中的lib，加到builPath</li>\n<li><p>在WEB-INFO中创建web.xml 添加 注意StrutsPrepareAndExecuteFilter类的位置在2.5中全限定名为这个</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\">\t<span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></div><div class=\"line\">\t<span class=\"attr\">id</span>=<span class=\"string\">\"WebApp_ID\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</div><div class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在src中创建struts.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;    </div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC    </span></div><div class=\"line\">            \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"    </div><div class=\"line\">    \"http://struts.apache.org/dtds/struts-2.5.dtd\"&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hell\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.hello.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span>&gt;</span>/hello.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>创建类 创建方法 运行…</p>\n</li>\n</ul>\n<h3 id=\"配置struts-xml-在struts-properties文件中创建重复的属性会覆盖-在web-xml中重复的属性会最终覆盖之前的属性\"><a href=\"#配置struts-xml-在struts-properties文件中创建重复的属性会覆盖-在web-xml中重复的属性会最终覆盖之前的属性\" class=\"headerlink\" title=\"配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性\"></a>配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.action.extension\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"li,,\"</span> /&gt;</span> //配置后缀</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.devMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span>\t\t\t\t\t//开启dev模式 修改配置文件不用重启  更多的错误信息</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.i18n.encoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span>\t//编码</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span> //是否开启动态方法调用 动作名称！动作方法名  尽量不启用 方法名称放在url中不安全</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></div><div class=\"line\">\tname 属性唯一</div><div class=\"line\">\textends 继承struts-default 可以struts的核心功能</div><div class=\"line\">\tnamespace 命名空间 添加之后路径名同事改变</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.hello.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"hello\"</span>&gt;</span></div><div class=\"line\">\t\tname 自定义名称 用于url调用 不可以添加.action</div><div class=\"line\">\t\tclass 类全限定名称</div><div class=\"line\">\t\tmethod 方法名</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add\"</span>&gt;</span>/add.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\tname 与动作方法的返回值相同</div><div class=\"line\">\t\t\ttype dispatcher 请求转发 默认值</div><div class=\"line\">\t\t\t\t\t redirect  重定向 重定向后地址栏会发生改变-显著特征</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/redirect.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t chain 转发到另一个动作</div><div class=\"line\">\t\t\t\t\t 同package下转发到另一个动作</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t \t\t\t\t \t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"chain\"</span>&gt;</span>action<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"> \t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"> \t\t\t\t \t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"action\"</span>&gt;</span></div><div class=\"line\">\t \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action\"</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"> \t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t 不同package下</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t \t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"chain\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"namespace\"</span>&gt;</span>/p2<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 填写package的name</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"actionName\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 填写方法名称</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t redirectAction 重定向到另一个动作 同上除了type不相同</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello_*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"&#123;1&#125;\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/direct.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t 在2.5之后通配符方法需要添加</div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">allowed-methods</span>&gt;</span>add,delete<span class=\"tag\">&lt;/<span class=\"name\">allowed-methods</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"struts-xml分包管理\"><a href=\"#struts-xml分包管理\" class=\"headerlink\" title=\"struts.xml分包管理\"></a>struts.xml分包管理</h3><ul>\n<li>新建xml文件</li>\n<li>正常写配置信息</li>\n<li>在struts.xml 引入<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts_action.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"servletApi获取\"><a href=\"#servletApi获取\" class=\"headerlink\" title=\"servletApi获取\"></a>servletApi获取</h3><ul>\n<li><p>推荐直接获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> HttpServletResponse response;</div><div class=\"line\"><span class=\"keyword\">private</span> ServletContext application;</div><div class=\"line\"><span class=\"keyword\">private</span> HttpSession session;</div><div class=\"line\"><span class=\"keyword\">private</span> HttpServletRequest request;</div><div class=\"line\">request = ServletActionContext.getRequest();</div><div class=\"line\">response = ServletActionContext.getResponse();</div><div class=\"line\">application = ServletActionContext.getServletContext();</div><div class=\"line\">session = request.getSession();</div></pre></td></tr></table></figure>\n</li>\n<li><p>实现接口方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletAPI</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span></div><div class=\"line\">\t\t<span class=\"keyword\">implements</span> <span class=\"title\">ServletContextAware</span>, <span class=\"title\">ServletResponseAware</span>, <span class=\"title\">ServletRequestAware</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletRequest</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.request = request;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletResponse</span><span class=\"params\">(HttpServletResponse arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.response = arg0;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletContext</span><span class=\"params\">(ServletContext arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.application = arg0;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Struts2-环境搭建\"><a href=\"#Struts2-环境搭建\" class=\"headerlink\" title=\"Struts2 环境搭建\"></a>Struts2 环境搭建</h2><h3 id=\"下包方法\"><a href=\"#下包方法\" class=\"headerlink\" title=\"下包方法\"></a>下包方法</h3><h4 id=\"maven方式\"><a href=\"#maven方式\" class=\"headerlink\" title=\"maven方式\"></a>maven方式</h4><p>直接在eclipse中新建一个mavneproject—&gt;选择webapp那项建立工程<br>在pom.xml中添加struts2的核心依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"传统方式下载jar包\"><a href=\"#传统方式下载jar包\" class=\"headerlink\" title=\"传统方式下载jar包\"></a>传统方式下载jar包</h4><p><a href=\"https://struts.apache.org/\">Struts2官网</a>中下载最新jar包 当前版本2.5.10<br>其中关键性jar包为</p>\n<ul>\n<li>asm-5.1.jar 操作字节码 基于子类的动态代理</li>\n<li>asm-commons-5.1.jar</li>\n<li>asm-tree-5.1.jar</li>\n<li>commons-fileupload-1.3.2.jar  io操作的jar</li>\n<li>commons-io-2.4.jar</li>\n<li>commons-lang3-3.4.jar   对java.lang的扩展</li>\n<li>commons-logging-1.1.3.jar 对日志的扩展</li>\n<li>freemaker-2.3.23.jar 对页面模板的扩展</li>\n<li>javassist-3.20.0-GA.jar  对字节码的支持</li>\n<li>log4j-api-2.7.jar 对日志的扩展</li>\n<li>ognl-3.1.12.jar OGNL表达式</li>\n<li>struts2-core-2.5.10.1.jar 核心库（新版包含xwork无需添加xwork）","more":"</li>\n</ul>\n<h3 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h3><ul>\n<li>将上文中的jar包拷入WEB-INFO中的lib，加到builPath</li>\n<li><p>在WEB-INFO中创建web.xml 添加 注意StrutsPrepareAndExecuteFilter类的位置在2.5中全限定名为这个</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></div><div class=\"line\">\t<span class=\"attr\">id</span>=<span class=\"string\">\"WebApp_ID\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</span></div><div class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在src中创建struts.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;    </div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC    </div><div class=\"line\">            \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"    </div><div class=\"line\">    \"http://struts.apache.org/dtds/struts-2.5.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hell\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.hello.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span>&gt;</span>/hello.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>创建类 创建方法 运行…</p>\n</li>\n</ul>\n<h3 id=\"配置struts-xml-在struts-properties文件中创建重复的属性会覆盖-在web-xml中重复的属性会最终覆盖之前的属性\"><a href=\"#配置struts-xml-在struts-properties文件中创建重复的属性会覆盖-在web-xml中重复的属性会最终覆盖之前的属性\" class=\"headerlink\" title=\"配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性\"></a>配置struts.xml  在struts.properties文件中创建重复的属性会覆盖   在web.xml中重复的属性会最终覆盖之前的属性</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.action.extension\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"li,,\"</span> /&gt;</span> //配置后缀</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.devMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span>\t\t\t\t\t//开启dev模式 修改配置文件不用重启  更多的错误信息</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.i18n.encoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span>\t//编码</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span> //是否开启动态方法调用 动作名称！动作方法名  尽量不启用 方法名称放在url中不安全</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></div><div class=\"line\">\tname 属性唯一</div><div class=\"line\">\textends 继承struts-default 可以struts的核心功能</div><div class=\"line\">\tnamespace 命名空间 添加之后路径名同事改变</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.hello.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"hello\"</span>&gt;</span></div><div class=\"line\">\t\tname 自定义名称 用于url调用 不可以添加.action</div><div class=\"line\">\t\tclass 类全限定名称</div><div class=\"line\">\t\tmethod 方法名</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add\"</span>&gt;</span>/add.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\tname 与动作方法的返回值相同</div><div class=\"line\">\t\t\ttype dispatcher 请求转发 默认值</div><div class=\"line\">\t\t\t\t\t redirect  重定向 重定向后地址栏会发生改变-显著特征</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/redirect.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t chain 转发到另一个动作</div><div class=\"line\">\t\t\t\t\t 同package下转发到另一个动作</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t \t\t\t\t \t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"chain\"</span>&gt;</span>action<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"> \t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"> \t\t\t\t \t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"action\"</span>&gt;</span></div><div class=\"line\">\t \t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action\"</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\"> \t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t 不同package下</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t \t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"chain\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"namespace\"</span>&gt;</span>/p2<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 填写package的name</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"actionName\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span> 填写方法名称</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t redirectAction 重定向到另一个动作 同上除了type不相同</div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hello_*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.eason.l.HelloWorld\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"&#123;1&#125;\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/direct.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t 在2.5之后通配符方法需要添加</div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">allowed-methods</span>&gt;</span>add,delete<span class=\"tag\">&lt;/<span class=\"name\">allowed-methods</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"struts-xml分包管理\"><a href=\"#struts-xml分包管理\" class=\"headerlink\" title=\"struts.xml分包管理\"></a>struts.xml分包管理</h3><ul>\n<li>新建xml文件</li>\n<li>正常写配置信息</li>\n<li>在struts.xml 引入<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts_action.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"servletApi获取\"><a href=\"#servletApi获取\" class=\"headerlink\" title=\"servletApi获取\"></a>servletApi获取</h3><ul>\n<li><p>推荐直接获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> HttpServletResponse response;</div><div class=\"line\"><span class=\"keyword\">private</span> ServletContext application;</div><div class=\"line\"><span class=\"keyword\">private</span> HttpSession session;</div><div class=\"line\"><span class=\"keyword\">private</span> HttpServletRequest request;</div><div class=\"line\">request = ServletActionContext.getRequest();</div><div class=\"line\">response = ServletActionContext.getResponse();</div><div class=\"line\">application = ServletActionContext.getServletContext();</div><div class=\"line\">session = request.getSession();</div></pre></td></tr></table></figure>\n</li>\n<li><p>实现接口方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletAPI</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></div><div class=\"line\">\t\t<span class=\"keyword\">implements</span> <span class=\"title\">ServletContextAware</span>, <span class=\"title\">ServletResponseAware</span>, <span class=\"title\">ServletRequestAware</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletRequest</span><span class=\"params\">(HttpServletRequest request)</span></span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.request = request;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletResponse</span><span class=\"params\">(HttpServletResponse arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.response = arg0;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServletContext</span><span class=\"params\">(ServletContext arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.application = arg0;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"仿美团外卖添加商品的抛物线动画","date":"2017-03-17T08:40:11.000Z","_content":"# [GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库](https://github.com/jlcclidong/AddCartAniamtion)\n\n## 1.初衷\n公司要做一个点餐系统，要求类似要的美团外卖的点餐动画，就像下面这样一个抛物线（biu）\n\n![美团的动画](http://omy391n59.bkt.clouddn.com/image/addcart1905930-f419e78607521fb6.gif)\n\n身为一个把时间节约全部投入到工作中的程序员，baidu geogle了好久发现没有这个动画效果的具体实现.有的效果也不是很好，只好自己写一个这样的效果了(搬砖去了)\n<!-- more -->\n## 2.结果\n\n结果demo就是和下面一样做的一个动画效果\n![自己的动画\n](http://omy391n59.bkt.clouddn.com/image/addcart1905930-a9a2726a504ab56f.gif)\n\n\n可以直接使用拷贝这个类或者在Project中build.gradle添加\n````java\nallprojects{\n  repositories{\n    ...\n    maven{url\"https://jitpack.io\"}\n  }\n}\n````\n在Moudle中的build.gradle\n````java\n\ndependencies{\n  compile'com.github.jlcclidong:AddCartAniamtion:v3.0'\n}\n````\n直接使用AddCartAniamtion.AddToCart()完成动画，图片默认为填入ImageView的图片，想要自己更改的可以去源码中更改，本人水平有限，希望多交流。\n\n自己使用在RecycleView中没有问题。动画左右飞都木有问题。\n\n## 3.过程\n\n本身看到过一个用贝塞尔曲线来做这个效果的，效果不好(好吧，主要是自己数学实在不争气)\n身为程序员里物理学的最好的还是用物理公式来解决问题吧，加属性动画\n\n首先确定父控件，起始位置控件，以及终点位置控件位置\n\n````java\n//计算父控件的位置\nint[] parent =new int[2];\nrl.getLocationInWindow(parent);\n\n//计算起点控件位置\nint[] startLocation =new int[2];\nstartView.getLocationInWindow(startLocation);\n\n//计算终点控件位置\nint[] endLocation =new int[2];\nendView.getLocationInWindow(endLocation);\n````\n添加一个用于ImageView用于动画（注意确定添加的位置是一定要注意父控件的Padding值，因为这个错位了好久）\n````java\nfinal ImageView view =newImageView(mContext);\n\n//确定ImageView大小与传进来的ImageView相同\nRelativeLayout.LayoutParams params =new RelativeLayout.LayoutParams(startView.getWidth(),startView.getHeight());\n\n//获取ImageView的图片 并设置在新的ImageView上\nview.setImageDrawable(startView.getDrawable());\n\n//确定ImageView的位置与startView相同\nparams.leftMargin= startLocation[0] - parent[0] - rl.getPaddingLeft();\nparams.topMargin= startLocation[1] - parent[1] - rl.getPaddingTop();\n\nrl.addView(view,params);\n````\n好吧重点来了 我把初始的X轴Y轴速度设成相同的这样保证了上移的效果 然后根据时间 距离计算初速度 加速度 基本就用到了这么一个公式\n\n    s=vt+g*t*t/2\n````java\n//计算两者的横向X轴的距离差\nint XtoX = endLocation[0] - startLocation[0] + endView.getWidth() /2-\nstartView.getWidth() /2;\n\n//根据距离 时间 获取到对应的X轴的初速度\nfinal float xv = XtoX / time;\n\n//计算两者的横向X轴的距离差\nint YtoY = endLocation[1] - startLocation[1];\n\n//根据距离 时间 初始设置的Y轴初速度与X轴初速度相同 获取到竖直方向上的加速度\nfinal float g;\nif(xv>0) {\n  g = (YtoY + xv * time) / time / time *2;\n}else{\n  g = (YtoY - xv * time) / time / time *2;\n}\n设置属性动画了\n\nValueAnimator va =new ValueAnimator();\nva.setDuration(time *1000);\nva.setObjectValues(newPointF(0,0));\n\n//计算位置\n\nva.setEvaluator(new TypeEvaluator() {\n    @Override\n    public Point Fevaluate(float v,PointF pointF,PointF t1) {\n        PointF point =newPointF();\n        point.x= v *xv*time;\n        if(xv>0) {\n          point.y=g* (v *time) * (v *time) /2-xv* v *time;\n        }else{\n          point.y=g* (v *time) * (v *time) /2+xv* v *time;\n        }\n        return point;\n    }\n  });\n  //设置动画\nva.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n  @Override\n  public void onAnimationUpdate(ValueAnimator valueAnimator) {\n    PointF point = (PointF)valueAnimator.getAnimatedValue();\n    view.setTranslationX(point.x);\n    view.setTranslationY(point.y);\n  }\n});\n设置成功 开启动画 最后监听动画结束时remove这个ImageView\n````\n\n\n## 4.结束语\n\n写逻辑代码写的久了很多时候就会忘了一般的动画实现，这个动画实现虽然没什么含金量，但是很多项目中都可能会用得到可以直接使用还是很方便的，大神掠过，新接触android动画的还是可以看看的，代码内注释很详细。\n\n[源码在这里 GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库](https://github.com/jlcclidong/AddCartAniamtion)\n\n这个库的主要灵感感谢\n\n[Android 属性动画（Property Animation） 完全解析 （上） - Hongyang - 博客频道 - CSDN.NET](http://blog.csdn.net/lmj623565791/article/details/38067475)\n\n[把商品添加到购物车的动画效果（贝塞尔曲线） - Android_Study_OK的博客 - 博客频道 - CSDN.NET](http://blog.csdn.net/android_study_ok/article/details/51540759)\n","source":"_posts/仿美团外卖添加商品的抛物线动画.md","raw":"---\ntitle: 仿美团外卖添加商品的抛物线动画\ndate: 2017-03-17 16:40:11\ncategories:\n- library\ntags:\n- animation\n- library\n---\n# [GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库](https://github.com/jlcclidong/AddCartAniamtion)\n\n## 1.初衷\n公司要做一个点餐系统，要求类似要的美团外卖的点餐动画，就像下面这样一个抛物线（biu）\n\n![美团的动画](http://omy391n59.bkt.clouddn.com/image/addcart1905930-f419e78607521fb6.gif)\n\n身为一个把时间节约全部投入到工作中的程序员，baidu geogle了好久发现没有这个动画效果的具体实现.有的效果也不是很好，只好自己写一个这样的效果了(搬砖去了)\n<!-- more -->\n## 2.结果\n\n结果demo就是和下面一样做的一个动画效果\n![自己的动画\n](http://omy391n59.bkt.clouddn.com/image/addcart1905930-a9a2726a504ab56f.gif)\n\n\n可以直接使用拷贝这个类或者在Project中build.gradle添加\n````java\nallprojects{\n  repositories{\n    ...\n    maven{url\"https://jitpack.io\"}\n  }\n}\n````\n在Moudle中的build.gradle\n````java\n\ndependencies{\n  compile'com.github.jlcclidong:AddCartAniamtion:v3.0'\n}\n````\n直接使用AddCartAniamtion.AddToCart()完成动画，图片默认为填入ImageView的图片，想要自己更改的可以去源码中更改，本人水平有限，希望多交流。\n\n自己使用在RecycleView中没有问题。动画左右飞都木有问题。\n\n## 3.过程\n\n本身看到过一个用贝塞尔曲线来做这个效果的，效果不好(好吧，主要是自己数学实在不争气)\n身为程序员里物理学的最好的还是用物理公式来解决问题吧，加属性动画\n\n首先确定父控件，起始位置控件，以及终点位置控件位置\n\n````java\n//计算父控件的位置\nint[] parent =new int[2];\nrl.getLocationInWindow(parent);\n\n//计算起点控件位置\nint[] startLocation =new int[2];\nstartView.getLocationInWindow(startLocation);\n\n//计算终点控件位置\nint[] endLocation =new int[2];\nendView.getLocationInWindow(endLocation);\n````\n添加一个用于ImageView用于动画（注意确定添加的位置是一定要注意父控件的Padding值，因为这个错位了好久）\n````java\nfinal ImageView view =newImageView(mContext);\n\n//确定ImageView大小与传进来的ImageView相同\nRelativeLayout.LayoutParams params =new RelativeLayout.LayoutParams(startView.getWidth(),startView.getHeight());\n\n//获取ImageView的图片 并设置在新的ImageView上\nview.setImageDrawable(startView.getDrawable());\n\n//确定ImageView的位置与startView相同\nparams.leftMargin= startLocation[0] - parent[0] - rl.getPaddingLeft();\nparams.topMargin= startLocation[1] - parent[1] - rl.getPaddingTop();\n\nrl.addView(view,params);\n````\n好吧重点来了 我把初始的X轴Y轴速度设成相同的这样保证了上移的效果 然后根据时间 距离计算初速度 加速度 基本就用到了这么一个公式\n\n    s=vt+g*t*t/2\n````java\n//计算两者的横向X轴的距离差\nint XtoX = endLocation[0] - startLocation[0] + endView.getWidth() /2-\nstartView.getWidth() /2;\n\n//根据距离 时间 获取到对应的X轴的初速度\nfinal float xv = XtoX / time;\n\n//计算两者的横向X轴的距离差\nint YtoY = endLocation[1] - startLocation[1];\n\n//根据距离 时间 初始设置的Y轴初速度与X轴初速度相同 获取到竖直方向上的加速度\nfinal float g;\nif(xv>0) {\n  g = (YtoY + xv * time) / time / time *2;\n}else{\n  g = (YtoY - xv * time) / time / time *2;\n}\n设置属性动画了\n\nValueAnimator va =new ValueAnimator();\nva.setDuration(time *1000);\nva.setObjectValues(newPointF(0,0));\n\n//计算位置\n\nva.setEvaluator(new TypeEvaluator() {\n    @Override\n    public Point Fevaluate(float v,PointF pointF,PointF t1) {\n        PointF point =newPointF();\n        point.x= v *xv*time;\n        if(xv>0) {\n          point.y=g* (v *time) * (v *time) /2-xv* v *time;\n        }else{\n          point.y=g* (v *time) * (v *time) /2+xv* v *time;\n        }\n        return point;\n    }\n  });\n  //设置动画\nva.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n  @Override\n  public void onAnimationUpdate(ValueAnimator valueAnimator) {\n    PointF point = (PointF)valueAnimator.getAnimatedValue();\n    view.setTranslationX(point.x);\n    view.setTranslationY(point.y);\n  }\n});\n设置成功 开启动画 最后监听动画结束时remove这个ImageView\n````\n\n\n## 4.结束语\n\n写逻辑代码写的久了很多时候就会忘了一般的动画实现，这个动画实现虽然没什么含金量，但是很多项目中都可能会用得到可以直接使用还是很方便的，大神掠过，新接触android动画的还是可以看看的，代码内注释很详细。\n\n[源码在这里 GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库](https://github.com/jlcclidong/AddCartAniamtion)\n\n这个库的主要灵感感谢\n\n[Android 属性动画（Property Animation） 完全解析 （上） - Hongyang - 博客频道 - CSDN.NET](http://blog.csdn.net/lmj623565791/article/details/38067475)\n\n[把商品添加到购物车的动画效果（贝塞尔曲线） - Android_Study_OK的博客 - 博客频道 - CSDN.NET](http://blog.csdn.net/android_study_ok/article/details/51540759)\n","slug":"仿美团外卖添加商品的抛物线动画","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhhsy001062x2mhk5di94","content":"<h1 id=\"GitHub-jlcclidong-AddCartAniamtion-仿美团外卖添加动画的三方库\"><a href=\"#GitHub-jlcclidong-AddCartAniamtion-仿美团外卖添加动画的三方库\" class=\"headerlink\" title=\"GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库\"></a><a href=\"https://github.com/jlcclidong/AddCartAniamtion\" target=\"_blank\" rel=\"external\">GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库</a></h1><h2 id=\"1-初衷\"><a href=\"#1-初衷\" class=\"headerlink\" title=\"1.初衷\"></a>1.初衷</h2><p>公司要做一个点餐系统，要求类似要的美团外卖的点餐动画，就像下面这样一个抛物线（biu）</p>\n<p><img src=\"http://omy391n59.bkt.clouddn.com/image/addcart1905930-f419e78607521fb6.gif\" alt=\"美团的动画\"></p>\n<p>身为一个把时间节约全部投入到工作中的程序员，baidu geogle了好久发现没有这个动画效果的具体实现.有的效果也不是很好，只好自己写一个这样的效果了(搬砖去了)<br><a id=\"more\"></a></p>\n<h2 id=\"2-结果\"><a href=\"#2-结果\" class=\"headerlink\" title=\"2.结果\"></a>2.结果</h2><p>结果demo就是和下面一样做的一个动画效果<br><img src=\"http://omy391n59.bkt.clouddn.com/image/addcart1905930-a9a2726a504ab56f.gif\" alt=\"自己的动画\n\"></p>\n<p>可以直接使用拷贝这个类或者在Project中build.gradle添加<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">allprojects&#123;</div><div class=\"line\">  repositories&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    maven&#123;url<span class=\"string\">\"https://jitpack.io\"</span>&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Moudle中的build.gradle<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">dependencies&#123;</div><div class=\"line\">  compile<span class=\"string\">'com.github.jlcclidong:AddCartAniamtion:v3.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>直接使用AddCartAniamtion.AddToCart()完成动画，图片默认为填入ImageView的图片，想要自己更改的可以去源码中更改，本人水平有限，希望多交流。</p>\n<p>自己使用在RecycleView中没有问题。动画左右飞都木有问题。</p>\n<h2 id=\"3-过程\"><a href=\"#3-过程\" class=\"headerlink\" title=\"3.过程\"></a>3.过程</h2><p>本身看到过一个用贝塞尔曲线来做这个效果的，效果不好(好吧，主要是自己数学实在不争气)<br>身为程序员里物理学的最好的还是用物理公式来解决问题吧，加属性动画</p>\n<p>首先确定父控件，起始位置控件，以及终点位置控件位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//计算父控件的位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] parent =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">rl.getLocationInWindow(parent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算起点控件位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] startLocation =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">startView.getLocationInWindow(startLocation);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算终点控件位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] endLocation =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">endView.getLocationInWindow(endLocation);</div></pre></td></tr></table></figure>\n<p>添加一个用于ImageView用于动画（注意确定添加的位置是一定要注意父控件的Padding值，因为这个错位了好久）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ImageView view =newImageView(mContext);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//确定ImageView大小与传进来的ImageView相同</span></div><div class=\"line\">RelativeLayout.LayoutParams params =<span class=\"keyword\">new</span> RelativeLayout.LayoutParams(startView.getWidth(),startView.getHeight());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取ImageView的图片 并设置在新的ImageView上</span></div><div class=\"line\">view.setImageDrawable(startView.getDrawable());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//确定ImageView的位置与startView相同</span></div><div class=\"line\">params.leftMargin= startLocation[<span class=\"number\">0</span>] - parent[<span class=\"number\">0</span>] - rl.getPaddingLeft();</div><div class=\"line\">params.topMargin= startLocation[<span class=\"number\">1</span>] - parent[<span class=\"number\">1</span>] - rl.getPaddingTop();</div><div class=\"line\"></div><div class=\"line\">rl.addView(view,params);</div></pre></td></tr></table></figure></p>\n<p>好吧重点来了 我把初始的X轴Y轴速度设成相同的这样保证了上移的效果 然后根据时间 距离计算初速度 加速度 基本就用到了这么一个公式</p>\n<pre><code>s=vt+g*t*t/2\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//计算两者的横向X轴的距离差</span></div><div class=\"line\"><span class=\"keyword\">int</span> XtoX = endLocation[<span class=\"number\">0</span>] - startLocation[<span class=\"number\">0</span>] + endView.getWidth() /<span class=\"number\">2</span>-</div><div class=\"line\">startView.getWidth() /<span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据距离 时间 获取到对应的X轴的初速度</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xv = XtoX / time;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算两者的横向X轴的距离差</span></div><div class=\"line\"><span class=\"keyword\">int</span> YtoY = endLocation[<span class=\"number\">1</span>] - startLocation[<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据距离 时间 初始设置的Y轴初速度与X轴初速度相同 获取到竖直方向上的加速度</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> g;</div><div class=\"line\"><span class=\"keyword\">if</span>(xv&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">  g = (YtoY + xv * time) / time / time *<span class=\"number\">2</span>;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  g = (YtoY - xv * time) / time / time *<span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">设置属性动画了</div><div class=\"line\"></div><div class=\"line\">ValueAnimator va =<span class=\"keyword\">new</span> ValueAnimator();</div><div class=\"line\">va.setDuration(time *<span class=\"number\">1000</span>);</div><div class=\"line\">va.setObjectValues(newPointF(<span class=\"number\">0</span>,<span class=\"number\">0</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算位置</span></div><div class=\"line\"></div><div class=\"line\">va.setEvaluator(<span class=\"keyword\">new</span> TypeEvaluator() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Point <span class=\"title\">Fevaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> v,PointF pointF,PointF t1)</span> </span>&#123;</div><div class=\"line\">        PointF point =newPointF();</div><div class=\"line\">        point.x= v *xv*time;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xv&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">          point.y=g* (v *time) * (v *time) /<span class=\"number\">2</span>-xv* v *time;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          point.y=g* (v *time) * (v *time) /<span class=\"number\">2</span>+xv* v *time;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> point;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"comment\">//设置动画</span></div><div class=\"line\">va.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">    PointF point = (PointF)valueAnimator.getAnimatedValue();</div><div class=\"line\">    view.setTranslationX(point.x);</div><div class=\"line\">    view.setTranslationY(point.y);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">设置成功 开启动画 最后监听动画结束时remove这个ImageView</div></pre></td></tr></table></figure>\n<h2 id=\"4-结束语\"><a href=\"#4-结束语\" class=\"headerlink\" title=\"4.结束语\"></a>4.结束语</h2><p>写逻辑代码写的久了很多时候就会忘了一般的动画实现，这个动画实现虽然没什么含金量，但是很多项目中都可能会用得到可以直接使用还是很方便的，大神掠过，新接触android动画的还是可以看看的，代码内注释很详细。</p>\n<p><a href=\"https://github.com/jlcclidong/AddCartAniamtion\" target=\"_blank\" rel=\"external\">源码在这里 GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库</a></p>\n<p>这个库的主要灵感感谢</p>\n<p><a href=\"http://blog.csdn.net/lmj623565791/article/details/38067475\" target=\"_blank\" rel=\"external\">Android 属性动画（Property Animation） 完全解析 （上） - Hongyang - 博客频道 - CSDN.NET</a></p>\n<p><a href=\"http://blog.csdn.net/android_study_ok/article/details/51540759\" target=\"_blank\" rel=\"external\">把商品添加到购物车的动画效果（贝塞尔曲线） - Android_Study_OK的博客 - 博客频道 - CSDN.NET</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"GitHub-jlcclidong-AddCartAniamtion-仿美团外卖添加动画的三方库\"><a href=\"#GitHub-jlcclidong-AddCartAniamtion-仿美团外卖添加动画的三方库\" class=\"headerlink\" title=\"GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库\"></a><a href=\"https://github.com/jlcclidong/AddCartAniamtion\">GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库</a></h1><h2 id=\"1-初衷\"><a href=\"#1-初衷\" class=\"headerlink\" title=\"1.初衷\"></a>1.初衷</h2><p>公司要做一个点餐系统，要求类似要的美团外卖的点餐动画，就像下面这样一个抛物线（biu）</p>\n<p><img src=\"http://omy391n59.bkt.clouddn.com/image/addcart1905930-f419e78607521fb6.gif\" alt=\"美团的动画\"></p>\n<p>身为一个把时间节约全部投入到工作中的程序员，baidu geogle了好久发现没有这个动画效果的具体实现.有的效果也不是很好，只好自己写一个这样的效果了(搬砖去了)<br>","more":"</p>\n<h2 id=\"2-结果\"><a href=\"#2-结果\" class=\"headerlink\" title=\"2.结果\"></a>2.结果</h2><p>结果demo就是和下面一样做的一个动画效果<br><img src=\"http://omy391n59.bkt.clouddn.com/image/addcart1905930-a9a2726a504ab56f.gif\" alt=\"自己的动画\n\"></p>\n<p>可以直接使用拷贝这个类或者在Project中build.gradle添加<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">allprojects&#123;</div><div class=\"line\">  repositories&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    maven&#123;url<span class=\"string\">\"https://jitpack.io\"</span>&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Moudle中的build.gradle<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">dependencies&#123;</div><div class=\"line\">  compile<span class=\"string\">'com.github.jlcclidong:AddCartAniamtion:v3.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>直接使用AddCartAniamtion.AddToCart()完成动画，图片默认为填入ImageView的图片，想要自己更改的可以去源码中更改，本人水平有限，希望多交流。</p>\n<p>自己使用在RecycleView中没有问题。动画左右飞都木有问题。</p>\n<h2 id=\"3-过程\"><a href=\"#3-过程\" class=\"headerlink\" title=\"3.过程\"></a>3.过程</h2><p>本身看到过一个用贝塞尔曲线来做这个效果的，效果不好(好吧，主要是自己数学实在不争气)<br>身为程序员里物理学的最好的还是用物理公式来解决问题吧，加属性动画</p>\n<p>首先确定父控件，起始位置控件，以及终点位置控件位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//计算父控件的位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] parent =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">rl.getLocationInWindow(parent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算起点控件位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] startLocation =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">startView.getLocationInWindow(startLocation);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算终点控件位置</span></div><div class=\"line\"><span class=\"keyword\">int</span>[] endLocation =<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">endView.getLocationInWindow(endLocation);</div></pre></td></tr></table></figure>\n<p>添加一个用于ImageView用于动画（注意确定添加的位置是一定要注意父控件的Padding值，因为这个错位了好久）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> ImageView view =newImageView(mContext);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//确定ImageView大小与传进来的ImageView相同</span></div><div class=\"line\">RelativeLayout.LayoutParams params =<span class=\"keyword\">new</span> RelativeLayout.LayoutParams(startView.getWidth(),startView.getHeight());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取ImageView的图片 并设置在新的ImageView上</span></div><div class=\"line\">view.setImageDrawable(startView.getDrawable());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//确定ImageView的位置与startView相同</span></div><div class=\"line\">params.leftMargin= startLocation[<span class=\"number\">0</span>] - parent[<span class=\"number\">0</span>] - rl.getPaddingLeft();</div><div class=\"line\">params.topMargin= startLocation[<span class=\"number\">1</span>] - parent[<span class=\"number\">1</span>] - rl.getPaddingTop();</div><div class=\"line\"></div><div class=\"line\">rl.addView(view,params);</div></pre></td></tr></table></figure></p>\n<p>好吧重点来了 我把初始的X轴Y轴速度设成相同的这样保证了上移的效果 然后根据时间 距离计算初速度 加速度 基本就用到了这么一个公式</p>\n<pre><code>s=vt+g*t*t/2\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//计算两者的横向X轴的距离差</span></div><div class=\"line\"><span class=\"keyword\">int</span> XtoX = endLocation[<span class=\"number\">0</span>] - startLocation[<span class=\"number\">0</span>] + endView.getWidth() /<span class=\"number\">2</span>-</div><div class=\"line\">startView.getWidth() /<span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据距离 时间 获取到对应的X轴的初速度</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> xv = XtoX / time;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算两者的横向X轴的距离差</span></div><div class=\"line\"><span class=\"keyword\">int</span> YtoY = endLocation[<span class=\"number\">1</span>] - startLocation[<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//根据距离 时间 初始设置的Y轴初速度与X轴初速度相同 获取到竖直方向上的加速度</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span> g;</div><div class=\"line\"><span class=\"keyword\">if</span>(xv&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">  g = (YtoY + xv * time) / time / time *<span class=\"number\">2</span>;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  g = (YtoY - xv * time) / time / time *<span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">设置属性动画了</div><div class=\"line\"></div><div class=\"line\">ValueAnimator va =<span class=\"keyword\">new</span> ValueAnimator();</div><div class=\"line\">va.setDuration(time *<span class=\"number\">1000</span>);</div><div class=\"line\">va.setObjectValues(newPointF(<span class=\"number\">0</span>,<span class=\"number\">0</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//计算位置</span></div><div class=\"line\"></div><div class=\"line\">va.setEvaluator(<span class=\"keyword\">new</span> TypeEvaluator() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Point <span class=\"title\">Fevaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> v,PointF pointF,PointF t1)</span> </span>&#123;</div><div class=\"line\">        PointF point =newPointF();</div><div class=\"line\">        point.x= v *xv*time;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xv&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">          point.y=g* (v *time) * (v *time) /<span class=\"number\">2</span>-xv* v *time;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          point.y=g* (v *time) * (v *time) /<span class=\"number\">2</span>+xv* v *time;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> point;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"comment\">//设置动画</span></div><div class=\"line\">va.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">    PointF point = (PointF)valueAnimator.getAnimatedValue();</div><div class=\"line\">    view.setTranslationX(point.x);</div><div class=\"line\">    view.setTranslationY(point.y);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">设置成功 开启动画 最后监听动画结束时remove这个ImageView</div></pre></td></tr></table></figure>\n<h2 id=\"4-结束语\"><a href=\"#4-结束语\" class=\"headerlink\" title=\"4.结束语\"></a>4.结束语</h2><p>写逻辑代码写的久了很多时候就会忘了一般的动画实现，这个动画实现虽然没什么含金量，但是很多项目中都可能会用得到可以直接使用还是很方便的，大神掠过，新接触android动画的还是可以看看的，代码内注释很详细。</p>\n<p><a href=\"https://github.com/jlcclidong/AddCartAniamtion\">源码在这里 GitHub - jlcclidong/AddCartAniamtion: 仿美团外卖添加动画的三方库</a></p>\n<p>这个库的主要灵感感谢</p>\n<p><a href=\"http://blog.csdn.net/lmj623565791/article/details/38067475\">Android 属性动画（Property Animation） 完全解析 （上） - Hongyang - 博客频道 - CSDN.NET</a></p>\n<p><a href=\"http://blog.csdn.net/android_study_ok/article/details/51540759\">把商品添加到购物车的动画效果（贝塞尔曲线） - Android_Study_OK的博客 - 博客频道 - CSDN.NET</a></p>"},{"title":"停止 builiding","date":"2017-03-20T02:01:22.000Z","_content":"# 停止 building\n<br>\n在android studio 命令行中输入 gradlew --stop\n","source":"_posts/停止-builiding.md","raw":"---\ntitle: 停止 builiding\ndate: 2017-03-20 10:01:22\ncategories:\n- 笔记\n- android studio\ntags:\n- android studio\n- 笔记\n---\n# 停止 building\n<br>\n在android studio 命令行中输入 gradlew --stop\n","slug":"停止-builiding","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhhsz001362x2xcglw295","content":"<h1 id=\"停止-building\"><a href=\"#停止-building\" class=\"headerlink\" title=\"停止 building\"></a>停止 building</h1><p><br><br>在android studio 命令行中输入 gradlew –stop</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"停止-building\"><a href=\"#停止-building\" class=\"headerlink\" title=\"停止 building\"></a>停止 building</h1><p><br><br>在android studio 命令行中输入 gradlew –stop</p>\n"},{"title":"自定义控件","date":"2017-03-20T06:58:21.000Z","_content":"# 自定义控件学习笔记\n\n## 总体调用流程\n### ViewRootImpl 是View开始的入口\n### ViewRootImpl中会首先调用performTraversals()\n```java\nprivate void performTraversals() { //android19\n  ...\n  //获得最上层控件的MeasureSpec\n1672 int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n1673 int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n\n  // Ask host how big it wants to be\n1682 performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);\n...\n1744 performLayout(lp, desiredWindowWidth, desiredWindowHeight);\n...\n1883 performDraw(); //进入DecorView中最终调用View的Draw()\n}\n```\n\n```java\nprivate void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) {\n      mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n//例如LinearLayout的Onmeasure中就会调用走正常的测量流程\nvoid measureChildBeforeLayout(View child, int childIndex,\n            int widthMeasureSpec, int totalWidth, int heightMeasureSpec,\n            int totalHeight) {\n        measureChildWithMargins(child, widthMeasureSpec, totalWidth,\n                heightMeasureSpec, totalHeight);\n}\n```\n```java\nprivate void performLayout(WindowManager.LayoutParams lp, int desiredWindowWidth,\n            int desiredWindowHeight) {\n            host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight());\n}\n```\n\n\n## measure\n\n\n### ViewGroup 中measureChildWithMargins 调用 View的measure()\n```java\n  protected void measureChildWithMargins(View child,\n            int parentWidthMeasureSpec, int widthUsed,\n            int parentHeightMeasureSpec, int heightUsed) {\n               //获取child的LayoutParams\n        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed,\n                lp.width);\n        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed,\n                lp.height);\n                //调用child的measure方法\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    }\n```\n<!-- more -->\n其中getChildMeasureSpeac(int spec, int padding, int childDimension)\n```java\npublic static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n       //获取ViewGroup的参数\n       int specMode = MeasureSpec.getMode(spec);\n       int specSize = MeasureSpec.getSize(spec);\n       //获取可以使用的最大的size\n       int size = Math.max(0, specSize - padding);\n\n       int resultSize = 0;\n       int resultMode = 0;\n\n       //根据父控件的specMode分配子空间的大小 和 方式\n       switch (specMode) {\n       case MeasureSpec.EXACTLY:\n       //childDimension是child的具体设置高度 如果<0则是match 或者 wrap\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           }\n           break;\n\n       case MeasureSpec.AT_MOST:\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           }\n           break;\n\n       // 一般不会使用 这个代表不会管理子View的大小 例如ScrollView\n       case MeasureSpec.UNSPECIFIED:\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               //View.sUseZeroUnspecifiedMeasureSpec=true 5.0以下\n               //5.0 以上 就是 false\n               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n               resultMode = MeasureSpec.UNSPECIFIED;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n               resultMode = MeasureSpec.UNSPECIFIED;\n           }\n           break;\n       }\n       return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n   }\n```\n總的來説就是這樣的 MeasureSpec.UNSPECIFIED 5.0 以上以下有区别 一般不会用到\n\n |  Child \\ Parent        | MeasureSpec.EXACTLY    |  MeasureSpec.AT_MOST   | MeasureSpec.UNSPECIFIED|\n | :-------:              | :-----:                | :----:                 | :----:                 |\n | 具體尺寸   |  size=具體 MeasureSpec.EXACTLY  | size=具體 MeasureSpec.EXACTLY | size = 具體   MeasureSpec.EXACTLY |\n | WRAP_CONTENT |size=size MeasureSpec.AT_MOST| size=size MeasureSpec.AT_MOST |size=size MeasureSpec.UNSPECIFIED|\n | MATCH_PARENT| size=size MeasureSpec.EXACTLY | size=size MeasureSpec.AT_MOST | size=size MeasureSpec.UNSPECIFIED|\n\n ### view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法\n measure()---这个方法用于设定这个子View到底有多大，并且调用onMeasure()方法\n ```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n   }\n ```\ngetSuggestedMinimumHeight() 与 getSuggestedMinimumWidth() 方法雷同 用于计算 最小的值 背景与view自身设置的值\n```java\nprotected int getSuggestedMinimumWidth() {\n        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n    }\n```\ngetDefaultSize() 最终根据自身的MeasureSpec.Mode 来决定自身到底有多大\n```java\npublic static int getDefaultSize(int size, int measureSpec) {\n       int result = size;\n       int specMode = MeasureSpec.getMode(measureSpec);\n       int specSize = MeasureSpec.getSize(measureSpec);\n\n       switch (specMode) {\n       case MeasureSpec.UNSPECIFIED:  \n           result = size; //这个size是getSuggestedMinimumWidth中获得的最小度  一般=不会用到 但是在lsitView中高度设定不相符时使用min来设定可以确定高度\n           break;\n       case MeasureSpec.AT_MOST:\n       case MeasureSpec.EXACTLY:\n           result = specSize;\n           break;\n       }\n       return result;\n   }\n```\n### 重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态\n因为在WRAP_CONTENT情况下 measure的模式为MeasureSpec,AT_MOST 并且大小也与父控件大小相同 这样的话 WRAP_CONTENT就与MATCH_PARENT的效果相同 必须要重写设置大小\n```java\n@Override\n   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\n       int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n       int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n\n       int width = 100; //这个高度宽度需要计算 计算出自己到底需要多少\n       int height = 100;\n\n       if (widthMode == MeasureSpec.AT_MOST && heightMode == MeasureSpec.AT_MOST) { // 添加判断才可以确定具体尺寸来设置WRAP_CONTENT\n           setMeasuredDimension(width, height);\n       } else if (widthMode == MeasureSpec.AT_MOST) {\n           setMeasuredDimension(width, getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n       } else if (height == MeasureSpec.AT_MOST) {\n           setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), height);\n       } else {\n           super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n       }\n\n   }\n```\n### 知識點 在ScrollView嵌套ListView中我們經常這樣寫\n```java\n@Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int height = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE>>2, MeasureSpec.AT_MOST);\n        super.onMeasure(widthMeasureSpec, height);\n    }\n```\n就是因爲本身他的父控件ScrollView屬性是MeasureSpec.UNSPECIFIED listview本身的屬性也變成這樣，需要我們手動來更改成爲MeasureSpec.AT_MOST,讓listView重新計算自己的高度--onMeasure()中 heightSize就是我們傳入的30位的最大值\n```java\nif (heightMode == MeasureSpec.AT_MOST) {\n            // TODO: after first layout we should maybe start at the first visible position, not 0\n            heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);\n        }\n```\n將方法中除了我們本身傳過去的heightSize以外的代碼刪除 發現本身就命名爲maxHeight，如果 測量的高度不大於我們的maxHeight就將測量值(所有子View的高度)返回，所以這樣重寫之後，listView默認展示所有的條目，如果不是最大值那麽如果測量值大於你設定的值那麽也將顯示不全\n```java\nfinal int measureHeightOfChildren(int widthMeasureSpec, int startPosition, int endPosition,\n           int maxHeight, int disallowPartialChildPosition) {\n\n       // Include the padding of the list\n       int returnedHeight = mListPadding.top + mListPadding.bottom;\n                      .\n                      .\n                      .\n       for (i = startPosition; i <= endPosition; ++i) {\n\n           returnedHeight += child.getMeasuredHeight();\n\n           if (returnedHeight >= maxHeight) {\n               // We went over, figure out which height to return.  If returnedHeight > maxHeight,\n               // then the i'th position did not fit completely.\n               return (disallowPartialChildPosition >= 0) // Disallowing is enabled (> -1)\n                           && (i > disallowPartialChildPosition) // We've past the min pos\n                           && (prevHeightWithoutPartialChild > 0) // We have a prev height\n                           && (returnedHeight != maxHeight) // i'th child did not fit completely\n                       ? prevHeightWithoutPartialChild\n                       : maxHeight;\n           }\n\n           if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {\n               prevHeightWithoutPartialChild = returnedHeight;\n           }\n       }\n\n       // At this point, we went through the range of children, and they each\n       // completely fit, so return the returnedHeight\n       return returnedHeight;\n   }\n```\n## layout\n### onlayout() 這個方法是ViewGroup方法需要重寫的方法\n首先是View的layout()方法\n```java\npublic void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n                `\n                `\n                `\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            onLayout(changed, l, t, r, b);\n                `\n                `\n                ``\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n    }\n```\n判斷changed setOpticalFrame 最終走的也是setFrame 判斷位置是否發生了變化\n```java\nprotected boolean setFrame(int left, int top, int right, int bottom) {\n        boolean changed = false;\n        if (mLeft != left || mRight != right || mTop != top || mBottom != bottom) {\n            changed = true;\n              `\n              `\n        return changed;\n    }\n```\n發生變化走onLayout方法====viewGroup調用onLayout方法 在各個的onlayou方法中調用view的layou方法確定位置\n### 總結\n父View的layout方法調用父View的onlyout調用子View的layout\n\n父view的onLayout來確定子View的具體位置 子View的layout方法來確定滋生的位置  \n\n其中所有的位置都是相當於父控件的 包括View.getleft 等方法也是相對於父控件的\n","source":"_posts/自定义控件.md","raw":"---\ntitle: 自定义控件\ndate: 2017-03-20 14:58:21\ntags:\n- 笔记\n- view\ncategories:\n- 笔记\n- 自定义view\n---\n# 自定义控件学习笔记\n\n## 总体调用流程\n### ViewRootImpl 是View开始的入口\n### ViewRootImpl中会首先调用performTraversals()\n```java\nprivate void performTraversals() { //android19\n  ...\n  //获得最上层控件的MeasureSpec\n1672 int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n1673 int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n\n  // Ask host how big it wants to be\n1682 performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);\n...\n1744 performLayout(lp, desiredWindowWidth, desiredWindowHeight);\n...\n1883 performDraw(); //进入DecorView中最终调用View的Draw()\n}\n```\n\n```java\nprivate void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) {\n      mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n//例如LinearLayout的Onmeasure中就会调用走正常的测量流程\nvoid measureChildBeforeLayout(View child, int childIndex,\n            int widthMeasureSpec, int totalWidth, int heightMeasureSpec,\n            int totalHeight) {\n        measureChildWithMargins(child, widthMeasureSpec, totalWidth,\n                heightMeasureSpec, totalHeight);\n}\n```\n```java\nprivate void performLayout(WindowManager.LayoutParams lp, int desiredWindowWidth,\n            int desiredWindowHeight) {\n            host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight());\n}\n```\n\n\n## measure\n\n\n### ViewGroup 中measureChildWithMargins 调用 View的measure()\n```java\n  protected void measureChildWithMargins(View child,\n            int parentWidthMeasureSpec, int widthUsed,\n            int parentHeightMeasureSpec, int heightUsed) {\n               //获取child的LayoutParams\n        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed,\n                lp.width);\n        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed,\n                lp.height);\n                //调用child的measure方法\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    }\n```\n<!-- more -->\n其中getChildMeasureSpeac(int spec, int padding, int childDimension)\n```java\npublic static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n       //获取ViewGroup的参数\n       int specMode = MeasureSpec.getMode(spec);\n       int specSize = MeasureSpec.getSize(spec);\n       //获取可以使用的最大的size\n       int size = Math.max(0, specSize - padding);\n\n       int resultSize = 0;\n       int resultMode = 0;\n\n       //根据父控件的specMode分配子空间的大小 和 方式\n       switch (specMode) {\n       case MeasureSpec.EXACTLY:\n       //childDimension是child的具体设置高度 如果<0则是match 或者 wrap\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           }\n           break;\n\n       case MeasureSpec.AT_MOST:\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = size;\n               resultMode = MeasureSpec.AT_MOST;\n           }\n           break;\n\n       // 一般不会使用 这个代表不会管理子View的大小 例如ScrollView\n       case MeasureSpec.UNSPECIFIED:\n           if (childDimension >= 0) {\n               resultSize = childDimension;\n               resultMode = MeasureSpec.EXACTLY;\n           } else if (childDimension == LayoutParams.MATCH_PARENT) {\n               //View.sUseZeroUnspecifiedMeasureSpec=true 5.0以下\n               //5.0 以上 就是 false\n               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n               resultMode = MeasureSpec.UNSPECIFIED;\n           } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n               resultMode = MeasureSpec.UNSPECIFIED;\n           }\n           break;\n       }\n       return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n   }\n```\n總的來説就是這樣的 MeasureSpec.UNSPECIFIED 5.0 以上以下有区别 一般不会用到\n\n |  Child \\ Parent        | MeasureSpec.EXACTLY    |  MeasureSpec.AT_MOST   | MeasureSpec.UNSPECIFIED|\n | :-------:              | :-----:                | :----:                 | :----:                 |\n | 具體尺寸   |  size=具體 MeasureSpec.EXACTLY  | size=具體 MeasureSpec.EXACTLY | size = 具體   MeasureSpec.EXACTLY |\n | WRAP_CONTENT |size=size MeasureSpec.AT_MOST| size=size MeasureSpec.AT_MOST |size=size MeasureSpec.UNSPECIFIED|\n | MATCH_PARENT| size=size MeasureSpec.EXACTLY | size=size MeasureSpec.AT_MOST | size=size MeasureSpec.UNSPECIFIED|\n\n ### view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法\n measure()---这个方法用于设定这个子View到底有多大，并且调用onMeasure()方法\n ```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n   }\n ```\ngetSuggestedMinimumHeight() 与 getSuggestedMinimumWidth() 方法雷同 用于计算 最小的值 背景与view自身设置的值\n```java\nprotected int getSuggestedMinimumWidth() {\n        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n    }\n```\ngetDefaultSize() 最终根据自身的MeasureSpec.Mode 来决定自身到底有多大\n```java\npublic static int getDefaultSize(int size, int measureSpec) {\n       int result = size;\n       int specMode = MeasureSpec.getMode(measureSpec);\n       int specSize = MeasureSpec.getSize(measureSpec);\n\n       switch (specMode) {\n       case MeasureSpec.UNSPECIFIED:  \n           result = size; //这个size是getSuggestedMinimumWidth中获得的最小度  一般=不会用到 但是在lsitView中高度设定不相符时使用min来设定可以确定高度\n           break;\n       case MeasureSpec.AT_MOST:\n       case MeasureSpec.EXACTLY:\n           result = specSize;\n           break;\n       }\n       return result;\n   }\n```\n### 重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态\n因为在WRAP_CONTENT情况下 measure的模式为MeasureSpec,AT_MOST 并且大小也与父控件大小相同 这样的话 WRAP_CONTENT就与MATCH_PARENT的效果相同 必须要重写设置大小\n```java\n@Override\n   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\n       int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n       int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n\n       int width = 100; //这个高度宽度需要计算 计算出自己到底需要多少\n       int height = 100;\n\n       if (widthMode == MeasureSpec.AT_MOST && heightMode == MeasureSpec.AT_MOST) { // 添加判断才可以确定具体尺寸来设置WRAP_CONTENT\n           setMeasuredDimension(width, height);\n       } else if (widthMode == MeasureSpec.AT_MOST) {\n           setMeasuredDimension(width, getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n       } else if (height == MeasureSpec.AT_MOST) {\n           setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), height);\n       } else {\n           super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n       }\n\n   }\n```\n### 知識點 在ScrollView嵌套ListView中我們經常這樣寫\n```java\n@Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int height = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE>>2, MeasureSpec.AT_MOST);\n        super.onMeasure(widthMeasureSpec, height);\n    }\n```\n就是因爲本身他的父控件ScrollView屬性是MeasureSpec.UNSPECIFIED listview本身的屬性也變成這樣，需要我們手動來更改成爲MeasureSpec.AT_MOST,讓listView重新計算自己的高度--onMeasure()中 heightSize就是我們傳入的30位的最大值\n```java\nif (heightMode == MeasureSpec.AT_MOST) {\n            // TODO: after first layout we should maybe start at the first visible position, not 0\n            heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);\n        }\n```\n將方法中除了我們本身傳過去的heightSize以外的代碼刪除 發現本身就命名爲maxHeight，如果 測量的高度不大於我們的maxHeight就將測量值(所有子View的高度)返回，所以這樣重寫之後，listView默認展示所有的條目，如果不是最大值那麽如果測量值大於你設定的值那麽也將顯示不全\n```java\nfinal int measureHeightOfChildren(int widthMeasureSpec, int startPosition, int endPosition,\n           int maxHeight, int disallowPartialChildPosition) {\n\n       // Include the padding of the list\n       int returnedHeight = mListPadding.top + mListPadding.bottom;\n                      .\n                      .\n                      .\n       for (i = startPosition; i <= endPosition; ++i) {\n\n           returnedHeight += child.getMeasuredHeight();\n\n           if (returnedHeight >= maxHeight) {\n               // We went over, figure out which height to return.  If returnedHeight > maxHeight,\n               // then the i'th position did not fit completely.\n               return (disallowPartialChildPosition >= 0) // Disallowing is enabled (> -1)\n                           && (i > disallowPartialChildPosition) // We've past the min pos\n                           && (prevHeightWithoutPartialChild > 0) // We have a prev height\n                           && (returnedHeight != maxHeight) // i'th child did not fit completely\n                       ? prevHeightWithoutPartialChild\n                       : maxHeight;\n           }\n\n           if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {\n               prevHeightWithoutPartialChild = returnedHeight;\n           }\n       }\n\n       // At this point, we went through the range of children, and they each\n       // completely fit, so return the returnedHeight\n       return returnedHeight;\n   }\n```\n## layout\n### onlayout() 這個方法是ViewGroup方法需要重寫的方法\n首先是View的layout()方法\n```java\npublic void layout(int l, int t, int r, int b) {\n        if ((mPrivateFlags3 & PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {\n            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n                `\n                `\n                `\n        boolean changed = isLayoutModeOptical(mParent) ?\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\n\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\n            onLayout(changed, l, t, r, b);\n                `\n                `\n                ``\n        }\n\n        mPrivateFlags &= ~PFLAG_FORCE_LAYOUT;\n        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;\n    }\n```\n判斷changed setOpticalFrame 最終走的也是setFrame 判斷位置是否發生了變化\n```java\nprotected boolean setFrame(int left, int top, int right, int bottom) {\n        boolean changed = false;\n        if (mLeft != left || mRight != right || mTop != top || mBottom != bottom) {\n            changed = true;\n              `\n              `\n        return changed;\n    }\n```\n發生變化走onLayout方法====viewGroup調用onLayout方法 在各個的onlayou方法中調用view的layou方法確定位置\n### 總結\n父View的layout方法調用父View的onlyout調用子View的layout\n\n父view的onLayout來確定子View的具體位置 子View的layout方法來確定滋生的位置  \n\n其中所有的位置都是相當於父控件的 包括View.getleft 等方法也是相對於父控件的\n","slug":"自定义控件","published":1,"updated":"2017-06-24T17:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cuhht1001862x2kleph0th","content":"<h1 id=\"自定义控件学习笔记\"><a href=\"#自定义控件学习笔记\" class=\"headerlink\" title=\"自定义控件学习笔记\"></a>自定义控件学习笔记</h1><h2 id=\"总体调用流程\"><a href=\"#总体调用流程\" class=\"headerlink\" title=\"总体调用流程\"></a>总体调用流程</h2><h3 id=\"ViewRootImpl-是View开始的入口\"><a href=\"#ViewRootImpl-是View开始的入口\" class=\"headerlink\" title=\"ViewRootImpl 是View开始的入口\"></a>ViewRootImpl 是View开始的入口</h3><h3 id=\"ViewRootImpl中会首先调用performTraversals\"><a href=\"#ViewRootImpl中会首先调用performTraversals\" class=\"headerlink\" title=\"ViewRootImpl中会首先调用performTraversals()\"></a>ViewRootImpl中会首先调用performTraversals()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//android19</span></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//获得最上层控件的MeasureSpec</span></div><div class=\"line\"><span class=\"number\">1672</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class=\"line\"><span class=\"number\">1673</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Ask host how big it wants to be</span></div><div class=\"line\"><span class=\"number\">1682</span> performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1744</span> performLayout(lp, desiredWindowWidth, desiredWindowHeight);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1883</span> performDraw(); <span class=\"comment\">//进入DecorView中最终调用View的Draw()</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> childWidthMeasureSpec, <span class=\"keyword\">int</span> childHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">      mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//例如LinearLayout的Onmeasure中就会调用走正常的测量流程</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">measureChildBeforeLayout</span><span class=\"params\">(View child, <span class=\"keyword\">int</span> childIndex,</span></span></div><div class=\"line\">            <span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> totalWidth, <span class=\"keyword\">int</span> heightMeasureSpec,</div><div class=\"line\">            <span class=\"keyword\">int</span> totalHeight) &#123;</div><div class=\"line\">        measureChildWithMargins(child, widthMeasureSpec, totalWidth,</div><div class=\"line\">                heightMeasureSpec, totalHeight);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performLayout</span><span class=\"params\">(WindowManager.LayoutParams lp, <span class=\"keyword\">int</span> desiredWindowWidth,</span></span></div><div class=\"line\">            <span class=\"keyword\">int</span> desiredWindowHeight) &#123;</div><div class=\"line\">            host.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"measure\"><a href=\"#measure\" class=\"headerlink\" title=\"measure\"></a>measure</h2><h3 id=\"ViewGroup-中measureChildWithMargins-调用-View的measure\"><a href=\"#ViewGroup-中measureChildWithMargins-调用-View的measure\" class=\"headerlink\" title=\"ViewGroup 中measureChildWithMargins 调用 View的measure()\"></a>ViewGroup 中measureChildWithMargins 调用 View的measure()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</span></span></div><div class=\"line\">          <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</div><div class=\"line\">          <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed) &#123;</div><div class=\"line\">             <span class=\"comment\">//获取child的LayoutParams</span></div><div class=\"line\">      <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">              mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed,</div><div class=\"line\">              lp.width);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">              mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed,</div><div class=\"line\">              lp.height);</div><div class=\"line\">              <span class=\"comment\">//调用child的measure方法</span></div><div class=\"line\">      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>其中getChildMeasureSpeac(int spec, int padding, int childDimension)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//获取ViewGroup的参数</span></div><div class=\"line\">       <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">       <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\">       <span class=\"comment\">//获取可以使用的最大的size</span></div><div class=\"line\">       <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//根据父控件的specMode分配子空间的大小 和 方式</span></div><div class=\"line\">       <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">       <span class=\"comment\">//childDimension是child的具体设置高度 如果&lt;0则是match 或者 wrap</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 一般不会使用 这个代表不会管理子View的大小 例如ScrollView</span></div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//View.sUseZeroUnspecifiedMeasureSpec=true 5.0以下</span></div><div class=\"line\">               <span class=\"comment\">//5.0 以上 就是 false</span></div><div class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>總的來説就是這樣的 MeasureSpec.UNSPECIFIED 5.0 以上以下有区别 一般不会用到</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Child \\ Parent</th>\n<th style=\"text-align:center\">MeasureSpec.EXACTLY</th>\n<th style=\"text-align:center\">MeasureSpec.AT_MOST</th>\n<th style=\"text-align:center\">MeasureSpec.UNSPECIFIED</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">具體尺寸</td>\n<td style=\"text-align:center\">size=具體 MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size=具體 MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size = 具體   MeasureSpec.EXACTLY</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WRAP_CONTENT</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.UNSPECIFIED</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MATCH_PARENT</td>\n<td style=\"text-align:center\">size=size MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.UNSPECIFIED</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"view的measure-childWidthMeasureSpec-childHeightMeasureSpec-方法\"><a href=\"#view的measure-childWidthMeasureSpec-childHeightMeasureSpec-方法\" class=\"headerlink\" title=\"view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法\"></a>view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法</h3><p> measure()—这个方法用于设定这个子View到底有多大，并且调用onMeasure()方法<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">      setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">              getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>getSuggestedMinimumHeight() 与 getSuggestedMinimumWidth() 方法雷同 用于计算 最小的值 背景与view自身设置的值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>getDefaultSize() 最终根据自身的MeasureSpec.Mode 来决定自身到底有多大<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">       <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">       <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:  </div><div class=\"line\">           result = size; <span class=\"comment\">//这个size是getSuggestedMinimumWidth中获得的最小度  一般=不会用到 但是在lsitView中高度设定不相符时使用min来设定可以确定高度</span></div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">           result = specSize;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> result;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"重点强调的是-自定义控件的onmeasure方法重写-必须设定WRAP-CONTENT时的状态\"><a href=\"#重点强调的是-自定义控件的onmeasure方法重写-必须设定WRAP-CONTENT时的状态\" class=\"headerlink\" title=\"重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态\"></a>重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态</h3><p>因为在WRAP_CONTENT情况下 measure的模式为MeasureSpec,AT_MOST 并且大小也与父控件大小相同 这样的话 WRAP_CONTENT就与MATCH_PARENT的效果相同 必须要重写设置大小<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">       <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> width = <span class=\"number\">100</span>; <span class=\"comment\">//这个高度宽度需要计算 计算出自己到底需要多少</span></div><div class=\"line\">       <span class=\"keyword\">int</span> height = <span class=\"number\">100</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123; <span class=\"comment\">// 添加判断才可以确定具体尺寸来设置WRAP_CONTENT</span></div><div class=\"line\">           setMeasuredDimension(width, height);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">           setMeasuredDimension(width, getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (height == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">           setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), height);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"知識點-在ScrollView嵌套ListView中我們經常這樣寫\"><a href=\"#知識點-在ScrollView嵌套ListView中我們經常這樣寫\" class=\"headerlink\" title=\"知識點 在ScrollView嵌套ListView中我們經常這樣寫\"></a>知識點 在ScrollView嵌套ListView中我們經常這樣寫</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> height = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE&gt;&gt;<span class=\"number\">2</span>, MeasureSpec.AT_MOST);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, height);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>就是因爲本身他的父控件ScrollView屬性是MeasureSpec.UNSPECIFIED listview本身的屬性也變成這樣，需要我們手動來更改成爲MeasureSpec.AT_MOST,讓listView重新計算自己的高度–onMeasure()中 heightSize就是我們傳入的30位的最大值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> after first layout we should maybe start at the first visible position, not 0</span></div><div class=\"line\">            heightSize = measureHeightOfChildren(widthMeasureSpec, <span class=\"number\">0</span>, NO_POSITION, heightSize, -<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>將方法中除了我們本身傳過去的heightSize以外的代碼刪除 發現本身就命名爲maxHeight，如果 測量的高度不大於我們的maxHeight就將測量值(所有子View的高度)返回，所以這樣重寫之後，listView默認展示所有的條目，如果不是最大值那麽如果測量值大於你設定的值那麽也將顯示不全<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">measureHeightOfChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> startPosition, <span class=\"keyword\">int</span> endPosition,</span></span></div><div class=\"line\">           <span class=\"keyword\">int</span> maxHeight, <span class=\"keyword\">int</span> disallowPartialChildPosition) &#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Include the padding of the list</span></div><div class=\"line\">       <span class=\"keyword\">int</span> returnedHeight = mListPadding.top + mListPadding.bottom;</div><div class=\"line\">                      .</div><div class=\"line\">                      .</div><div class=\"line\">                      .</div><div class=\"line\">       <span class=\"keyword\">for</span> (i = startPosition; i &lt;= endPosition; ++i) &#123;</div><div class=\"line\"></div><div class=\"line\">           returnedHeight += child.getMeasuredHeight();</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (returnedHeight &gt;= maxHeight) &#123;</div><div class=\"line\">               <span class=\"comment\">// We went over, figure out which height to return.  If returnedHeight &gt; maxHeight,</span></div><div class=\"line\">               <span class=\"comment\">// then the i'th position did not fit completely.</span></div><div class=\"line\">               <span class=\"keyword\">return</span> (disallowPartialChildPosition &gt;= <span class=\"number\">0</span>) <span class=\"comment\">// Disallowing is enabled (&gt; -1)</span></div><div class=\"line\">                           &amp;&amp; (i &gt; disallowPartialChildPosition) <span class=\"comment\">// We've past the min pos</span></div><div class=\"line\">                           &amp;&amp; (prevHeightWithoutPartialChild &gt; <span class=\"number\">0</span>) <span class=\"comment\">// We have a prev height</span></div><div class=\"line\">                           &amp;&amp; (returnedHeight != maxHeight) <span class=\"comment\">// i'th child did not fit completely</span></div><div class=\"line\">                       ? prevHeightWithoutPartialChild</div><div class=\"line\">                       : maxHeight;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> ((disallowPartialChildPosition &gt;= <span class=\"number\">0</span>) &amp;&amp; (i &gt;= disallowPartialChildPosition)) &#123;</div><div class=\"line\">               prevHeightWithoutPartialChild = returnedHeight;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// At this point, we went through the range of children, and they each</span></div><div class=\"line\">       <span class=\"comment\">// completely fit, so return the returnedHeight</span></div><div class=\"line\">       <span class=\"keyword\">return</span> returnedHeight;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h2><h3 id=\"onlayout-這個方法是ViewGroup方法需要重寫的方法\"><a href=\"#onlayout-這個方法是ViewGroup方法需要重寫的方法\" class=\"headerlink\" title=\"onlayout() 這個方法是ViewGroup方法需要重寫的方法\"></a>onlayout() 這個方法是ViewGroup方法需要重寫的方法</h3><p>首先是View的layout()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class=\"line\">            mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">        &#125;</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">        <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class=\"line\">                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class=\"line\">            onLayout(changed, l, t, r, b);</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">                ``</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class=\"line\">        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>判斷changed setOpticalFrame 最終走的也是setFrame 判斷位置是否發生了變化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setFrame</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mLeft != left || mRight != right || mTop != top || mBottom != bottom) &#123;</div><div class=\"line\">            changed = <span class=\"keyword\">true</span>;</div><div class=\"line\">              `</div><div class=\"line\">              `</div><div class=\"line\">        <span class=\"keyword\">return</span> changed;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>發生變化走onLayout方法====viewGroup調用onLayout方法 在各個的onlayou方法中調用view的layou方法確定位置</p>\n<h3 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h3><p>父View的layout方法調用父View的onlyout調用子View的layout</p>\n<p>父view的onLayout來確定子View的具體位置 子View的layout方法來確定滋生的位置  </p>\n<p>其中所有的位置都是相當於父控件的 包括View.getleft 等方法也是相對於父控件的</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"自定义控件学习笔记\"><a href=\"#自定义控件学习笔记\" class=\"headerlink\" title=\"自定义控件学习笔记\"></a>自定义控件学习笔记</h1><h2 id=\"总体调用流程\"><a href=\"#总体调用流程\" class=\"headerlink\" title=\"总体调用流程\"></a>总体调用流程</h2><h3 id=\"ViewRootImpl-是View开始的入口\"><a href=\"#ViewRootImpl-是View开始的入口\" class=\"headerlink\" title=\"ViewRootImpl 是View开始的入口\"></a>ViewRootImpl 是View开始的入口</h3><h3 id=\"ViewRootImpl中会首先调用performTraversals\"><a href=\"#ViewRootImpl中会首先调用performTraversals\" class=\"headerlink\" title=\"ViewRootImpl中会首先调用performTraversals()\"></a>ViewRootImpl中会首先调用performTraversals()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//android19</span></div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//获得最上层控件的MeasureSpec</span></div><div class=\"line\"><span class=\"number\">1672</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class=\"line\"><span class=\"number\">1673</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Ask host how big it wants to be</span></div><div class=\"line\"><span class=\"number\">1682</span> performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1744</span> performLayout(lp, desiredWindowWidth, desiredWindowHeight);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1883</span> performDraw(); <span class=\"comment\">//进入DecorView中最终调用View的Draw()</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> childWidthMeasureSpec, <span class=\"keyword\">int</span> childHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">      mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//例如LinearLayout的Onmeasure中就会调用走正常的测量流程</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">measureChildBeforeLayout</span><span class=\"params\">(View child, <span class=\"keyword\">int</span> childIndex,</div><div class=\"line\">            <span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> totalWidth, <span class=\"keyword\">int</span> heightMeasureSpec,</div><div class=\"line\">            <span class=\"keyword\">int</span> totalHeight)</span> </span>&#123;</div><div class=\"line\">        measureChildWithMargins(child, widthMeasureSpec, totalWidth,</div><div class=\"line\">                heightMeasureSpec, totalHeight);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performLayout</span><span class=\"params\">(WindowManager.LayoutParams lp, <span class=\"keyword\">int</span> desiredWindowWidth,</div><div class=\"line\">            <span class=\"keyword\">int</span> desiredWindowHeight)</span> </span>&#123;</div><div class=\"line\">            host.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"measure\"><a href=\"#measure\" class=\"headerlink\" title=\"measure\"></a>measure</h2><h3 id=\"ViewGroup-中measureChildWithMargins-调用-View的measure\"><a href=\"#ViewGroup-中measureChildWithMargins-调用-View的measure\" class=\"headerlink\" title=\"ViewGroup 中measureChildWithMargins 调用 View的measure()\"></a>ViewGroup 中measureChildWithMargins 调用 View的measure()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</div><div class=\"line\">          <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</div><div class=\"line\">          <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed)</span> </span>&#123;</div><div class=\"line\">             <span class=\"comment\">//获取child的LayoutParams</span></div><div class=\"line\">      <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">              mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin + widthUsed,</div><div class=\"line\">              lp.width);</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">              mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin + heightUsed,</div><div class=\"line\">              lp.height);</div><div class=\"line\">              <span class=\"comment\">//调用child的measure方法</span></div><div class=\"line\">      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>","more":"<p>其中getChildMeasureSpeac(int spec, int padding, int childDimension)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//获取ViewGroup的参数</span></div><div class=\"line\">       <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">       <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\">       <span class=\"comment\">//获取可以使用的最大的size</span></div><div class=\"line\">       <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//根据父控件的specMode分配子空间的大小 和 方式</span></div><div class=\"line\">       <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">       <span class=\"comment\">//childDimension是child的具体设置高度 如果&lt;0则是match 或者 wrap</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = size;</div><div class=\"line\">               resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 一般不会使用 这个代表不会管理子View的大小 例如ScrollView</span></div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">           <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               resultSize = childDimension;</div><div class=\"line\">               resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">               <span class=\"comment\">//View.sUseZeroUnspecifiedMeasureSpec=true 5.0以下</span></div><div class=\"line\">               <span class=\"comment\">//5.0 以上 就是 false</span></div><div class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">               resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">               resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>總的來説就是這樣的 MeasureSpec.UNSPECIFIED 5.0 以上以下有区别 一般不会用到</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Child \\ Parent</th>\n<th style=\"text-align:center\">MeasureSpec.EXACTLY</th>\n<th style=\"text-align:center\">MeasureSpec.AT_MOST</th>\n<th style=\"text-align:center\">MeasureSpec.UNSPECIFIED</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">具體尺寸</td>\n<td style=\"text-align:center\">size=具體 MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size=具體 MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size = 具體   MeasureSpec.EXACTLY</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WRAP_CONTENT</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.UNSPECIFIED</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MATCH_PARENT</td>\n<td style=\"text-align:center\">size=size MeasureSpec.EXACTLY</td>\n<td style=\"text-align:center\">size=size MeasureSpec.AT_MOST</td>\n<td style=\"text-align:center\">size=size MeasureSpec.UNSPECIFIED</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"view的measure-childWidthMeasureSpec-childHeightMeasureSpec-方法\"><a href=\"#view的measure-childWidthMeasureSpec-childHeightMeasureSpec-方法\" class=\"headerlink\" title=\"view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法\"></a>view的measure(childWidthMeasureSpec, childHeightMeasureSpec)方法</h3><p> measure()—这个方法用于设定这个子View到底有多大，并且调用onMeasure()方法<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">      setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">              getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>getSuggestedMinimumHeight() 与 getSuggestedMinimumWidth() 方法雷同 用于计算 最小的值 背景与view自身设置的值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>getDefaultSize() 最终根据自身的MeasureSpec.Mode 来决定自身到底有多大<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">       <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">       <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:  </div><div class=\"line\">           result = size; <span class=\"comment\">//这个size是getSuggestedMinimumWidth中获得的最小度  一般=不会用到 但是在lsitView中高度设定不相符时使用min来设定可以确定高度</span></div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">           result = specSize;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> result;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"重点强调的是-自定义控件的onmeasure方法重写-必须设定WRAP-CONTENT时的状态\"><a href=\"#重点强调的是-自定义控件的onmeasure方法重写-必须设定WRAP-CONTENT时的状态\" class=\"headerlink\" title=\"重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态\"></a>重点强调的是 自定义控件的onmeasure方法重写 必须设定WRAP_CONTENT时的状态</h3><p>因为在WRAP_CONTENT情况下 measure的模式为MeasureSpec,AT_MOST 并且大小也与父控件大小相同 这样的话 WRAP_CONTENT就与MATCH_PARENT的效果相同 必须要重写设置大小<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">       <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> width = <span class=\"number\">100</span>; <span class=\"comment\">//这个高度宽度需要计算 计算出自己到底需要多少</span></div><div class=\"line\">       <span class=\"keyword\">int</span> height = <span class=\"number\">100</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123; <span class=\"comment\">// 添加判断才可以确定具体尺寸来设置WRAP_CONTENT</span></div><div class=\"line\">           setMeasuredDimension(width, height);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">           setMeasuredDimension(width, getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (height == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">           setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), height);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"知識點-在ScrollView嵌套ListView中我們經常這樣寫\"><a href=\"#知識點-在ScrollView嵌套ListView中我們經常這樣寫\" class=\"headerlink\" title=\"知識點 在ScrollView嵌套ListView中我們經常這樣寫\"></a>知識點 在ScrollView嵌套ListView中我們經常這樣寫</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> height = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE&gt;&gt;<span class=\"number\">2</span>, MeasureSpec.AT_MOST);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, height);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>就是因爲本身他的父控件ScrollView屬性是MeasureSpec.UNSPECIFIED listview本身的屬性也變成這樣，需要我們手動來更改成爲MeasureSpec.AT_MOST,讓listView重新計算自己的高度–onMeasure()中 heightSize就是我們傳入的30位的最大值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> after first layout we should maybe start at the first visible position, not 0</span></div><div class=\"line\">            heightSize = measureHeightOfChildren(widthMeasureSpec, <span class=\"number\">0</span>, NO_POSITION, heightSize, -<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>將方法中除了我們本身傳過去的heightSize以外的代碼刪除 發現本身就命名爲maxHeight，如果 測量的高度不大於我們的maxHeight就將測量值(所有子View的高度)返回，所以這樣重寫之後，listView默認展示所有的條目，如果不是最大值那麽如果測量值大於你設定的值那麽也將顯示不全<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">measureHeightOfChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> startPosition, <span class=\"keyword\">int</span> endPosition,</div><div class=\"line\">           <span class=\"keyword\">int</span> maxHeight, <span class=\"keyword\">int</span> disallowPartialChildPosition)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Include the padding of the list</span></div><div class=\"line\">       <span class=\"keyword\">int</span> returnedHeight = mListPadding.top + mListPadding.bottom;</div><div class=\"line\">                      .</div><div class=\"line\">                      .</div><div class=\"line\">                      .</div><div class=\"line\">       <span class=\"keyword\">for</span> (i = startPosition; i &lt;= endPosition; ++i) &#123;</div><div class=\"line\"></div><div class=\"line\">           returnedHeight += child.getMeasuredHeight();</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (returnedHeight &gt;= maxHeight) &#123;</div><div class=\"line\">               <span class=\"comment\">// We went over, figure out which height to return.  If returnedHeight &gt; maxHeight,</span></div><div class=\"line\">               <span class=\"comment\">// then the i'th position did not fit completely.</span></div><div class=\"line\">               <span class=\"keyword\">return</span> (disallowPartialChildPosition &gt;= <span class=\"number\">0</span>) <span class=\"comment\">// Disallowing is enabled (&gt; -1)</span></div><div class=\"line\">                           &amp;&amp; (i &gt; disallowPartialChildPosition) <span class=\"comment\">// We've past the min pos</span></div><div class=\"line\">                           &amp;&amp; (prevHeightWithoutPartialChild &gt; <span class=\"number\">0</span>) <span class=\"comment\">// We have a prev height</span></div><div class=\"line\">                           &amp;&amp; (returnedHeight != maxHeight) <span class=\"comment\">// i'th child did not fit completely</span></div><div class=\"line\">                       ? prevHeightWithoutPartialChild</div><div class=\"line\">                       : maxHeight;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> ((disallowPartialChildPosition &gt;= <span class=\"number\">0</span>) &amp;&amp; (i &gt;= disallowPartialChildPosition)) &#123;</div><div class=\"line\">               prevHeightWithoutPartialChild = returnedHeight;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// At this point, we went through the range of children, and they each</span></div><div class=\"line\">       <span class=\"comment\">// completely fit, so return the returnedHeight</span></div><div class=\"line\">       <span class=\"keyword\">return</span> returnedHeight;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h2><h3 id=\"onlayout-這個方法是ViewGroup方法需要重寫的方法\"><a href=\"#onlayout-這個方法是ViewGroup方法需要重寫的方法\" class=\"headerlink\" title=\"onlayout() 這個方法是ViewGroup方法需要重寫的方法\"></a>onlayout() 這個方法是ViewGroup方法需要重寫的方法</h3><p>首先是View的layout()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</div><div class=\"line\">            mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">        &#125;</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">        <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class=\"line\">                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class=\"line\">            onLayout(changed, l, t, r, b);</div><div class=\"line\">                `</div><div class=\"line\">                `</div><div class=\"line\">                ``</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</div><div class=\"line\">        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>判斷changed setOpticalFrame 最終走的也是setFrame 判斷位置是否發生了變化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setFrame</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mLeft != left || mRight != right || mTop != top || mBottom != bottom) &#123;</div><div class=\"line\">            changed = <span class=\"keyword\">true</span>;</div><div class=\"line\">              `</div><div class=\"line\">              `</div><div class=\"line\">        <span class=\"keyword\">return</span> changed;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>發生變化走onLayout方法====viewGroup調用onLayout方法 在各個的onlayou方法中調用view的layou方法確定位置</p>\n<h3 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h3><p>父View的layout方法調用父View的onlyout調用子View的layout</p>\n<p>父view的onLayout來確定子View的具體位置 子View的layout方法來確定滋生的位置  </p>\n<p>其中所有的位置都是相當於父控件的 包括View.getleft 等方法也是相對於父控件的</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj4cuhhmm000062x2435itj1j","category_id":"cj4cuhhmv000262x2w4hxvdj6","_id":"cj4cuhhn8000c62x2yec7s3dz"},{"post_id":"cj4cuhhmm000062x2435itj1j","category_id":"cj4cuhhn2000662x21tvyjnx6","_id":"cj4cuhhn8000d62x2ve90mbiu"},{"post_id":"cj4cuhhmr000162x20rdckoek","category_id":"cj4cuhhmv000262x2w4hxvdj6","_id":"cj4cuhhn9000f62x25l1duh49"},{"post_id":"cj4cuhhmr000162x20rdckoek","category_id":"cj4cuhhn2000662x21tvyjnx6","_id":"cj4cuhhn9000h62x2la6xqh6r"},{"post_id":"cj4cuhhsq000p62x23ip2s25j","category_id":"cj4cuhhsn000m62x2pxlz48y7","_id":"cj4cuhhsv000u62x2z86dtb1k"},{"post_id":"cj4cuhhse000i62x204a2wvij","category_id":"cj4cuhhsn000m62x2pxlz48y7","_id":"cj4cuhhsx000z62x2upz39nq1"},{"post_id":"cj4cuhhss000q62x23svuk6wl","category_id":"cj4cuhhsn000m62x2pxlz48y7","_id":"cj4cuhhsz001262x2ir3j9uge"},{"post_id":"cj4cuhhsj000k62x2dam73wgp","category_id":"cj4cuhhst000r62x2ee9xy9j1","_id":"cj4cuhht1001762x21so1v7oc"},{"post_id":"cj4cuhhsv000v62x2noek0q48","category_id":"cj4cuhhsn000m62x2pxlz48y7","_id":"cj4cuhht3001a62x2muyfzt18"},{"post_id":"cj4cuhhsy001062x2mhk5di94","category_id":"cj4cuhhst000r62x2ee9xy9j1","_id":"cj4cuhht5001d62x2q502et0j"},{"post_id":"cj4cuhhsp000o62x2vki0vhn8","category_id":"cj4cuhhsn000m62x2pxlz48y7","_id":"cj4cuhht7001g62x21dl2x6ie"},{"post_id":"cj4cuhhsu000t62x2282t77gi","category_id":"cj4cuhhmv000262x2w4hxvdj6","_id":"cj4cuhht8001i62x2p30xe4nt"},{"post_id":"cj4cuhhsu000t62x2282t77gi","category_id":"cj4cuhht0001462x2ty58uc6b","_id":"cj4cuhhta001l62x2w8syphsl"},{"post_id":"cj4cuhhsz001362x2xcglw295","category_id":"cj4cuhhmv000262x2w4hxvdj6","_id":"cj4cuhhta001m62x2s9xysicb"},{"post_id":"cj4cuhhsz001362x2xcglw295","category_id":"cj4cuhht3001b62x2az0vh4nb","_id":"cj4cuhhtb001o62x2lnuy7fja"},{"post_id":"cj4cuhht1001862x2kleph0th","category_id":"cj4cuhhmv000262x2w4hxvdj6","_id":"cj4cuhhtc001q62x2rmhgxflm"},{"post_id":"cj4cuhht1001862x2kleph0th","category_id":"cj4cuhht8001j62x2zmawhf74","_id":"cj4cuhhtd001t62x27dnsxntz"}],"PostTag":[{"post_id":"cj4cuhhmm000062x2435itj1j","tag_id":"cj4cuhhmz000362x2xdadomxg","_id":"cj4cuhhn5000862x2cury6ain"},{"post_id":"cj4cuhhmm000062x2435itj1j","tag_id":"cj4cuhhn0000562x2s8tqj77u","_id":"cj4cuhhn5000962x2r8vbyewu"},{"post_id":"cj4cuhhmr000162x20rdckoek","tag_id":"cj4cuhhmz000362x2xdadomxg","_id":"cj4cuhhn9000e62x2y0xb6dv1"},{"post_id":"cj4cuhhmr000162x20rdckoek","tag_id":"cj4cuhhn0000562x2s8tqj77u","_id":"cj4cuhhn9000g62x2mfusmsm8"},{"post_id":"cj4cuhhsu000t62x2282t77gi","tag_id":"cj4cuhhmz000362x2xdadomxg","_id":"cj4cuhhsx000y62x2r9ocahj5"},{"post_id":"cj4cuhhse000i62x204a2wvij","tag_id":"cj4cuhhso000n62x28dhfhsey","_id":"cj4cuhhsz001162x2fevkkzwi"},{"post_id":"cj4cuhhse000i62x204a2wvij","tag_id":"cj4cuhhst000s62x2sfqqxv32","_id":"cj4cuhht1001662x2e4cn4mou"},{"post_id":"cj4cuhhsv000v62x2noek0q48","tag_id":"cj4cuhhso000n62x28dhfhsey","_id":"cj4cuhht3001962x2dxfssoik"},{"post_id":"cj4cuhhsv000v62x2noek0q48","tag_id":"cj4cuhhst000s62x2sfqqxv32","_id":"cj4cuhht4001c62x2a5aoh7j2"},{"post_id":"cj4cuhhsj000k62x2dam73wgp","tag_id":"cj4cuhhsx000x62x2ur7z60zp","_id":"cj4cuhht7001f62x2g4bpm9md"},{"post_id":"cj4cuhhsj000k62x2dam73wgp","tag_id":"cj4cuhht1001562x2c31pet6l","_id":"cj4cuhht8001h62x221l3eied"},{"post_id":"cj4cuhhsp000o62x2vki0vhn8","tag_id":"cj4cuhht5001e62x2l4124orl","_id":"cj4cuhhtc001p62x2pvccpxkz"},{"post_id":"cj4cuhhsp000o62x2vki0vhn8","tag_id":"cj4cuhhst000s62x2sfqqxv32","_id":"cj4cuhhtc001r62x28j01yui3"},{"post_id":"cj4cuhhsq000p62x23ip2s25j","tag_id":"cj4cuhhso000n62x28dhfhsey","_id":"cj4cuhhtd001u62x2qkjn9w5y"},{"post_id":"cj4cuhhsq000p62x23ip2s25j","tag_id":"cj4cuhhst000s62x2sfqqxv32","_id":"cj4cuhhte001v62x2v76piivk"},{"post_id":"cj4cuhhss000q62x23svuk6wl","tag_id":"cj4cuhhso000n62x28dhfhsey","_id":"cj4cuhhth001x62x2ke8xdqi8"},{"post_id":"cj4cuhhss000q62x23svuk6wl","tag_id":"cj4cuhhst000s62x2sfqqxv32","_id":"cj4cuhhth001y62x2873jaj2e"},{"post_id":"cj4cuhhsy001062x2mhk5di94","tag_id":"cj4cuhhte001w62x2preu6vj3","_id":"cj4cuhhtn002162x2e4bx610c"},{"post_id":"cj4cuhhsy001062x2mhk5di94","tag_id":"cj4cuhht1001562x2c31pet6l","_id":"cj4cuhhtn002262x2uj1ooe33"},{"post_id":"cj4cuhhsz001362x2xcglw295","tag_id":"cj4cuhhti002062x2f6h1wugg","_id":"cj4cuhhtn002462x2dffu2v07"},{"post_id":"cj4cuhhsz001362x2xcglw295","tag_id":"cj4cuhhmz000362x2xdadomxg","_id":"cj4cuhhto002562x2pjkctv62"},{"post_id":"cj4cuhht1001862x2kleph0th","tag_id":"cj4cuhhmz000362x2xdadomxg","_id":"cj4cuhhtp002662x2ep4mzkcx"},{"post_id":"cj4cuhht1001862x2kleph0th","tag_id":"cj4cuhhtn002362x26ap48cg5","_id":"cj4cuhhtp002762x22qwvyevn"}],"Tag":[{"name":"笔记","_id":"cj4cuhhmz000362x2xdadomxg"},{"name":"java","_id":"cj4cuhhn0000562x2s8tqj77u"},{"name":"struts2","_id":"cj4cuhhso000n62x28dhfhsey"},{"name":"javaee","_id":"cj4cuhhst000s62x2sfqqxv32"},{"name":"okhttp","_id":"cj4cuhhsx000x62x2ur7z60zp"},{"name":"library","_id":"cj4cuhht1001562x2c31pet6l"},{"name":"sql","_id":"cj4cuhht5001e62x2l4124orl"},{"name":"animation","_id":"cj4cuhhte001w62x2preu6vj3"},{"name":"android studio","_id":"cj4cuhhti002062x2f6h1wugg"},{"name":"view","_id":"cj4cuhhtn002362x26ap48cg5"}]}}